/*
Oura API Documentation

# Overview   The Oura API allows Oura users and partner applications to improve their user experience with Oura data.  This document describes the Oura API Version 2 (V2), which supports access to the latest Oura Ring data types.  For access to other data types—which have not yet migrated to V2—refer to the [Oura API Version 1 (V1)](https://cloud.ouraring.com/docs/) documentation.  # Data Access  Individual Oura users can access their own data through the API by using a [Personal Access Token](https://cloud.ouraring.com/personal-access-tokens).  If you want to retrieve data for multiple users, a registered [API Application](https://cloud.ouraring.com/oauth/applications) is required.  API Applications are limited to **10** users before requiring approval from Oura. There is no limit once an application is approved.  Additionally, Oura users **must provide consent** to share each data type an API Application has access to.  All data access requests through the Oura API require [Authentication](https://cloud.ouraring.com/docs/authentication).  Additionally, we recommend that Oura users keep their mobile app updated to support API access for the latest data types.  # Authentication  The Oura API provides two methods for Authentication: (1) the OAuth2 protocol and (2) Personal Access Tokens. For more information on the OAuth2 flow, see our [Authentication instructions](https://cloud.ouraring.com/docs/authentication).  Access tokens must be included in the request header as follows: ```http GET /v2/usercollection/personal_info HTTP/1.1 Host: api.ouraring.com Authorization: Bearer <token> ```  # Oura HTTP Response Codes  | Response Code                        | Description | | ------------------------------------ | - | | 200 OK                               | Successful Response         | | 400 Query Parameter Validation Error | The request contains query parameters that are invalid or incorrectly formatted. | | 429 Request Rate Limit Exceeded        | The API is rate limited to 5000 requests in a 5 minute period. You will receive a 429 error code if you exceed this limit. [Contact us](mailto:api-support@ouraring.com) if you expect your usage to exceed this limit.| 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oura

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PersonalInfoResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PersonalInfoResponse{}

// PersonalInfoResponse struct for PersonalInfoResponse
type PersonalInfoResponse struct {
	Id string `json:"id"`
	Age NullableInt32 `json:"age,omitempty"`
	Weight NullableFloat32 `json:"weight,omitempty"`
	Height NullableFloat32 `json:"height,omitempty"`
	BiologicalSex NullableString `json:"biological_sex,omitempty"`
	Email NullableString `json:"email,omitempty"`
}

type _PersonalInfoResponse PersonalInfoResponse

// NewPersonalInfoResponse instantiates a new PersonalInfoResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPersonalInfoResponse(id string) *PersonalInfoResponse {
	this := PersonalInfoResponse{}
	this.Id = id
	return &this
}

// NewPersonalInfoResponseWithDefaults instantiates a new PersonalInfoResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPersonalInfoResponseWithDefaults() *PersonalInfoResponse {
	this := PersonalInfoResponse{}
	return &this
}

// GetId returns the Id field value
func (o *PersonalInfoResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PersonalInfoResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PersonalInfoResponse) SetId(v string) {
	o.Id = v
}

// GetAge returns the Age field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PersonalInfoResponse) GetAge() int32 {
	if o == nil || IsNil(o.Age.Get()) {
		var ret int32
		return ret
	}
	return *o.Age.Get()
}

// GetAgeOk returns a tuple with the Age field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PersonalInfoResponse) GetAgeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Age.Get(), o.Age.IsSet()
}

// HasAge returns a boolean if a field has been set.
func (o *PersonalInfoResponse) HasAge() bool {
	if o != nil && o.Age.IsSet() {
		return true
	}

	return false
}

// SetAge gets a reference to the given NullableInt32 and assigns it to the Age field.
func (o *PersonalInfoResponse) SetAge(v int32) {
	o.Age.Set(&v)
}
// SetAgeNil sets the value for Age to be an explicit nil
func (o *PersonalInfoResponse) SetAgeNil() {
	o.Age.Set(nil)
}

// UnsetAge ensures that no value is present for Age, not even an explicit nil
func (o *PersonalInfoResponse) UnsetAge() {
	o.Age.Unset()
}

// GetWeight returns the Weight field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PersonalInfoResponse) GetWeight() float32 {
	if o == nil || IsNil(o.Weight.Get()) {
		var ret float32
		return ret
	}
	return *o.Weight.Get()
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PersonalInfoResponse) GetWeightOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Weight.Get(), o.Weight.IsSet()
}

// HasWeight returns a boolean if a field has been set.
func (o *PersonalInfoResponse) HasWeight() bool {
	if o != nil && o.Weight.IsSet() {
		return true
	}

	return false
}

// SetWeight gets a reference to the given NullableFloat32 and assigns it to the Weight field.
func (o *PersonalInfoResponse) SetWeight(v float32) {
	o.Weight.Set(&v)
}
// SetWeightNil sets the value for Weight to be an explicit nil
func (o *PersonalInfoResponse) SetWeightNil() {
	o.Weight.Set(nil)
}

// UnsetWeight ensures that no value is present for Weight, not even an explicit nil
func (o *PersonalInfoResponse) UnsetWeight() {
	o.Weight.Unset()
}

// GetHeight returns the Height field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PersonalInfoResponse) GetHeight() float32 {
	if o == nil || IsNil(o.Height.Get()) {
		var ret float32
		return ret
	}
	return *o.Height.Get()
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PersonalInfoResponse) GetHeightOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Height.Get(), o.Height.IsSet()
}

// HasHeight returns a boolean if a field has been set.
func (o *PersonalInfoResponse) HasHeight() bool {
	if o != nil && o.Height.IsSet() {
		return true
	}

	return false
}

// SetHeight gets a reference to the given NullableFloat32 and assigns it to the Height field.
func (o *PersonalInfoResponse) SetHeight(v float32) {
	o.Height.Set(&v)
}
// SetHeightNil sets the value for Height to be an explicit nil
func (o *PersonalInfoResponse) SetHeightNil() {
	o.Height.Set(nil)
}

// UnsetHeight ensures that no value is present for Height, not even an explicit nil
func (o *PersonalInfoResponse) UnsetHeight() {
	o.Height.Unset()
}

// GetBiologicalSex returns the BiologicalSex field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PersonalInfoResponse) GetBiologicalSex() string {
	if o == nil || IsNil(o.BiologicalSex.Get()) {
		var ret string
		return ret
	}
	return *o.BiologicalSex.Get()
}

// GetBiologicalSexOk returns a tuple with the BiologicalSex field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PersonalInfoResponse) GetBiologicalSexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BiologicalSex.Get(), o.BiologicalSex.IsSet()
}

// HasBiologicalSex returns a boolean if a field has been set.
func (o *PersonalInfoResponse) HasBiologicalSex() bool {
	if o != nil && o.BiologicalSex.IsSet() {
		return true
	}

	return false
}

// SetBiologicalSex gets a reference to the given NullableString and assigns it to the BiologicalSex field.
func (o *PersonalInfoResponse) SetBiologicalSex(v string) {
	o.BiologicalSex.Set(&v)
}
// SetBiologicalSexNil sets the value for BiologicalSex to be an explicit nil
func (o *PersonalInfoResponse) SetBiologicalSexNil() {
	o.BiologicalSex.Set(nil)
}

// UnsetBiologicalSex ensures that no value is present for BiologicalSex, not even an explicit nil
func (o *PersonalInfoResponse) UnsetBiologicalSex() {
	o.BiologicalSex.Unset()
}

// GetEmail returns the Email field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PersonalInfoResponse) GetEmail() string {
	if o == nil || IsNil(o.Email.Get()) {
		var ret string
		return ret
	}
	return *o.Email.Get()
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PersonalInfoResponse) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Email.Get(), o.Email.IsSet()
}

// HasEmail returns a boolean if a field has been set.
func (o *PersonalInfoResponse) HasEmail() bool {
	if o != nil && o.Email.IsSet() {
		return true
	}

	return false
}

// SetEmail gets a reference to the given NullableString and assigns it to the Email field.
func (o *PersonalInfoResponse) SetEmail(v string) {
	o.Email.Set(&v)
}
// SetEmailNil sets the value for Email to be an explicit nil
func (o *PersonalInfoResponse) SetEmailNil() {
	o.Email.Set(nil)
}

// UnsetEmail ensures that no value is present for Email, not even an explicit nil
func (o *PersonalInfoResponse) UnsetEmail() {
	o.Email.Unset()
}

func (o PersonalInfoResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PersonalInfoResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if o.Age.IsSet() {
		toSerialize["age"] = o.Age.Get()
	}
	if o.Weight.IsSet() {
		toSerialize["weight"] = o.Weight.Get()
	}
	if o.Height.IsSet() {
		toSerialize["height"] = o.Height.Get()
	}
	if o.BiologicalSex.IsSet() {
		toSerialize["biological_sex"] = o.BiologicalSex.Get()
	}
	if o.Email.IsSet() {
		toSerialize["email"] = o.Email.Get()
	}
	return toSerialize, nil
}

func (o *PersonalInfoResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPersonalInfoResponse := _PersonalInfoResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPersonalInfoResponse)

	if err != nil {
		return err
	}

	*o = PersonalInfoResponse(varPersonalInfoResponse)

	return err
}

type NullablePersonalInfoResponse struct {
	value *PersonalInfoResponse
	isSet bool
}

func (v NullablePersonalInfoResponse) Get() *PersonalInfoResponse {
	return v.value
}

func (v *NullablePersonalInfoResponse) Set(val *PersonalInfoResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePersonalInfoResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePersonalInfoResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePersonalInfoResponse(val *PersonalInfoResponse) *NullablePersonalInfoResponse {
	return &NullablePersonalInfoResponse{value: val, isSet: true}
}

func (v NullablePersonalInfoResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePersonalInfoResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


