/*
Oura API Documentation

# Overview   The Oura API allows Oura users and partner applications to improve their user experience with Oura data.  This document describes the Oura API Version 2 (V2), which supports access to the latest Oura Ring data types.  For access to other data types—which have not yet migrated to V2—refer to the [Oura API Version 1 (V1)](https://cloud.ouraring.com/docs/) documentation.  # Data Access  Individual Oura users can access their own data through the API by using a [Personal Access Token](https://cloud.ouraring.com/personal-access-tokens).  If you want to retrieve data for multiple users, a registered [API Application](https://cloud.ouraring.com/oauth/applications) is required.  API Applications are limited to **10** users before requiring approval from Oura. There is no limit once an application is approved.  Additionally, Oura users **must provide consent** to share each data type an API Application has access to.  All data access requests through the Oura API require [Authentication](https://cloud.ouraring.com/docs/authentication).  Additionally, we recommend that Oura users keep their mobile app updated to support API access for the latest data types.  # Authentication  The Oura API provides two methods for Authentication: (1) the OAuth2 protocol and (2) Personal Access Tokens. For more information on the OAuth2 flow, see our [Authentication instructions](https://cloud.ouraring.com/docs/authentication).  Access tokens must be included in the request header as follows: ```http GET /v2/usercollection/personal_info HTTP/1.1 Host: api.ouraring.com Authorization: Bearer <token> ```  # Oura HTTP Response Codes  | Response Code                        | Description | | ------------------------------------ | - | | 200 OK                               | Successful Response         | | 400 Query Parameter Validation Error | The request contains query parameters that are invalid or incorrectly formatted. | | 429 Request Rate Limit Exceeded        | The API is rate limited to 5000 requests in a 5 minute period. You will receive a 429 error code if you exceed this limit. [Contact us](mailto:api-support@ouraring.com) if you expect your usage to exceed this limit.| 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oura

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SessionModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SessionModel{}

// SessionModel struct for SessionModel
type SessionModel struct {
	Id string `json:"id"`
	// The date when the session occurred.
	Day string `json:"day"`
	// Timestamp indicating when the Moment ended.
	StartDatetime string `json:"start_datetime"`
	// Timestamp indicating when the Moment ended.
	EndDatetime string `json:"end_datetime"`
	Type MomentType `json:"type"`
	HeartRate NullableSampleModel `json:"heart_rate,omitempty"`
	HeartRateVariability NullableSampleModel `json:"heart_rate_variability,omitempty"`
	Mood NullableMomentMood `json:"mood,omitempty"`
	MotionCount NullableSampleModel `json:"motion_count,omitempty"`
}

type _SessionModel SessionModel

// NewSessionModel instantiates a new SessionModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSessionModel(id string, day string, startDatetime string, endDatetime string, type_ MomentType) *SessionModel {
	this := SessionModel{}
	this.Id = id
	this.Day = day
	this.StartDatetime = startDatetime
	this.EndDatetime = endDatetime
	this.Type = type_
	return &this
}

// NewSessionModelWithDefaults instantiates a new SessionModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSessionModelWithDefaults() *SessionModel {
	this := SessionModel{}
	return &this
}

// GetId returns the Id field value
func (o *SessionModel) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SessionModel) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SessionModel) SetId(v string) {
	o.Id = v
}

// GetDay returns the Day field value
func (o *SessionModel) GetDay() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Day
}

// GetDayOk returns a tuple with the Day field value
// and a boolean to check if the value has been set.
func (o *SessionModel) GetDayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Day, true
}

// SetDay sets field value
func (o *SessionModel) SetDay(v string) {
	o.Day = v
}

// GetStartDatetime returns the StartDatetime field value
func (o *SessionModel) GetStartDatetime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartDatetime
}

// GetStartDatetimeOk returns a tuple with the StartDatetime field value
// and a boolean to check if the value has been set.
func (o *SessionModel) GetStartDatetimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDatetime, true
}

// SetStartDatetime sets field value
func (o *SessionModel) SetStartDatetime(v string) {
	o.StartDatetime = v
}

// GetEndDatetime returns the EndDatetime field value
func (o *SessionModel) GetEndDatetime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EndDatetime
}

// GetEndDatetimeOk returns a tuple with the EndDatetime field value
// and a boolean to check if the value has been set.
func (o *SessionModel) GetEndDatetimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndDatetime, true
}

// SetEndDatetime sets field value
func (o *SessionModel) SetEndDatetime(v string) {
	o.EndDatetime = v
}

// GetType returns the Type field value
func (o *SessionModel) GetType() MomentType {
	if o == nil {
		var ret MomentType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SessionModel) GetTypeOk() (*MomentType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SessionModel) SetType(v MomentType) {
	o.Type = v
}

// GetHeartRate returns the HeartRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SessionModel) GetHeartRate() SampleModel {
	if o == nil || IsNil(o.HeartRate.Get()) {
		var ret SampleModel
		return ret
	}
	return *o.HeartRate.Get()
}

// GetHeartRateOk returns a tuple with the HeartRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SessionModel) GetHeartRateOk() (*SampleModel, bool) {
	if o == nil {
		return nil, false
	}
	return o.HeartRate.Get(), o.HeartRate.IsSet()
}

// HasHeartRate returns a boolean if a field has been set.
func (o *SessionModel) HasHeartRate() bool {
	if o != nil && o.HeartRate.IsSet() {
		return true
	}

	return false
}

// SetHeartRate gets a reference to the given NullableSampleModel and assigns it to the HeartRate field.
func (o *SessionModel) SetHeartRate(v SampleModel) {
	o.HeartRate.Set(&v)
}
// SetHeartRateNil sets the value for HeartRate to be an explicit nil
func (o *SessionModel) SetHeartRateNil() {
	o.HeartRate.Set(nil)
}

// UnsetHeartRate ensures that no value is present for HeartRate, not even an explicit nil
func (o *SessionModel) UnsetHeartRate() {
	o.HeartRate.Unset()
}

// GetHeartRateVariability returns the HeartRateVariability field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SessionModel) GetHeartRateVariability() SampleModel {
	if o == nil || IsNil(o.HeartRateVariability.Get()) {
		var ret SampleModel
		return ret
	}
	return *o.HeartRateVariability.Get()
}

// GetHeartRateVariabilityOk returns a tuple with the HeartRateVariability field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SessionModel) GetHeartRateVariabilityOk() (*SampleModel, bool) {
	if o == nil {
		return nil, false
	}
	return o.HeartRateVariability.Get(), o.HeartRateVariability.IsSet()
}

// HasHeartRateVariability returns a boolean if a field has been set.
func (o *SessionModel) HasHeartRateVariability() bool {
	if o != nil && o.HeartRateVariability.IsSet() {
		return true
	}

	return false
}

// SetHeartRateVariability gets a reference to the given NullableSampleModel and assigns it to the HeartRateVariability field.
func (o *SessionModel) SetHeartRateVariability(v SampleModel) {
	o.HeartRateVariability.Set(&v)
}
// SetHeartRateVariabilityNil sets the value for HeartRateVariability to be an explicit nil
func (o *SessionModel) SetHeartRateVariabilityNil() {
	o.HeartRateVariability.Set(nil)
}

// UnsetHeartRateVariability ensures that no value is present for HeartRateVariability, not even an explicit nil
func (o *SessionModel) UnsetHeartRateVariability() {
	o.HeartRateVariability.Unset()
}

// GetMood returns the Mood field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SessionModel) GetMood() MomentMood {
	if o == nil || IsNil(o.Mood.Get()) {
		var ret MomentMood
		return ret
	}
	return *o.Mood.Get()
}

// GetMoodOk returns a tuple with the Mood field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SessionModel) GetMoodOk() (*MomentMood, bool) {
	if o == nil {
		return nil, false
	}
	return o.Mood.Get(), o.Mood.IsSet()
}

// HasMood returns a boolean if a field has been set.
func (o *SessionModel) HasMood() bool {
	if o != nil && o.Mood.IsSet() {
		return true
	}

	return false
}

// SetMood gets a reference to the given NullableMomentMood and assigns it to the Mood field.
func (o *SessionModel) SetMood(v MomentMood) {
	o.Mood.Set(&v)
}
// SetMoodNil sets the value for Mood to be an explicit nil
func (o *SessionModel) SetMoodNil() {
	o.Mood.Set(nil)
}

// UnsetMood ensures that no value is present for Mood, not even an explicit nil
func (o *SessionModel) UnsetMood() {
	o.Mood.Unset()
}

// GetMotionCount returns the MotionCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SessionModel) GetMotionCount() SampleModel {
	if o == nil || IsNil(o.MotionCount.Get()) {
		var ret SampleModel
		return ret
	}
	return *o.MotionCount.Get()
}

// GetMotionCountOk returns a tuple with the MotionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SessionModel) GetMotionCountOk() (*SampleModel, bool) {
	if o == nil {
		return nil, false
	}
	return o.MotionCount.Get(), o.MotionCount.IsSet()
}

// HasMotionCount returns a boolean if a field has been set.
func (o *SessionModel) HasMotionCount() bool {
	if o != nil && o.MotionCount.IsSet() {
		return true
	}

	return false
}

// SetMotionCount gets a reference to the given NullableSampleModel and assigns it to the MotionCount field.
func (o *SessionModel) SetMotionCount(v SampleModel) {
	o.MotionCount.Set(&v)
}
// SetMotionCountNil sets the value for MotionCount to be an explicit nil
func (o *SessionModel) SetMotionCountNil() {
	o.MotionCount.Set(nil)
}

// UnsetMotionCount ensures that no value is present for MotionCount, not even an explicit nil
func (o *SessionModel) UnsetMotionCount() {
	o.MotionCount.Unset()
}

func (o SessionModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SessionModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["day"] = o.Day
	toSerialize["start_datetime"] = o.StartDatetime
	toSerialize["end_datetime"] = o.EndDatetime
	toSerialize["type"] = o.Type
	if o.HeartRate.IsSet() {
		toSerialize["heart_rate"] = o.HeartRate.Get()
	}
	if o.HeartRateVariability.IsSet() {
		toSerialize["heart_rate_variability"] = o.HeartRateVariability.Get()
	}
	if o.Mood.IsSet() {
		toSerialize["mood"] = o.Mood.Get()
	}
	if o.MotionCount.IsSet() {
		toSerialize["motion_count"] = o.MotionCount.Get()
	}
	return toSerialize, nil
}

func (o *SessionModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"day",
		"start_datetime",
		"end_datetime",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSessionModel := _SessionModel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSessionModel)

	if err != nil {
		return err
	}

	*o = SessionModel(varSessionModel)

	return err
}

type NullableSessionModel struct {
	value *SessionModel
	isSet bool
}

func (v NullableSessionModel) Get() *SessionModel {
	return v.value
}

func (v *NullableSessionModel) Set(val *SessionModel) {
	v.value = val
	v.isSet = true
}

func (v NullableSessionModel) IsSet() bool {
	return v.isSet
}

func (v *NullableSessionModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSessionModel(val *SessionModel) *NullableSessionModel {
	return &NullableSessionModel{value: val, isSet: true}
}

func (v NullableSessionModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSessionModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


