/*
Oura API Documentation

# Overview   The Oura API allows Oura users and partner applications to improve their user experience with Oura data.  This document describes the Oura API Version 2 (V2), which supports access to the latest Oura Ring data types.  For access to other data types—which have not yet migrated to V2—refer to the [Oura API Version 1 (V1)](https://cloud.ouraring.com/docs/) documentation.  # Data Access  Individual Oura users can access their own data through the API by using a [Personal Access Token](https://cloud.ouraring.com/personal-access-tokens).  If you want to retrieve data for multiple users, a registered [API Application](https://cloud.ouraring.com/oauth/applications) is required.  API Applications are limited to **10** users before requiring approval from Oura. There is no limit once an application is approved.  Additionally, Oura users **must provide consent** to share each data type an API Application has access to.  All data access requests through the Oura API require [Authentication](https://cloud.ouraring.com/docs/authentication).  Additionally, we recommend that Oura users keep their mobile app updated to support API access for the latest data types.  # Authentication  The Oura API provides two methods for Authentication: (1) the OAuth2 protocol and (2) Personal Access Tokens. For more information on the OAuth2 flow, see our [Authentication instructions](https://cloud.ouraring.com/docs/authentication).  Access tokens must be included in the request header as follows: ```http GET /v2/usercollection/personal_info HTTP/1.1 Host: api.ouraring.com Authorization: Bearer <token> ```  # Oura HTTP Response Codes  | Response Code                        | Description | | ------------------------------------ | - | | 200 OK                               | Successful Response         | | 400 Query Parameter Validation Error | The request contains query parameters that are invalid or incorrectly formatted. | | 429 Request Rate Limit Exceeded        | The API is rate limited to 5000 requests in a 5 minute period. You will receive a 429 error code if you exceed this limit. [Contact us](mailto:api-support@ouraring.com) if you expect your usage to exceed this limit.| 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oura

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RingConfigurationModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RingConfigurationModel{}

// RingConfigurationModel struct for RingConfigurationModel
type RingConfigurationModel struct {
	Id string `json:"id"`
	Color NullableRingColor `json:"color,omitempty"`
	Design NullableRingDesign `json:"design,omitempty"`
	FirmwareVersion NullableString `json:"firmware_version,omitempty"`
	HardwareType NullableRingHardwareType `json:"hardware_type,omitempty"`
	SetUpAt *string `json:"set_up_at,omitempty"`
	Size NullableInt32 `json:"size,omitempty"`
}

type _RingConfigurationModel RingConfigurationModel

// NewRingConfigurationModel instantiates a new RingConfigurationModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRingConfigurationModel(id string) *RingConfigurationModel {
	this := RingConfigurationModel{}
	this.Id = id
	return &this
}

// NewRingConfigurationModelWithDefaults instantiates a new RingConfigurationModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRingConfigurationModelWithDefaults() *RingConfigurationModel {
	this := RingConfigurationModel{}
	return &this
}

// GetId returns the Id field value
func (o *RingConfigurationModel) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RingConfigurationModel) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RingConfigurationModel) SetId(v string) {
	o.Id = v
}

// GetColor returns the Color field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RingConfigurationModel) GetColor() RingColor {
	if o == nil || IsNil(o.Color.Get()) {
		var ret RingColor
		return ret
	}
	return *o.Color.Get()
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RingConfigurationModel) GetColorOk() (*RingColor, bool) {
	if o == nil {
		return nil, false
	}
	return o.Color.Get(), o.Color.IsSet()
}

// HasColor returns a boolean if a field has been set.
func (o *RingConfigurationModel) HasColor() bool {
	if o != nil && o.Color.IsSet() {
		return true
	}

	return false
}

// SetColor gets a reference to the given NullableRingColor and assigns it to the Color field.
func (o *RingConfigurationModel) SetColor(v RingColor) {
	o.Color.Set(&v)
}
// SetColorNil sets the value for Color to be an explicit nil
func (o *RingConfigurationModel) SetColorNil() {
	o.Color.Set(nil)
}

// UnsetColor ensures that no value is present for Color, not even an explicit nil
func (o *RingConfigurationModel) UnsetColor() {
	o.Color.Unset()
}

// GetDesign returns the Design field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RingConfigurationModel) GetDesign() RingDesign {
	if o == nil || IsNil(o.Design.Get()) {
		var ret RingDesign
		return ret
	}
	return *o.Design.Get()
}

// GetDesignOk returns a tuple with the Design field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RingConfigurationModel) GetDesignOk() (*RingDesign, bool) {
	if o == nil {
		return nil, false
	}
	return o.Design.Get(), o.Design.IsSet()
}

// HasDesign returns a boolean if a field has been set.
func (o *RingConfigurationModel) HasDesign() bool {
	if o != nil && o.Design.IsSet() {
		return true
	}

	return false
}

// SetDesign gets a reference to the given NullableRingDesign and assigns it to the Design field.
func (o *RingConfigurationModel) SetDesign(v RingDesign) {
	o.Design.Set(&v)
}
// SetDesignNil sets the value for Design to be an explicit nil
func (o *RingConfigurationModel) SetDesignNil() {
	o.Design.Set(nil)
}

// UnsetDesign ensures that no value is present for Design, not even an explicit nil
func (o *RingConfigurationModel) UnsetDesign() {
	o.Design.Unset()
}

// GetFirmwareVersion returns the FirmwareVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RingConfigurationModel) GetFirmwareVersion() string {
	if o == nil || IsNil(o.FirmwareVersion.Get()) {
		var ret string
		return ret
	}
	return *o.FirmwareVersion.Get()
}

// GetFirmwareVersionOk returns a tuple with the FirmwareVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RingConfigurationModel) GetFirmwareVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FirmwareVersion.Get(), o.FirmwareVersion.IsSet()
}

// HasFirmwareVersion returns a boolean if a field has been set.
func (o *RingConfigurationModel) HasFirmwareVersion() bool {
	if o != nil && o.FirmwareVersion.IsSet() {
		return true
	}

	return false
}

// SetFirmwareVersion gets a reference to the given NullableString and assigns it to the FirmwareVersion field.
func (o *RingConfigurationModel) SetFirmwareVersion(v string) {
	o.FirmwareVersion.Set(&v)
}
// SetFirmwareVersionNil sets the value for FirmwareVersion to be an explicit nil
func (o *RingConfigurationModel) SetFirmwareVersionNil() {
	o.FirmwareVersion.Set(nil)
}

// UnsetFirmwareVersion ensures that no value is present for FirmwareVersion, not even an explicit nil
func (o *RingConfigurationModel) UnsetFirmwareVersion() {
	o.FirmwareVersion.Unset()
}

// GetHardwareType returns the HardwareType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RingConfigurationModel) GetHardwareType() RingHardwareType {
	if o == nil || IsNil(o.HardwareType.Get()) {
		var ret RingHardwareType
		return ret
	}
	return *o.HardwareType.Get()
}

// GetHardwareTypeOk returns a tuple with the HardwareType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RingConfigurationModel) GetHardwareTypeOk() (*RingHardwareType, bool) {
	if o == nil {
		return nil, false
	}
	return o.HardwareType.Get(), o.HardwareType.IsSet()
}

// HasHardwareType returns a boolean if a field has been set.
func (o *RingConfigurationModel) HasHardwareType() bool {
	if o != nil && o.HardwareType.IsSet() {
		return true
	}

	return false
}

// SetHardwareType gets a reference to the given NullableRingHardwareType and assigns it to the HardwareType field.
func (o *RingConfigurationModel) SetHardwareType(v RingHardwareType) {
	o.HardwareType.Set(&v)
}
// SetHardwareTypeNil sets the value for HardwareType to be an explicit nil
func (o *RingConfigurationModel) SetHardwareTypeNil() {
	o.HardwareType.Set(nil)
}

// UnsetHardwareType ensures that no value is present for HardwareType, not even an explicit nil
func (o *RingConfigurationModel) UnsetHardwareType() {
	o.HardwareType.Unset()
}

// GetSetUpAt returns the SetUpAt field value if set, zero value otherwise.
func (o *RingConfigurationModel) GetSetUpAt() string {
	if o == nil || IsNil(o.SetUpAt) {
		var ret string
		return ret
	}
	return *o.SetUpAt
}

// GetSetUpAtOk returns a tuple with the SetUpAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RingConfigurationModel) GetSetUpAtOk() (*string, bool) {
	if o == nil || IsNil(o.SetUpAt) {
		return nil, false
	}
	return o.SetUpAt, true
}

// HasSetUpAt returns a boolean if a field has been set.
func (o *RingConfigurationModel) HasSetUpAt() bool {
	if o != nil && !IsNil(o.SetUpAt) {
		return true
	}

	return false
}

// SetSetUpAt gets a reference to the given string and assigns it to the SetUpAt field.
func (o *RingConfigurationModel) SetSetUpAt(v string) {
	o.SetUpAt = &v
}

// GetSize returns the Size field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RingConfigurationModel) GetSize() int32 {
	if o == nil || IsNil(o.Size.Get()) {
		var ret int32
		return ret
	}
	return *o.Size.Get()
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RingConfigurationModel) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Size.Get(), o.Size.IsSet()
}

// HasSize returns a boolean if a field has been set.
func (o *RingConfigurationModel) HasSize() bool {
	if o != nil && o.Size.IsSet() {
		return true
	}

	return false
}

// SetSize gets a reference to the given NullableInt32 and assigns it to the Size field.
func (o *RingConfigurationModel) SetSize(v int32) {
	o.Size.Set(&v)
}
// SetSizeNil sets the value for Size to be an explicit nil
func (o *RingConfigurationModel) SetSizeNil() {
	o.Size.Set(nil)
}

// UnsetSize ensures that no value is present for Size, not even an explicit nil
func (o *RingConfigurationModel) UnsetSize() {
	o.Size.Unset()
}

func (o RingConfigurationModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RingConfigurationModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if o.Color.IsSet() {
		toSerialize["color"] = o.Color.Get()
	}
	if o.Design.IsSet() {
		toSerialize["design"] = o.Design.Get()
	}
	if o.FirmwareVersion.IsSet() {
		toSerialize["firmware_version"] = o.FirmwareVersion.Get()
	}
	if o.HardwareType.IsSet() {
		toSerialize["hardware_type"] = o.HardwareType.Get()
	}
	if !IsNil(o.SetUpAt) {
		toSerialize["set_up_at"] = o.SetUpAt
	}
	if o.Size.IsSet() {
		toSerialize["size"] = o.Size.Get()
	}
	return toSerialize, nil
}

func (o *RingConfigurationModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRingConfigurationModel := _RingConfigurationModel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRingConfigurationModel)

	if err != nil {
		return err
	}

	*o = RingConfigurationModel(varRingConfigurationModel)

	return err
}

type NullableRingConfigurationModel struct {
	value *RingConfigurationModel
	isSet bool
}

func (v NullableRingConfigurationModel) Get() *RingConfigurationModel {
	return v.value
}

func (v *NullableRingConfigurationModel) Set(val *RingConfigurationModel) {
	v.value = val
	v.isSet = true
}

func (v NullableRingConfigurationModel) IsSet() bool {
	return v.isSet
}

func (v *NullableRingConfigurationModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRingConfigurationModel(val *RingConfigurationModel) *NullableRingConfigurationModel {
	return &NullableRingConfigurationModel{value: val, isSet: true}
}

func (v NullableRingConfigurationModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRingConfigurationModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


