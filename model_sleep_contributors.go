/*
Oura API Documentation

# Overview   The Oura API allows Oura users and partner applications to improve their user experience with Oura data.  This document describes the Oura API Version 2 (V2), which supports access to the latest Oura Ring data types.  For access to other data types—which have not yet migrated to V2—refer to the [Oura API Version 1 (V1)](https://cloud.ouraring.com/docs/) documentation.  # Data Access  Individual Oura users can access their own data through the API by using a [Personal Access Token](https://cloud.ouraring.com/personal-access-tokens).  If you want to retrieve data for multiple users, a registered [API Application](https://cloud.ouraring.com/oauth/applications) is required.  API Applications are limited to **10** users before requiring approval from Oura. There is no limit once an application is approved.  Additionally, Oura users **must provide consent** to share each data type an API Application has access to.  All data access requests through the Oura API require [Authentication](https://cloud.ouraring.com/docs/authentication).  Additionally, we recommend that Oura users keep their mobile app updated to support API access for the latest data types.  # Authentication  The Oura API provides two methods for Authentication: (1) the OAuth2 protocol and (2) Personal Access Tokens. For more information on the OAuth2 flow, see our [Authentication instructions](https://cloud.ouraring.com/docs/authentication).  Access tokens must be included in the request header as follows: ```http GET /v2/usercollection/personal_info HTTP/1.1 Host: api.ouraring.com Authorization: Bearer <token> ```  # Oura HTTP Response Codes  | Response Code                        | Description | | ------------------------------------ | - | | 200 OK                               | Successful Response         | | 400 Query Parameter Validation Error | The request contains query parameters that are invalid or incorrectly formatted. | | 429 Request Rate Limit Exceeded        | The API is rate limited to 5000 requests in a 5 minute period. You will receive a 429 error code if you exceed this limit. [Contact us](mailto:api-support@ouraring.com) if you expect your usage to exceed this limit.| 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oura

import (
	"encoding/json"
)

// checks if the SleepContributors type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SleepContributors{}

// SleepContributors Object defining sleep score contributors.
type SleepContributors struct {
	DeepSleep NullableInt32 `json:"deep_sleep,omitempty"`
	Efficiency NullableInt32 `json:"efficiency,omitempty"`
	Latency NullableInt32 `json:"latency,omitempty"`
	RemSleep NullableInt32 `json:"rem_sleep,omitempty"`
	Restfulness NullableInt32 `json:"restfulness,omitempty"`
	Timing NullableInt32 `json:"timing,omitempty"`
	TotalSleep NullableInt32 `json:"total_sleep,omitempty"`
}

// NewSleepContributors instantiates a new SleepContributors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSleepContributors() *SleepContributors {
	this := SleepContributors{}
	return &this
}

// NewSleepContributorsWithDefaults instantiates a new SleepContributors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSleepContributorsWithDefaults() *SleepContributors {
	this := SleepContributors{}
	return &this
}

// GetDeepSleep returns the DeepSleep field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SleepContributors) GetDeepSleep() int32 {
	if o == nil || IsNil(o.DeepSleep.Get()) {
		var ret int32
		return ret
	}
	return *o.DeepSleep.Get()
}

// GetDeepSleepOk returns a tuple with the DeepSleep field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SleepContributors) GetDeepSleepOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeepSleep.Get(), o.DeepSleep.IsSet()
}

// HasDeepSleep returns a boolean if a field has been set.
func (o *SleepContributors) HasDeepSleep() bool {
	if o != nil && o.DeepSleep.IsSet() {
		return true
	}

	return false
}

// SetDeepSleep gets a reference to the given NullableInt32 and assigns it to the DeepSleep field.
func (o *SleepContributors) SetDeepSleep(v int32) {
	o.DeepSleep.Set(&v)
}
// SetDeepSleepNil sets the value for DeepSleep to be an explicit nil
func (o *SleepContributors) SetDeepSleepNil() {
	o.DeepSleep.Set(nil)
}

// UnsetDeepSleep ensures that no value is present for DeepSleep, not even an explicit nil
func (o *SleepContributors) UnsetDeepSleep() {
	o.DeepSleep.Unset()
}

// GetEfficiency returns the Efficiency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SleepContributors) GetEfficiency() int32 {
	if o == nil || IsNil(o.Efficiency.Get()) {
		var ret int32
		return ret
	}
	return *o.Efficiency.Get()
}

// GetEfficiencyOk returns a tuple with the Efficiency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SleepContributors) GetEfficiencyOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Efficiency.Get(), o.Efficiency.IsSet()
}

// HasEfficiency returns a boolean if a field has been set.
func (o *SleepContributors) HasEfficiency() bool {
	if o != nil && o.Efficiency.IsSet() {
		return true
	}

	return false
}

// SetEfficiency gets a reference to the given NullableInt32 and assigns it to the Efficiency field.
func (o *SleepContributors) SetEfficiency(v int32) {
	o.Efficiency.Set(&v)
}
// SetEfficiencyNil sets the value for Efficiency to be an explicit nil
func (o *SleepContributors) SetEfficiencyNil() {
	o.Efficiency.Set(nil)
}

// UnsetEfficiency ensures that no value is present for Efficiency, not even an explicit nil
func (o *SleepContributors) UnsetEfficiency() {
	o.Efficiency.Unset()
}

// GetLatency returns the Latency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SleepContributors) GetLatency() int32 {
	if o == nil || IsNil(o.Latency.Get()) {
		var ret int32
		return ret
	}
	return *o.Latency.Get()
}

// GetLatencyOk returns a tuple with the Latency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SleepContributors) GetLatencyOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Latency.Get(), o.Latency.IsSet()
}

// HasLatency returns a boolean if a field has been set.
func (o *SleepContributors) HasLatency() bool {
	if o != nil && o.Latency.IsSet() {
		return true
	}

	return false
}

// SetLatency gets a reference to the given NullableInt32 and assigns it to the Latency field.
func (o *SleepContributors) SetLatency(v int32) {
	o.Latency.Set(&v)
}
// SetLatencyNil sets the value for Latency to be an explicit nil
func (o *SleepContributors) SetLatencyNil() {
	o.Latency.Set(nil)
}

// UnsetLatency ensures that no value is present for Latency, not even an explicit nil
func (o *SleepContributors) UnsetLatency() {
	o.Latency.Unset()
}

// GetRemSleep returns the RemSleep field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SleepContributors) GetRemSleep() int32 {
	if o == nil || IsNil(o.RemSleep.Get()) {
		var ret int32
		return ret
	}
	return *o.RemSleep.Get()
}

// GetRemSleepOk returns a tuple with the RemSleep field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SleepContributors) GetRemSleepOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemSleep.Get(), o.RemSleep.IsSet()
}

// HasRemSleep returns a boolean if a field has been set.
func (o *SleepContributors) HasRemSleep() bool {
	if o != nil && o.RemSleep.IsSet() {
		return true
	}

	return false
}

// SetRemSleep gets a reference to the given NullableInt32 and assigns it to the RemSleep field.
func (o *SleepContributors) SetRemSleep(v int32) {
	o.RemSleep.Set(&v)
}
// SetRemSleepNil sets the value for RemSleep to be an explicit nil
func (o *SleepContributors) SetRemSleepNil() {
	o.RemSleep.Set(nil)
}

// UnsetRemSleep ensures that no value is present for RemSleep, not even an explicit nil
func (o *SleepContributors) UnsetRemSleep() {
	o.RemSleep.Unset()
}

// GetRestfulness returns the Restfulness field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SleepContributors) GetRestfulness() int32 {
	if o == nil || IsNil(o.Restfulness.Get()) {
		var ret int32
		return ret
	}
	return *o.Restfulness.Get()
}

// GetRestfulnessOk returns a tuple with the Restfulness field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SleepContributors) GetRestfulnessOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Restfulness.Get(), o.Restfulness.IsSet()
}

// HasRestfulness returns a boolean if a field has been set.
func (o *SleepContributors) HasRestfulness() bool {
	if o != nil && o.Restfulness.IsSet() {
		return true
	}

	return false
}

// SetRestfulness gets a reference to the given NullableInt32 and assigns it to the Restfulness field.
func (o *SleepContributors) SetRestfulness(v int32) {
	o.Restfulness.Set(&v)
}
// SetRestfulnessNil sets the value for Restfulness to be an explicit nil
func (o *SleepContributors) SetRestfulnessNil() {
	o.Restfulness.Set(nil)
}

// UnsetRestfulness ensures that no value is present for Restfulness, not even an explicit nil
func (o *SleepContributors) UnsetRestfulness() {
	o.Restfulness.Unset()
}

// GetTiming returns the Timing field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SleepContributors) GetTiming() int32 {
	if o == nil || IsNil(o.Timing.Get()) {
		var ret int32
		return ret
	}
	return *o.Timing.Get()
}

// GetTimingOk returns a tuple with the Timing field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SleepContributors) GetTimingOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timing.Get(), o.Timing.IsSet()
}

// HasTiming returns a boolean if a field has been set.
func (o *SleepContributors) HasTiming() bool {
	if o != nil && o.Timing.IsSet() {
		return true
	}

	return false
}

// SetTiming gets a reference to the given NullableInt32 and assigns it to the Timing field.
func (o *SleepContributors) SetTiming(v int32) {
	o.Timing.Set(&v)
}
// SetTimingNil sets the value for Timing to be an explicit nil
func (o *SleepContributors) SetTimingNil() {
	o.Timing.Set(nil)
}

// UnsetTiming ensures that no value is present for Timing, not even an explicit nil
func (o *SleepContributors) UnsetTiming() {
	o.Timing.Unset()
}

// GetTotalSleep returns the TotalSleep field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SleepContributors) GetTotalSleep() int32 {
	if o == nil || IsNil(o.TotalSleep.Get()) {
		var ret int32
		return ret
	}
	return *o.TotalSleep.Get()
}

// GetTotalSleepOk returns a tuple with the TotalSleep field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SleepContributors) GetTotalSleepOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalSleep.Get(), o.TotalSleep.IsSet()
}

// HasTotalSleep returns a boolean if a field has been set.
func (o *SleepContributors) HasTotalSleep() bool {
	if o != nil && o.TotalSleep.IsSet() {
		return true
	}

	return false
}

// SetTotalSleep gets a reference to the given NullableInt32 and assigns it to the TotalSleep field.
func (o *SleepContributors) SetTotalSleep(v int32) {
	o.TotalSleep.Set(&v)
}
// SetTotalSleepNil sets the value for TotalSleep to be an explicit nil
func (o *SleepContributors) SetTotalSleepNil() {
	o.TotalSleep.Set(nil)
}

// UnsetTotalSleep ensures that no value is present for TotalSleep, not even an explicit nil
func (o *SleepContributors) UnsetTotalSleep() {
	o.TotalSleep.Unset()
}

func (o SleepContributors) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SleepContributors) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DeepSleep.IsSet() {
		toSerialize["deep_sleep"] = o.DeepSleep.Get()
	}
	if o.Efficiency.IsSet() {
		toSerialize["efficiency"] = o.Efficiency.Get()
	}
	if o.Latency.IsSet() {
		toSerialize["latency"] = o.Latency.Get()
	}
	if o.RemSleep.IsSet() {
		toSerialize["rem_sleep"] = o.RemSleep.Get()
	}
	if o.Restfulness.IsSet() {
		toSerialize["restfulness"] = o.Restfulness.Get()
	}
	if o.Timing.IsSet() {
		toSerialize["timing"] = o.Timing.Get()
	}
	if o.TotalSleep.IsSet() {
		toSerialize["total_sleep"] = o.TotalSleep.Get()
	}
	return toSerialize, nil
}

type NullableSleepContributors struct {
	value *SleepContributors
	isSet bool
}

func (v NullableSleepContributors) Get() *SleepContributors {
	return v.value
}

func (v *NullableSleepContributors) Set(val *SleepContributors) {
	v.value = val
	v.isSet = true
}

func (v NullableSleepContributors) IsSet() bool {
	return v.isSet
}

func (v *NullableSleepContributors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSleepContributors(val *SleepContributors) *NullableSleepContributors {
	return &NullableSleepContributors{value: val, isSet: true}
}

func (v NullableSleepContributors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSleepContributors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


