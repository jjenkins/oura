/*
Oura API Documentation

# Overview   The Oura API allows Oura users and partner applications to improve their user experience with Oura data.  This document describes the Oura API Version 2 (V2), which supports access to the latest Oura Ring data types.  For access to other data types—which have not yet migrated to V2—refer to the [Oura API Version 1 (V1)](https://cloud.ouraring.com/docs/) documentation.  # Data Access  Individual Oura users can access their own data through the API by using a [Personal Access Token](https://cloud.ouraring.com/personal-access-tokens).  If you want to retrieve data for multiple users, a registered [API Application](https://cloud.ouraring.com/oauth/applications) is required.  API Applications are limited to **10** users before requiring approval from Oura. There is no limit once an application is approved.  Additionally, Oura users **must provide consent** to share each data type an API Application has access to.  All data access requests through the Oura API require [Authentication](https://cloud.ouraring.com/docs/authentication).  Additionally, we recommend that Oura users keep their mobile app updated to support API access for the latest data types.  # Authentication  The Oura API provides two methods for Authentication: (1) the OAuth2 protocol and (2) Personal Access Tokens. For more information on the OAuth2 flow, see our [Authentication instructions](https://cloud.ouraring.com/docs/authentication).  Access tokens must be included in the request header as follows: ```http GET /v2/usercollection/personal_info HTTP/1.1 Host: api.ouraring.com Authorization: Bearer <token> ```  # Oura HTTP Response Codes  | Response Code                        | Description | | ------------------------------------ | - | | 200 OK                               | Successful Response         | | 400 Query Parameter Validation Error | The request contains query parameters that are invalid or incorrectly formatted. | | 429 Request Rate Limit Exceeded        | The API is rate limited to 5000 requests in a 5 minute period. You will receive a 429 error code if you exceed this limit. [Contact us](mailto:api-support@ouraring.com) if you expect your usage to exceed this limit.| 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oura

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SleepTimeWindow type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SleepTimeWindow{}

// SleepTimeWindow Object defining sleep time window
type SleepTimeWindow struct {
	// Timezone offset in second from GMT of the day
	DayTz int32 `json:"day_tz"`
	// End offset from midnight in second
	EndOffset int32 `json:"end_offset"`
	// Start offset from midnight in second
	StartOffset int32 `json:"start_offset"`
}

type _SleepTimeWindow SleepTimeWindow

// NewSleepTimeWindow instantiates a new SleepTimeWindow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSleepTimeWindow(dayTz int32, endOffset int32, startOffset int32) *SleepTimeWindow {
	this := SleepTimeWindow{}
	this.DayTz = dayTz
	this.EndOffset = endOffset
	this.StartOffset = startOffset
	return &this
}

// NewSleepTimeWindowWithDefaults instantiates a new SleepTimeWindow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSleepTimeWindowWithDefaults() *SleepTimeWindow {
	this := SleepTimeWindow{}
	return &this
}

// GetDayTz returns the DayTz field value
func (o *SleepTimeWindow) GetDayTz() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DayTz
}

// GetDayTzOk returns a tuple with the DayTz field value
// and a boolean to check if the value has been set.
func (o *SleepTimeWindow) GetDayTzOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DayTz, true
}

// SetDayTz sets field value
func (o *SleepTimeWindow) SetDayTz(v int32) {
	o.DayTz = v
}

// GetEndOffset returns the EndOffset field value
func (o *SleepTimeWindow) GetEndOffset() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EndOffset
}

// GetEndOffsetOk returns a tuple with the EndOffset field value
// and a boolean to check if the value has been set.
func (o *SleepTimeWindow) GetEndOffsetOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndOffset, true
}

// SetEndOffset sets field value
func (o *SleepTimeWindow) SetEndOffset(v int32) {
	o.EndOffset = v
}

// GetStartOffset returns the StartOffset field value
func (o *SleepTimeWindow) GetStartOffset() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StartOffset
}

// GetStartOffsetOk returns a tuple with the StartOffset field value
// and a boolean to check if the value has been set.
func (o *SleepTimeWindow) GetStartOffsetOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartOffset, true
}

// SetStartOffset sets field value
func (o *SleepTimeWindow) SetStartOffset(v int32) {
	o.StartOffset = v
}

func (o SleepTimeWindow) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SleepTimeWindow) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["day_tz"] = o.DayTz
	toSerialize["end_offset"] = o.EndOffset
	toSerialize["start_offset"] = o.StartOffset
	return toSerialize, nil
}

func (o *SleepTimeWindow) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"day_tz",
		"end_offset",
		"start_offset",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSleepTimeWindow := _SleepTimeWindow{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSleepTimeWindow)

	if err != nil {
		return err
	}

	*o = SleepTimeWindow(varSleepTimeWindow)

	return err
}

type NullableSleepTimeWindow struct {
	value *SleepTimeWindow
	isSet bool
}

func (v NullableSleepTimeWindow) Get() *SleepTimeWindow {
	return v.value
}

func (v *NullableSleepTimeWindow) Set(val *SleepTimeWindow) {
	v.value = val
	v.isSet = true
}

func (v NullableSleepTimeWindow) IsSet() bool {
	return v.isSet
}

func (v *NullableSleepTimeWindow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSleepTimeWindow(val *SleepTimeWindow) *NullableSleepTimeWindow {
	return &NullableSleepTimeWindow{value: val, isSet: true}
}

func (v NullableSleepTimeWindow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSleepTimeWindow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


