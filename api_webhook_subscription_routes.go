/*
Oura API Documentation

# Overview   The Oura API allows Oura users and partner applications to improve their user experience with Oura data.  This document describes the Oura API Version 2 (V2), which supports access to the latest Oura Ring data types.  For access to other data types—which have not yet migrated to V2—refer to the [Oura API Version 1 (V1)](https://cloud.ouraring.com/docs/) documentation.  # Data Access  Individual Oura users can access their own data through the API by using a [Personal Access Token](https://cloud.ouraring.com/personal-access-tokens).  If you want to retrieve data for multiple users, a registered [API Application](https://cloud.ouraring.com/oauth/applications) is required.  API Applications are limited to **10** users before requiring approval from Oura. There is no limit once an application is approved.  Additionally, Oura users **must provide consent** to share each data type an API Application has access to.  All data access requests through the Oura API require [Authentication](https://cloud.ouraring.com/docs/authentication).  Additionally, we recommend that Oura users keep their mobile app updated to support API access for the latest data types.  # Authentication  The Oura API provides two methods for Authentication: (1) the OAuth2 protocol and (2) Personal Access Tokens. For more information on the OAuth2 flow, see our [Authentication instructions](https://cloud.ouraring.com/docs/authentication).  Access tokens must be included in the request header as follows: ```http GET /v2/usercollection/personal_info HTTP/1.1 Host: api.ouraring.com Authorization: Bearer <token> ```  # Oura HTTP Response Codes  | Response Code                        | Description | | ------------------------------------ | - | | 200 OK                               | Successful Response         | | 400 Query Parameter Validation Error | The request contains query parameters that are invalid or incorrectly formatted. | | 429 Request Rate Limit Exceeded        | The API is rate limited to 5000 requests in a 5 minute period. You will receive a 429 error code if you exceed this limit. [Contact us](mailto:api-support@ouraring.com) if you expect your usage to exceed this limit.| 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oura

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// WebhookSubscriptionRoutesAPIService WebhookSubscriptionRoutesAPI service
type WebhookSubscriptionRoutesAPIService service

type ApiCreateWebhookSubscriptionV2WebhookSubscriptionPostRequest struct {
	ctx context.Context
	ApiService *WebhookSubscriptionRoutesAPIService
	createWebhookSubscriptionRequest *CreateWebhookSubscriptionRequest
}

func (r ApiCreateWebhookSubscriptionV2WebhookSubscriptionPostRequest) CreateWebhookSubscriptionRequest(createWebhookSubscriptionRequest CreateWebhookSubscriptionRequest) ApiCreateWebhookSubscriptionV2WebhookSubscriptionPostRequest {
	r.createWebhookSubscriptionRequest = &createWebhookSubscriptionRequest
	return r
}

func (r ApiCreateWebhookSubscriptionV2WebhookSubscriptionPostRequest) Execute() (*WebhookSubscriptionModel, *http.Response, error) {
	return r.ApiService.CreateWebhookSubscriptionV2WebhookSubscriptionPostExecute(r)
}

/*
CreateWebhookSubscriptionV2WebhookSubscriptionPost Create Webhook Subscription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateWebhookSubscriptionV2WebhookSubscriptionPostRequest
*/
func (a *WebhookSubscriptionRoutesAPIService) CreateWebhookSubscriptionV2WebhookSubscriptionPost(ctx context.Context) ApiCreateWebhookSubscriptionV2WebhookSubscriptionPostRequest {
	return ApiCreateWebhookSubscriptionV2WebhookSubscriptionPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WebhookSubscriptionModel
func (a *WebhookSubscriptionRoutesAPIService) CreateWebhookSubscriptionV2WebhookSubscriptionPostExecute(r ApiCreateWebhookSubscriptionV2WebhookSubscriptionPostRequest) (*WebhookSubscriptionModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WebhookSubscriptionModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WebhookSubscriptionRoutesAPIService.CreateWebhookSubscriptionV2WebhookSubscriptionPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/webhook/subscription"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createWebhookSubscriptionRequest == nil {
		return localVarReturnValue, nil, reportError("createWebhookSubscriptionRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createWebhookSubscriptionRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteWebhookSubscriptionV2WebhookSubscriptionIdDeleteRequest struct {
	ctx context.Context
	ApiService *WebhookSubscriptionRoutesAPIService
	id string
}

func (r ApiDeleteWebhookSubscriptionV2WebhookSubscriptionIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteWebhookSubscriptionV2WebhookSubscriptionIdDeleteExecute(r)
}

/*
DeleteWebhookSubscriptionV2WebhookSubscriptionIdDelete Delete Webhook Subscription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiDeleteWebhookSubscriptionV2WebhookSubscriptionIdDeleteRequest
*/
func (a *WebhookSubscriptionRoutesAPIService) DeleteWebhookSubscriptionV2WebhookSubscriptionIdDelete(ctx context.Context, id string) ApiDeleteWebhookSubscriptionV2WebhookSubscriptionIdDeleteRequest {
	return ApiDeleteWebhookSubscriptionV2WebhookSubscriptionIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *WebhookSubscriptionRoutesAPIService) DeleteWebhookSubscriptionV2WebhookSubscriptionIdDeleteExecute(r ApiDeleteWebhookSubscriptionV2WebhookSubscriptionIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WebhookSubscriptionRoutesAPIService.DeleteWebhookSubscriptionV2WebhookSubscriptionIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/webhook/subscription/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetWebhookSubscriptionV2WebhookSubscriptionIdGetRequest struct {
	ctx context.Context
	ApiService *WebhookSubscriptionRoutesAPIService
	id string
}

func (r ApiGetWebhookSubscriptionV2WebhookSubscriptionIdGetRequest) Execute() (*WebhookSubscriptionModel, *http.Response, error) {
	return r.ApiService.GetWebhookSubscriptionV2WebhookSubscriptionIdGetExecute(r)
}

/*
GetWebhookSubscriptionV2WebhookSubscriptionIdGet Get Webhook Subscription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiGetWebhookSubscriptionV2WebhookSubscriptionIdGetRequest
*/
func (a *WebhookSubscriptionRoutesAPIService) GetWebhookSubscriptionV2WebhookSubscriptionIdGet(ctx context.Context, id string) ApiGetWebhookSubscriptionV2WebhookSubscriptionIdGetRequest {
	return ApiGetWebhookSubscriptionV2WebhookSubscriptionIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return WebhookSubscriptionModel
func (a *WebhookSubscriptionRoutesAPIService) GetWebhookSubscriptionV2WebhookSubscriptionIdGetExecute(r ApiGetWebhookSubscriptionV2WebhookSubscriptionIdGetRequest) (*WebhookSubscriptionModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WebhookSubscriptionModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WebhookSubscriptionRoutesAPIService.GetWebhookSubscriptionV2WebhookSubscriptionIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/webhook/subscription/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListWebhookSubscriptionsV2WebhookSubscriptionGetRequest struct {
	ctx context.Context
	ApiService *WebhookSubscriptionRoutesAPIService
}

func (r ApiListWebhookSubscriptionsV2WebhookSubscriptionGetRequest) Execute() ([]WebhookSubscriptionModel, *http.Response, error) {
	return r.ApiService.ListWebhookSubscriptionsV2WebhookSubscriptionGetExecute(r)
}

/*
ListWebhookSubscriptionsV2WebhookSubscriptionGet List Webhook Subscriptions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListWebhookSubscriptionsV2WebhookSubscriptionGetRequest
*/
func (a *WebhookSubscriptionRoutesAPIService) ListWebhookSubscriptionsV2WebhookSubscriptionGet(ctx context.Context) ApiListWebhookSubscriptionsV2WebhookSubscriptionGetRequest {
	return ApiListWebhookSubscriptionsV2WebhookSubscriptionGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []WebhookSubscriptionModel
func (a *WebhookSubscriptionRoutesAPIService) ListWebhookSubscriptionsV2WebhookSubscriptionGetExecute(r ApiListWebhookSubscriptionsV2WebhookSubscriptionGetRequest) ([]WebhookSubscriptionModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WebhookSubscriptionModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WebhookSubscriptionRoutesAPIService.ListWebhookSubscriptionsV2WebhookSubscriptionGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/webhook/subscription"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRenewWebhookSubscriptionV2WebhookSubscriptionRenewIdPutRequest struct {
	ctx context.Context
	ApiService *WebhookSubscriptionRoutesAPIService
	id string
}

func (r ApiRenewWebhookSubscriptionV2WebhookSubscriptionRenewIdPutRequest) Execute() (*WebhookSubscriptionModel, *http.Response, error) {
	return r.ApiService.RenewWebhookSubscriptionV2WebhookSubscriptionRenewIdPutExecute(r)
}

/*
RenewWebhookSubscriptionV2WebhookSubscriptionRenewIdPut Renew Webhook Subscription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiRenewWebhookSubscriptionV2WebhookSubscriptionRenewIdPutRequest
*/
func (a *WebhookSubscriptionRoutesAPIService) RenewWebhookSubscriptionV2WebhookSubscriptionRenewIdPut(ctx context.Context, id string) ApiRenewWebhookSubscriptionV2WebhookSubscriptionRenewIdPutRequest {
	return ApiRenewWebhookSubscriptionV2WebhookSubscriptionRenewIdPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return WebhookSubscriptionModel
func (a *WebhookSubscriptionRoutesAPIService) RenewWebhookSubscriptionV2WebhookSubscriptionRenewIdPutExecute(r ApiRenewWebhookSubscriptionV2WebhookSubscriptionRenewIdPutRequest) (*WebhookSubscriptionModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WebhookSubscriptionModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WebhookSubscriptionRoutesAPIService.RenewWebhookSubscriptionV2WebhookSubscriptionRenewIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/webhook/subscription/renew/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateWebhookSubscriptionV2WebhookSubscriptionIdPutRequest struct {
	ctx context.Context
	ApiService *WebhookSubscriptionRoutesAPIService
	id string
	updateWebhookSubscriptionRequest *UpdateWebhookSubscriptionRequest
}

func (r ApiUpdateWebhookSubscriptionV2WebhookSubscriptionIdPutRequest) UpdateWebhookSubscriptionRequest(updateWebhookSubscriptionRequest UpdateWebhookSubscriptionRequest) ApiUpdateWebhookSubscriptionV2WebhookSubscriptionIdPutRequest {
	r.updateWebhookSubscriptionRequest = &updateWebhookSubscriptionRequest
	return r
}

func (r ApiUpdateWebhookSubscriptionV2WebhookSubscriptionIdPutRequest) Execute() (*WebhookSubscriptionModel, *http.Response, error) {
	return r.ApiService.UpdateWebhookSubscriptionV2WebhookSubscriptionIdPutExecute(r)
}

/*
UpdateWebhookSubscriptionV2WebhookSubscriptionIdPut Update Webhook Subscription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiUpdateWebhookSubscriptionV2WebhookSubscriptionIdPutRequest
*/
func (a *WebhookSubscriptionRoutesAPIService) UpdateWebhookSubscriptionV2WebhookSubscriptionIdPut(ctx context.Context, id string) ApiUpdateWebhookSubscriptionV2WebhookSubscriptionIdPutRequest {
	return ApiUpdateWebhookSubscriptionV2WebhookSubscriptionIdPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return WebhookSubscriptionModel
func (a *WebhookSubscriptionRoutesAPIService) UpdateWebhookSubscriptionV2WebhookSubscriptionIdPutExecute(r ApiUpdateWebhookSubscriptionV2WebhookSubscriptionIdPutRequest) (*WebhookSubscriptionModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WebhookSubscriptionModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WebhookSubscriptionRoutesAPIService.UpdateWebhookSubscriptionV2WebhookSubscriptionIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/webhook/subscription/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateWebhookSubscriptionRequest == nil {
		return localVarReturnValue, nil, reportError("updateWebhookSubscriptionRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateWebhookSubscriptionRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
