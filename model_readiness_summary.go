/*
Oura API Documentation

# Overview   The Oura API allows Oura users and partner applications to improve their user experience with Oura data.  This document describes the Oura API Version 2 (V2), which supports access to the latest Oura Ring data types.  For access to other data types—which have not yet migrated to V2—refer to the [Oura API Version 1 (V1)](https://cloud.ouraring.com/docs/) documentation.  # Data Access  Individual Oura users can access their own data through the API by using a [Personal Access Token](https://cloud.ouraring.com/personal-access-tokens).  If you want to retrieve data for multiple users, a registered [API Application](https://cloud.ouraring.com/oauth/applications) is required.  API Applications are limited to **10** users before requiring approval from Oura. There is no limit once an application is approved.  Additionally, Oura users **must provide consent** to share each data type an API Application has access to.  All data access requests through the Oura API require [Authentication](https://cloud.ouraring.com/docs/authentication).  Additionally, we recommend that Oura users keep their mobile app updated to support API access for the latest data types.  # Authentication  The Oura API provides two methods for Authentication: (1) the OAuth2 protocol and (2) Personal Access Tokens. For more information on the OAuth2 flow, see our [Authentication instructions](https://cloud.ouraring.com/docs/authentication).  Access tokens must be included in the request header as follows: ```http GET /v2/usercollection/personal_info HTTP/1.1 Host: api.ouraring.com Authorization: Bearer <token> ```  # Oura HTTP Response Codes  | Response Code                        | Description | | ------------------------------------ | - | | 200 OK                               | Successful Response         | | 400 Query Parameter Validation Error | The request contains query parameters that are invalid or incorrectly formatted. | | 429 Request Rate Limit Exceeded        | The API is rate limited to 5000 requests in a 5 minute period. You will receive a 429 error code if you exceed this limit. [Contact us](mailto:api-support@ouraring.com) if you expect your usage to exceed this limit.| 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oura

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReadinessSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReadinessSummary{}

// ReadinessSummary struct for ReadinessSummary
type ReadinessSummary struct {
	Contributors ReadinessContributors `json:"contributors"`
	Score NullableInt32 `json:"score,omitempty"`
	TemperatureDeviation NullableFloat32 `json:"temperature_deviation,omitempty"`
	TemperatureTrendDeviation NullableFloat32 `json:"temperature_trend_deviation,omitempty"`
}

type _ReadinessSummary ReadinessSummary

// NewReadinessSummary instantiates a new ReadinessSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReadinessSummary(contributors ReadinessContributors) *ReadinessSummary {
	this := ReadinessSummary{}
	this.Contributors = contributors
	return &this
}

// NewReadinessSummaryWithDefaults instantiates a new ReadinessSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReadinessSummaryWithDefaults() *ReadinessSummary {
	this := ReadinessSummary{}
	return &this
}

// GetContributors returns the Contributors field value
func (o *ReadinessSummary) GetContributors() ReadinessContributors {
	if o == nil {
		var ret ReadinessContributors
		return ret
	}

	return o.Contributors
}

// GetContributorsOk returns a tuple with the Contributors field value
// and a boolean to check if the value has been set.
func (o *ReadinessSummary) GetContributorsOk() (*ReadinessContributors, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Contributors, true
}

// SetContributors sets field value
func (o *ReadinessSummary) SetContributors(v ReadinessContributors) {
	o.Contributors = v
}

// GetScore returns the Score field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReadinessSummary) GetScore() int32 {
	if o == nil || IsNil(o.Score.Get()) {
		var ret int32
		return ret
	}
	return *o.Score.Get()
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReadinessSummary) GetScoreOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Score.Get(), o.Score.IsSet()
}

// HasScore returns a boolean if a field has been set.
func (o *ReadinessSummary) HasScore() bool {
	if o != nil && o.Score.IsSet() {
		return true
	}

	return false
}

// SetScore gets a reference to the given NullableInt32 and assigns it to the Score field.
func (o *ReadinessSummary) SetScore(v int32) {
	o.Score.Set(&v)
}
// SetScoreNil sets the value for Score to be an explicit nil
func (o *ReadinessSummary) SetScoreNil() {
	o.Score.Set(nil)
}

// UnsetScore ensures that no value is present for Score, not even an explicit nil
func (o *ReadinessSummary) UnsetScore() {
	o.Score.Unset()
}

// GetTemperatureDeviation returns the TemperatureDeviation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReadinessSummary) GetTemperatureDeviation() float32 {
	if o == nil || IsNil(o.TemperatureDeviation.Get()) {
		var ret float32
		return ret
	}
	return *o.TemperatureDeviation.Get()
}

// GetTemperatureDeviationOk returns a tuple with the TemperatureDeviation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReadinessSummary) GetTemperatureDeviationOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TemperatureDeviation.Get(), o.TemperatureDeviation.IsSet()
}

// HasTemperatureDeviation returns a boolean if a field has been set.
func (o *ReadinessSummary) HasTemperatureDeviation() bool {
	if o != nil && o.TemperatureDeviation.IsSet() {
		return true
	}

	return false
}

// SetTemperatureDeviation gets a reference to the given NullableFloat32 and assigns it to the TemperatureDeviation field.
func (o *ReadinessSummary) SetTemperatureDeviation(v float32) {
	o.TemperatureDeviation.Set(&v)
}
// SetTemperatureDeviationNil sets the value for TemperatureDeviation to be an explicit nil
func (o *ReadinessSummary) SetTemperatureDeviationNil() {
	o.TemperatureDeviation.Set(nil)
}

// UnsetTemperatureDeviation ensures that no value is present for TemperatureDeviation, not even an explicit nil
func (o *ReadinessSummary) UnsetTemperatureDeviation() {
	o.TemperatureDeviation.Unset()
}

// GetTemperatureTrendDeviation returns the TemperatureTrendDeviation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReadinessSummary) GetTemperatureTrendDeviation() float32 {
	if o == nil || IsNil(o.TemperatureTrendDeviation.Get()) {
		var ret float32
		return ret
	}
	return *o.TemperatureTrendDeviation.Get()
}

// GetTemperatureTrendDeviationOk returns a tuple with the TemperatureTrendDeviation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReadinessSummary) GetTemperatureTrendDeviationOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TemperatureTrendDeviation.Get(), o.TemperatureTrendDeviation.IsSet()
}

// HasTemperatureTrendDeviation returns a boolean if a field has been set.
func (o *ReadinessSummary) HasTemperatureTrendDeviation() bool {
	if o != nil && o.TemperatureTrendDeviation.IsSet() {
		return true
	}

	return false
}

// SetTemperatureTrendDeviation gets a reference to the given NullableFloat32 and assigns it to the TemperatureTrendDeviation field.
func (o *ReadinessSummary) SetTemperatureTrendDeviation(v float32) {
	o.TemperatureTrendDeviation.Set(&v)
}
// SetTemperatureTrendDeviationNil sets the value for TemperatureTrendDeviation to be an explicit nil
func (o *ReadinessSummary) SetTemperatureTrendDeviationNil() {
	o.TemperatureTrendDeviation.Set(nil)
}

// UnsetTemperatureTrendDeviation ensures that no value is present for TemperatureTrendDeviation, not even an explicit nil
func (o *ReadinessSummary) UnsetTemperatureTrendDeviation() {
	o.TemperatureTrendDeviation.Unset()
}

func (o ReadinessSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReadinessSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["contributors"] = o.Contributors
	if o.Score.IsSet() {
		toSerialize["score"] = o.Score.Get()
	}
	if o.TemperatureDeviation.IsSet() {
		toSerialize["temperature_deviation"] = o.TemperatureDeviation.Get()
	}
	if o.TemperatureTrendDeviation.IsSet() {
		toSerialize["temperature_trend_deviation"] = o.TemperatureTrendDeviation.Get()
	}
	return toSerialize, nil
}

func (o *ReadinessSummary) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"contributors",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReadinessSummary := _ReadinessSummary{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReadinessSummary)

	if err != nil {
		return err
	}

	*o = ReadinessSummary(varReadinessSummary)

	return err
}

type NullableReadinessSummary struct {
	value *ReadinessSummary
	isSet bool
}

func (v NullableReadinessSummary) Get() *ReadinessSummary {
	return v.value
}

func (v *NullableReadinessSummary) Set(val *ReadinessSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableReadinessSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableReadinessSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReadinessSummary(val *ReadinessSummary) *NullableReadinessSummary {
	return &NullableReadinessSummary{value: val, isSet: true}
}

func (v NullableReadinessSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReadinessSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


