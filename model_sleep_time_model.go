/*
Oura API Documentation

# Overview   The Oura API allows Oura users and partner applications to improve their user experience with Oura data.  This document describes the Oura API Version 2 (V2), which supports access to the latest Oura Ring data types.  For access to other data types—which have not yet migrated to V2—refer to the [Oura API Version 1 (V1)](https://cloud.ouraring.com/docs/) documentation.  # Data Access  Individual Oura users can access their own data through the API by using a [Personal Access Token](https://cloud.ouraring.com/personal-access-tokens).  If you want to retrieve data for multiple users, a registered [API Application](https://cloud.ouraring.com/oauth/applications) is required.  API Applications are limited to **10** users before requiring approval from Oura. There is no limit once an application is approved.  Additionally, Oura users **must provide consent** to share each data type an API Application has access to.  All data access requests through the Oura API require [Authentication](https://cloud.ouraring.com/docs/authentication).  Additionally, we recommend that Oura users keep their mobile app updated to support API access for the latest data types.  # Authentication  The Oura API provides two methods for Authentication: (1) the OAuth2 protocol and (2) Personal Access Tokens. For more information on the OAuth2 flow, see our [Authentication instructions](https://cloud.ouraring.com/docs/authentication).  Access tokens must be included in the request header as follows: ```http GET /v2/usercollection/personal_info HTTP/1.1 Host: api.ouraring.com Authorization: Bearer <token> ```  # Oura HTTP Response Codes  | Response Code                        | Description | | ------------------------------------ | - | | 200 OK                               | Successful Response         | | 400 Query Parameter Validation Error | The request contains query parameters that are invalid or incorrectly formatted. | | 429 Request Rate Limit Exceeded        | The API is rate limited to 5000 requests in a 5 minute period. You will receive a 429 error code if you exceed this limit. [Contact us](mailto:api-support@ouraring.com) if you expect your usage to exceed this limit.| 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oura

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SleepTimeModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SleepTimeModel{}

// SleepTimeModel Object contains suggested bedtime for the user.
type SleepTimeModel struct {
	Id string `json:"id"`
	// Corresponding day for the sleep time.
	Day string `json:"day"`
	OptimalBedtime NullableSleepTimeWindow `json:"optimal_bedtime,omitempty"`
	Recommendation NullableSleepTimeRecommendation `json:"recommendation,omitempty"`
	Status NullableSleepTimeStatus `json:"status,omitempty"`
}

type _SleepTimeModel SleepTimeModel

// NewSleepTimeModel instantiates a new SleepTimeModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSleepTimeModel(id string, day string) *SleepTimeModel {
	this := SleepTimeModel{}
	this.Id = id
	this.Day = day
	return &this
}

// NewSleepTimeModelWithDefaults instantiates a new SleepTimeModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSleepTimeModelWithDefaults() *SleepTimeModel {
	this := SleepTimeModel{}
	return &this
}

// GetId returns the Id field value
func (o *SleepTimeModel) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SleepTimeModel) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SleepTimeModel) SetId(v string) {
	o.Id = v
}

// GetDay returns the Day field value
func (o *SleepTimeModel) GetDay() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Day
}

// GetDayOk returns a tuple with the Day field value
// and a boolean to check if the value has been set.
func (o *SleepTimeModel) GetDayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Day, true
}

// SetDay sets field value
func (o *SleepTimeModel) SetDay(v string) {
	o.Day = v
}

// GetOptimalBedtime returns the OptimalBedtime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SleepTimeModel) GetOptimalBedtime() SleepTimeWindow {
	if o == nil || IsNil(o.OptimalBedtime.Get()) {
		var ret SleepTimeWindow
		return ret
	}
	return *o.OptimalBedtime.Get()
}

// GetOptimalBedtimeOk returns a tuple with the OptimalBedtime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SleepTimeModel) GetOptimalBedtimeOk() (*SleepTimeWindow, bool) {
	if o == nil {
		return nil, false
	}
	return o.OptimalBedtime.Get(), o.OptimalBedtime.IsSet()
}

// HasOptimalBedtime returns a boolean if a field has been set.
func (o *SleepTimeModel) HasOptimalBedtime() bool {
	if o != nil && o.OptimalBedtime.IsSet() {
		return true
	}

	return false
}

// SetOptimalBedtime gets a reference to the given NullableSleepTimeWindow and assigns it to the OptimalBedtime field.
func (o *SleepTimeModel) SetOptimalBedtime(v SleepTimeWindow) {
	o.OptimalBedtime.Set(&v)
}
// SetOptimalBedtimeNil sets the value for OptimalBedtime to be an explicit nil
func (o *SleepTimeModel) SetOptimalBedtimeNil() {
	o.OptimalBedtime.Set(nil)
}

// UnsetOptimalBedtime ensures that no value is present for OptimalBedtime, not even an explicit nil
func (o *SleepTimeModel) UnsetOptimalBedtime() {
	o.OptimalBedtime.Unset()
}

// GetRecommendation returns the Recommendation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SleepTimeModel) GetRecommendation() SleepTimeRecommendation {
	if o == nil || IsNil(o.Recommendation.Get()) {
		var ret SleepTimeRecommendation
		return ret
	}
	return *o.Recommendation.Get()
}

// GetRecommendationOk returns a tuple with the Recommendation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SleepTimeModel) GetRecommendationOk() (*SleepTimeRecommendation, bool) {
	if o == nil {
		return nil, false
	}
	return o.Recommendation.Get(), o.Recommendation.IsSet()
}

// HasRecommendation returns a boolean if a field has been set.
func (o *SleepTimeModel) HasRecommendation() bool {
	if o != nil && o.Recommendation.IsSet() {
		return true
	}

	return false
}

// SetRecommendation gets a reference to the given NullableSleepTimeRecommendation and assigns it to the Recommendation field.
func (o *SleepTimeModel) SetRecommendation(v SleepTimeRecommendation) {
	o.Recommendation.Set(&v)
}
// SetRecommendationNil sets the value for Recommendation to be an explicit nil
func (o *SleepTimeModel) SetRecommendationNil() {
	o.Recommendation.Set(nil)
}

// UnsetRecommendation ensures that no value is present for Recommendation, not even an explicit nil
func (o *SleepTimeModel) UnsetRecommendation() {
	o.Recommendation.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SleepTimeModel) GetStatus() SleepTimeStatus {
	if o == nil || IsNil(o.Status.Get()) {
		var ret SleepTimeStatus
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SleepTimeModel) GetStatusOk() (*SleepTimeStatus, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *SleepTimeModel) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableSleepTimeStatus and assigns it to the Status field.
func (o *SleepTimeModel) SetStatus(v SleepTimeStatus) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *SleepTimeModel) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *SleepTimeModel) UnsetStatus() {
	o.Status.Unset()
}

func (o SleepTimeModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SleepTimeModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["day"] = o.Day
	if o.OptimalBedtime.IsSet() {
		toSerialize["optimal_bedtime"] = o.OptimalBedtime.Get()
	}
	if o.Recommendation.IsSet() {
		toSerialize["recommendation"] = o.Recommendation.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	return toSerialize, nil
}

func (o *SleepTimeModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"day",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSleepTimeModel := _SleepTimeModel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSleepTimeModel)

	if err != nil {
		return err
	}

	*o = SleepTimeModel(varSleepTimeModel)

	return err
}

type NullableSleepTimeModel struct {
	value *SleepTimeModel
	isSet bool
}

func (v NullableSleepTimeModel) Get() *SleepTimeModel {
	return v.value
}

func (v *NullableSleepTimeModel) Set(val *SleepTimeModel) {
	v.value = val
	v.isSet = true
}

func (v NullableSleepTimeModel) IsSet() bool {
	return v.isSet
}

func (v *NullableSleepTimeModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSleepTimeModel(val *SleepTimeModel) *NullableSleepTimeModel {
	return &NullableSleepTimeModel{value: val, isSet: true}
}

func (v NullableSleepTimeModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSleepTimeModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


