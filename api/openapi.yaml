openapi: 3.1.0
info:
  description: "# Overview \n\nThe Oura API allows Oura users and partner applications\
    \ to improve their user experience with Oura data.\n\nThis document describes\
    \ the Oura API Version 2 (V2), which supports access to the latest Oura Ring data\
    \ types.\n For access to other data types—which have not yet migrated to V2—refer\
    \ to the [Oura API Version 1 (V1)](https://cloud.ouraring.com/docs/) documentation.\n\
    \n# Data Access\n\nIndividual Oura users can access their own data through the\
    \ API by using a [Personal Access Token](https://cloud.ouraring.com/personal-access-tokens).\n\
    \nIf you want to retrieve data for multiple users, a registered [API Application](https://cloud.ouraring.com/oauth/applications)\
    \ is required.\n API Applications are limited to **10** users before requiring\
    \ approval from Oura. There is no limit once an application is approved.\n Additionally,\
    \ Oura users **must provide consent** to share each data type an API Application\
    \ has access to.\n\nAll data access requests through the Oura API require [Authentication](https://cloud.ouraring.com/docs/authentication).\n\
    \nAdditionally, we recommend that Oura users keep their mobile app updated to\
    \ support API access for the latest data types.\n\n# Authentication\n\nThe Oura\
    \ API provides two methods for Authentication: (1) the OAuth2 protocol and (2)\
    \ Personal Access Tokens. For more information on the OAuth2 flow, see our [Authentication\
    \ instructions](https://cloud.ouraring.com/docs/authentication).\n\nAccess tokens\
    \ must be included in the request header as follows:\n```http\nGET /v2/usercollection/personal_info\
    \ HTTP/1.1\nHost: api.ouraring.com\nAuthorization: Bearer <token>\n```\n\n# Oura\
    \ HTTP Response Codes\n\n| Response Code                        | Description\
    \ |\n| ------------------------------------ | - |\n| 200 OK                  \
    \             | Successful Response         |\n| 400 Query Parameter Validation\
    \ Error | The request contains query parameters that are invalid or incorrectly\
    \ formatted. |\n| 429 Request Rate Limit Exceeded        | The API is rate limited\
    \ to 5000 requests in a 5 minute period. You will receive a 429 error code if\
    \ you exceed this limit. [Contact us](mailto:api-support@ouraring.com) if you\
    \ expect your usage to exceed this limit.| "
  termsOfService: https://cloud.ouraring.com/legal/api-agreement
  title: Oura API Documentation
  version: "2.0"
  x-logo:
    url: img/Oura_Logo-Developer_RBG_Black.svg
servers:
- description: Oura API
  url: https://api.None
tags:
- description: "The Daily Activity scope includes daily activity summary values and\
    \ detailed activity levels. Activity levels are expressed in [metabolic equivalent\
    \ of task minutes](https://en.wikipedia.org/wiki/Metabolic_equivalent) (MET mins).\
    \ Oura tracks activity based on the movement."
  name: Daily Activity Routes
- description: "Cardiovascular Age is an estimate of the health of your cardiovascular\
    \ system in relation to your actual age. See more details [here](https://support.ouraring.com/hc/en-us/articles/28451491040019-Cardiovascular-Age)."
  name: Daily Cardiovascular Age Routes
- description: Readiness tells how ready you are for the day.
  name: Daily Readiness Routes
- description: Resilience is an estimate of your ability to withstand physiological
    stress and recover from it over time.
  externalDocs:
    description: Learn more about Resilience
    url: https://support.ouraring.com/hc/en-us/articles/25358829055251-Resilience
  name: Daily Resilience Routes
- description: "Sleep period is a nearly continuous, longish period of time spent\
    \ lying down in bed."
  name: Daily Sleep Routes
- description: The Daily SpO2 (blood oxygenation) routes include daily SpO2 average.
    Data will only be available for users with a Gen 3 Oura Ring
  externalDocs:
    description: Blood Oxygen Sensing (SpO2) on Oura
    url: https://ouraring.com/blog/blood-oxygen-sensing-spo2/?g_acctid=553-919-5922&g_adgroupid=&g_adid=&g_adtype=none&g_campaign=pmax_prospecting-retargeting_integrated_allgeos_purchase_english&g_campaignid=17714554930&g_keyword=&g_keywordid=&g_network=x&utm_campaign=pmax_prospecting-retargeting_integrated_allgeos_purchase_english&utm_content=sleeplab_prospecting_allgeos_en_static_video&utm_medium=cpc&utm_source=google&utm_source=google_pmax&gclid=CjwKCAjwloynBhBbEiwAGY25dC2B6syXyPhIQ1Bo8IufRQrBWtooTEFkclzEWdUCHNZIoq5SzurHaRoCsukQAvD_BwE
  name: Daily Spo2 Routes
- description: The daily stress route includes a summary of the number of minutes
    the user spends in high stress and high recovery each day. This is a great way
    to see how your stress and recovery are trending over time. Stress and recovery
    are mutally exclusive. E.g. one can only be stressed or recovered at any given
    moement - and cannot be stressed and recovered at the same time.
  externalDocs:
    description: Learn more about daytime stress
    url: https://ouraring.com/blog/daytime-stress-feature
  name: Daily Stress Routes
- description: |-
    The Enhanced Tags data scope includes tags that Oura users enter within the Oura mobile app. Enhanced Tags can be added for any lifestyle choice, habit, mood change, or environmental factor an Oura user wants to monitor the effects of. Enhanced Tags also contain context on a tag's start and end time, whether a tag repeats daily, and comments.

    [Learn more about how Oura users add Enhanced Tags](https://support.ouraring.com/hc/en-us/articles/360038676993-How-to-Use-Tags)
  externalDocs:
    description: More information about Enhanced Tags
    url: https://ouraring.com/blog/tags/
  name: Enhanced Tag Routes
- description: "The Heart Rate data scope includes time-series heart rate data throughout\
    \ the day and night. Heart rate is provided at 5-minute increments. For heart\
    \ rate data recorded from a Session, see Sessions endpoint."
  externalDocs:
    description: How accurate is the heart rate data generated by the Oura Ring?
    url: https://ouraring.com/blog/how-accurate-is-oura/
  name: Heart Rate Routes
- description: "The Personal Info scope includes personal information (e.g. age, email,\
    \ weight, and height) about the user. You can access the id on the personal_info\
    \ route with any access token (no scopes are required)."
  name: Personal Info Routes
- description: "The Rest Mode scope includes information about rest mode periods.\
    \ This includes the start, end time and detaials of the rest mode period."
  name: Rest Mode Period Routes
- description: "The Ring Configuration scope includes information about the user's\
    \ ring(s). This includes the model, size, color, etc."
  name: Ring Configuration Routes
- description: "The Sessions data scope provides information on how users engage with\
    \ guided and unguided sessions in the Oura app, including the user's biometric\
    \ trends during the sessions."
  externalDocs:
    description: Learn about the available session types within the Explore Tab
    url: https://ouraring.com/blog/oura-explore-tab/
  name: Session Routes
- description: Returns Oura Sleep data for the specified Oura user within a given
    timeframe. A user can have multiple sleep periods per day.
  name: Sleep Routes
- description: Recommendations for the optimal bedtime window that is calculated based
    on sleep data.
  name: Sleep Time Routes
- description: |-
    <span className='text-important'>**Note:** Tag is deprecated. We recommend transitioning to [Enhanced Tag](#tag/Enhanced-Tag-Routes).</span>

    ~~The Tags data scope includes tags that Oura users enter within the Oura mobile app. Tags are a growing list of activities, environment factors, symptoms, emotions, and other aspects that provide broader context into what's happening with users beyond the objective data generated by the Oura Ring.~~

    ~~[More information on tag translations](https://cloud.ouraring.com/edu/tag-translations)~~
  name: Tag Routes
- description: "VO2 Max is a measure of the maximum volume of oxygen that an individual\
    \ can use during intense exercise. See more details [here](https://support.ouraring.com/hc/en-us/articles/28336620578835-Cardio-Capacity-VO2-Max)."
  name: VO2 Max Routes
- description: "The Workout data scope includes information about user workouts. This\
    \ is a diverse, growing list of workouts that help inform how the user is training\
    \ and exercising."
  name: Workout Routes
- description: Fake user data that you can access without an Oura account. There is
    a corresponding sandbox endpoint to each available data type. This is useful for
    testing and development purposes. The data is not real and should not be used
    for any production purposes. The data is generated by Oura and is not based on
    any real user data. The data is not updated in real-time and is not guaranteed
    to be accurate. The rate limit for the sandbox endpoints is shared with your rate
    limit on other data endpoints.
  name: Sandbox Routes
- description: "Webhooks enable you to receive near real-time Oura data updates and\
    \ are the preferred way to receive the latest data from the Oura API.\n\n## Setup\n\
    \nCreate a new webhook subscription by calling the `POST /v2/webhook/subscription`\
    \ endpoint. Requests to the `/v2/webhook/subscription` are authenticated using\
    \ the `client_id` and `client_secret` you received when creating your application\
    \ and should be included in the HTTP header as `x-client-id` and `x-client-secret`,\
    \ respectively.\n\nWebhook subscriptions are required for each data type and event\
    \ type pair. For example, updates to `tag` is a separate subscription from created\
    \ `tag` and updates to `workouts`. This enables the option for different callback\
    \ URLs for each pair.\n\n### Verification\n\nA one-time verification occurs whenever\
    \ creating or updating a subscription. Your server must respond to a request made\
    \ to the `GET` method of your callback URL. The `GET` method must respond with\
    \ a challenge code within 2 seconds. The request schema is as follows: `https://{your-callback-url}?verification_token={request.verification_token}&challenge={random-string}`.\
    \ You should verify the `verification_token` is correct to ensure Oura is the\
    \ one calling your API. Parse the challenge string from the query parameters and\
    \ return the string in the body of your response. Example response body:\n```\n\
    {\n    \"challenge\": \"give-me-a-challenge\"\n}\n```\n\nThis process is visually\
    \ represented as follows:\n![verification image](/img/webhook-verification-flow-diagram.drawio.png)\n\
    \n## Webhook Delivery\n\n\nCallback URLs must respond with a 2xx or 3xx response\
    \ code **within 10 seconds**. Any other condition is considered a failure on the\
    \ client-side. We recommend processing events asynchronously to keep your response\
    \ time quick.\n\nWebhooks are sent to the POST method of your callback url in\
    \ the following format:\n\n#### POST Body\n```\n{\n  \"event_type\": \"<event-type>\"\
    ,\n  \"data_type\": \"<data-type>\",\n  \"object_id\": \"<object-id>\",\n  \"\
    event_time\": \"<iso-datetime\",\n  \"user_id\": \"<user-id>\"\n}\n```\n\n####\
    \ Headers\n```\n{\n    \"x-oura-signature\": \"<hmac-signature-of-timestamp-and-body>\"\
    ,\n    \"x-oura-timestamp\": \"<dispatch-timestamp>\",\n}\n```\n\n### Example\
    \ POST Data\n\n### POST Body\n```\n{\n  \"event_type\": \"update\",\n  \"data_type\"\
    : \"tag\",\n  \"object_id\": \"9fc867f2-b455-4c41-a05a-751c6e764ffa\",\n  \"event_time\"\
    : \"2022-11-16T08:21:00+00:00\",\n  \"user_id\": \"bd913327d56d-a0adf03b515a1d8ed46082e\"\
    \n}\n```\n\n#### Headers\n```\n{\n    \"x-oura-signature\": \"EA12F1F226BCA425AA10FFE3D318D284FC189DE6CFF62675883F49F6AF68F5A9\"\
    ,\n    \"x-oura-timestamp\": \"1671561207502\",\n}\n```\n\n### Client Failure\
    \ Handling\n\nAttempted redelivery of events over the course of an hour will occur\
    \ for the following failures:\n\nResponse Code | Action\n-- | --\n4xx | 10 retries\n\
    5xx | 10 retries\nTime Out | 10 retries\n\n## Security\n\n### Verify HMAC Signature\n\
    \nEach event contains a `x-oura-signature` and `x-oura-timestamp` header. The\
    \ `x-oura-signature` header is a HMAC signature of the timestamp and request body,\
    \ using your client application secret as the hash key. We strongly recommend\
    \ generating your own HMAC signature to verify it matches the header. Non-matching\
    \ signatures could indicate data originated from an attacker.\n\nPseudocode for\
    \ generating your own HMAC signature:\n```\ngenerate_hmac_256_signature(key=your_client_secret,\
    \ data=str(timestamp) + str(payload_data))\n```\n\n## FYIs\n\n### Deduplication\n\
    \nEvents sent in rapid succession (received from the client within milliseconds)\
    \ are deduplicated. Events which are duplicated over longer periods of time (received\
    \ from the client within multiple minutes) are *not* deduplicated. Expect at-least-once\
    \ delivery.\n\n### Delayed Delivery\n\n[For awareness] Upon service outage, messages\
    \ may be delivered with significant delays.\n\n### Automatically Cancel Subscription\n\
    \nWebhook subscriptions are automatically canceled if a callback responds with\
    \ a 410 status code.\n        "
  name: Webhook Subscription Routes
paths:
  /v2/usercollection/personal_info:
    get:
      operationId: Single_Personal_Info_Document_v2_usercollection_personal_info_get
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonalInfoResponse'
          description: Successful Response
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Single Personal Info Document
      tags:
      - Personal Info Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/usercollection/personal_info' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/usercollection/personal_info'\
          \ \nparams={ \n    'start_date': '2021-11-01', \n    'end_date': '2021-12-01'\
          \ \n}\nheaders = { \n  'Authorization': 'Bearer <token>' \n}\nresponse =\
          \ requests.request('GET', url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/usercollection/personal_info',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/usercollection/personal_info\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/usercollection/tag:
    get:
      deprecated: true
      operationId: Multiple_tag_Documents_v2_usercollection_tag_get
      parameters:
      - explode: true
        in: query
        name: start_date
        required: false
        schema:
          $ref: '#/components/schemas/Start_Date'
        style: form
      - explode: true
        in: query
        name: end_date
        required: false
        schema:
          $ref: '#/components/schemas/End_Date'
        style: form
      - explode: true
        in: query
        name: next_token
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiDocumentResponse_TagModel_'
          description: Successful Response
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Multiple Tag Documents
      tags:
      - Tag Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/usercollection/tag?start_date=2021-11-01&end_date=2021-12-01' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/usercollection/tag'\
          \ \nparams={ \n    'start_date': '2021-11-01', \n    'end_date': '2021-12-01'\
          \ \n}\nheaders = { \n  'Authorization': 'Bearer <token>' \n}\nresponse =\
          \ requests.request('GET', url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/usercollection/tag?start_date=2021-11-01&end_date=2021-12-01',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/usercollection/tag?start_date=2021-11-01&end_date=2021-12-01\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/sandbox/usercollection/tag:
    get:
      deprecated: true
      operationId: Sandbox___Multiple_tag_Documents_v2_sandbox_usercollection_tag_get
      parameters:
      - explode: true
        in: query
        name: start_date
        required: false
        schema:
          $ref: '#/components/schemas/Start_Date'
        style: form
      - explode: true
        in: query
        name: end_date
        required: false
        schema:
          $ref: '#/components/schemas/End_Date_1'
        style: form
      - explode: true
        in: query
        name: next_token
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiDocumentResponse_TagModel_'
          description: Successful Response
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Sandbox - Multiple Tag Documents
      tags:
      - Sandbox Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/sandbox/usercollection/tag?start_date=2021-11-01&end_date=2021-12-01' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/sandbox/usercollection/tag'\
          \ \nparams={ \n    'start_date': '2021-11-01', \n    'end_date': '2021-12-01'\
          \ \n}\nheaders = { \n  'Authorization': 'Bearer <token>' \n}\nresponse =\
          \ requests.request('GET', url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/sandbox/usercollection/tag?start_date=2021-11-01&end_date=2021-12-01',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/sandbox/usercollection/tag?start_date=2021-11-01&end_date=2021-12-01\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/usercollection/enhanced_tag:
    get:
      operationId: Multiple_enhanced_tag_Documents_v2_usercollection_enhanced_tag_get
      parameters:
      - explode: true
        in: query
        name: start_date
        required: false
        schema:
          $ref: '#/components/schemas/Start_Date'
        style: form
      - explode: true
        in: query
        name: end_date
        required: false
        schema:
          $ref: '#/components/schemas/End_Date_1'
        style: form
      - explode: true
        in: query
        name: next_token
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiDocumentResponse_EnhancedTagModel_'
          description: Successful Response
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Multiple Enhanced Tag Documents
      tags:
      - Enhanced Tag Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/usercollection/enhanced_tag?start_date=2021-11-01&end_date=2021-12-01' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/usercollection/enhanced_tag'\
          \ \nparams={ \n    'start_date': '2021-11-01', \n    'end_date': '2021-12-01'\
          \ \n}\nheaders = { \n  'Authorization': 'Bearer <token>' \n}\nresponse =\
          \ requests.request('GET', url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/usercollection/enhanced_tag?start_date=2021-11-01&end_date=2021-12-01',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/usercollection/enhanced_tag?start_date=2021-11-01&end_date=2021-12-01\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/sandbox/usercollection/enhanced_tag:
    get:
      operationId: Sandbox___Multiple_enhanced_tag_Documents_v2_sandbox_usercollection_enhanced_tag_get
      parameters:
      - explode: true
        in: query
        name: start_date
        required: false
        schema:
          $ref: '#/components/schemas/Start_Date'
        style: form
      - explode: true
        in: query
        name: end_date
        required: false
        schema:
          $ref: '#/components/schemas/End_Date_1'
        style: form
      - explode: true
        in: query
        name: next_token
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiDocumentResponse_EnhancedTagModel_'
          description: Successful Response
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Sandbox - Multiple Enhanced Tag Documents
      tags:
      - Sandbox Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/sandbox/usercollection/enhanced_tag?start_date=2021-11-01&end_date=2021-12-01' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/sandbox/usercollection/enhanced_tag'\
          \ \nparams={ \n    'start_date': '2021-11-01', \n    'end_date': '2021-12-01'\
          \ \n}\nheaders = { \n  'Authorization': 'Bearer <token>' \n}\nresponse =\
          \ requests.request('GET', url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/sandbox/usercollection/enhanced_tag?start_date=2021-11-01&end_date=2021-12-01',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/sandbox/usercollection/enhanced_tag?start_date=2021-11-01&end_date=2021-12-01\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/usercollection/workout:
    get:
      operationId: Multiple_workout_Documents_v2_usercollection_workout_get
      parameters:
      - explode: true
        in: query
        name: start_date
        required: false
        schema:
          $ref: '#/components/schemas/Start_Date'
        style: form
      - explode: true
        in: query
        name: end_date
        required: false
        schema:
          $ref: '#/components/schemas/End_Date_1'
        style: form
      - explode: true
        in: query
        name: next_token
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiDocumentResponse_WorkoutModel_'
          description: Successful Response
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Multiple Workout Documents
      tags:
      - Workout Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/usercollection/workout?start_date=2021-11-01&end_date=2021-12-01' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/usercollection/workout'\
          \ \nparams={ \n    'start_date': '2021-11-01', \n    'end_date': '2021-12-01'\
          \ \n}\nheaders = { \n  'Authorization': 'Bearer <token>' \n}\nresponse =\
          \ requests.request('GET', url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/usercollection/workout?start_date=2021-11-01&end_date=2021-12-01',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/usercollection/workout?start_date=2021-11-01&end_date=2021-12-01\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/sandbox/usercollection/workout:
    get:
      operationId: Sandbox___Multiple_workout_Documents_v2_sandbox_usercollection_workout_get
      parameters:
      - explode: true
        in: query
        name: start_date
        required: false
        schema:
          $ref: '#/components/schemas/Start_Date'
        style: form
      - explode: true
        in: query
        name: end_date
        required: false
        schema:
          $ref: '#/components/schemas/End_Date_1'
        style: form
      - explode: true
        in: query
        name: next_token
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiDocumentResponse_WorkoutModel_'
          description: Successful Response
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Sandbox - Multiple Workout Documents
      tags:
      - Sandbox Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/sandbox/usercollection/workout?start_date=2021-11-01&end_date=2021-12-01' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/sandbox/usercollection/workout'\
          \ \nparams={ \n    'start_date': '2021-11-01', \n    'end_date': '2021-12-01'\
          \ \n}\nheaders = { \n  'Authorization': 'Bearer <token>' \n}\nresponse =\
          \ requests.request('GET', url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/sandbox/usercollection/workout?start_date=2021-11-01&end_date=2021-12-01',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/sandbox/usercollection/workout?start_date=2021-11-01&end_date=2021-12-01\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/usercollection/session:
    get:
      operationId: Multiple_session_Documents_v2_usercollection_session_get
      parameters:
      - explode: true
        in: query
        name: start_date
        required: false
        schema:
          $ref: '#/components/schemas/Start_Date'
        style: form
      - explode: true
        in: query
        name: end_date
        required: false
        schema:
          $ref: '#/components/schemas/End_Date_1'
        style: form
      - explode: true
        in: query
        name: next_token
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiDocumentResponse_SessionModel_'
          description: Successful Response
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Multiple Session Documents
      tags:
      - Session Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/usercollection/session?start_date=2021-11-01&end_date=2021-12-01' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/usercollection/session'\
          \ \nparams={ \n    'start_date': '2021-11-01', \n    'end_date': '2021-12-01'\
          \ \n}\nheaders = { \n  'Authorization': 'Bearer <token>' \n}\nresponse =\
          \ requests.request('GET', url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/usercollection/session?start_date=2021-11-01&end_date=2021-12-01',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/usercollection/session?start_date=2021-11-01&end_date=2021-12-01\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/sandbox/usercollection/session:
    get:
      operationId: Sandbox___Multiple_session_Documents_v2_sandbox_usercollection_session_get
      parameters:
      - explode: true
        in: query
        name: start_date
        required: false
        schema:
          $ref: '#/components/schemas/Start_Date'
        style: form
      - explode: true
        in: query
        name: end_date
        required: false
        schema:
          $ref: '#/components/schemas/End_Date_1'
        style: form
      - explode: true
        in: query
        name: next_token
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiDocumentResponse_SessionModel_'
          description: Successful Response
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Sandbox - Multiple Session Documents
      tags:
      - Sandbox Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/sandbox/usercollection/session?start_date=2021-11-01&end_date=2021-12-01' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/sandbox/usercollection/session'\
          \ \nparams={ \n    'start_date': '2021-11-01', \n    'end_date': '2021-12-01'\
          \ \n}\nheaders = { \n  'Authorization': 'Bearer <token>' \n}\nresponse =\
          \ requests.request('GET', url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/sandbox/usercollection/session?start_date=2021-11-01&end_date=2021-12-01',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/sandbox/usercollection/session?start_date=2021-11-01&end_date=2021-12-01\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/usercollection/daily_activity:
    get:
      operationId: Multiple_daily_activity_Documents_v2_usercollection_daily_activity_get
      parameters:
      - explode: true
        in: query
        name: start_date
        required: false
        schema:
          $ref: '#/components/schemas/Start_Date'
        style: form
      - explode: true
        in: query
        name: end_date
        required: false
        schema:
          $ref: '#/components/schemas/End_Date_1'
        style: form
      - explode: true
        in: query
        name: next_token
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiDocumentResponse_DailyActivityModel_'
          description: Successful Response
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Multiple Daily Activity Documents
      tags:
      - Daily Activity Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/usercollection/daily_activity?start_date=2021-11-01&end_date=2021-12-01' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/usercollection/daily_activity'\
          \ \nparams={ \n    'start_date': '2021-11-01', \n    'end_date': '2021-12-01'\
          \ \n}\nheaders = { \n  'Authorization': 'Bearer <token>' \n}\nresponse =\
          \ requests.request('GET', url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/usercollection/daily_activity?start_date=2021-11-01&end_date=2021-12-01',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/usercollection/daily_activity?start_date=2021-11-01&end_date=2021-12-01\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/sandbox/usercollection/daily_activity:
    get:
      operationId: Sandbox___Multiple_daily_activity_Documents_v2_sandbox_usercollection_daily_activity_get
      parameters:
      - explode: true
        in: query
        name: start_date
        required: false
        schema:
          $ref: '#/components/schemas/Start_Date'
        style: form
      - explode: true
        in: query
        name: end_date
        required: false
        schema:
          $ref: '#/components/schemas/End_Date_1'
        style: form
      - explode: true
        in: query
        name: next_token
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiDocumentResponse_DailyActivityModel_'
          description: Successful Response
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Sandbox - Multiple Daily Activity Documents
      tags:
      - Sandbox Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/sandbox/usercollection/daily_activity?start_date=2021-11-01&end_date=2021-12-01' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/sandbox/usercollection/daily_activity'\
          \ \nparams={ \n    'start_date': '2021-11-01', \n    'end_date': '2021-12-01'\
          \ \n}\nheaders = { \n  'Authorization': 'Bearer <token>' \n}\nresponse =\
          \ requests.request('GET', url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/sandbox/usercollection/daily_activity?start_date=2021-11-01&end_date=2021-12-01',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/sandbox/usercollection/daily_activity?start_date=2021-11-01&end_date=2021-12-01\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/usercollection/daily_sleep:
    get:
      operationId: Multiple_daily_sleep_Documents_v2_usercollection_daily_sleep_get
      parameters:
      - explode: true
        in: query
        name: start_date
        required: false
        schema:
          $ref: '#/components/schemas/Start_Date'
        style: form
      - explode: true
        in: query
        name: end_date
        required: false
        schema:
          $ref: '#/components/schemas/End_Date_1'
        style: form
      - explode: true
        in: query
        name: next_token
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiDocumentResponse_DailySleepModel_'
          description: Successful Response
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Multiple Daily Sleep Documents
      tags:
      - Daily Sleep Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/usercollection/daily_sleep?start_date=2021-11-01&end_date=2021-12-01' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/usercollection/daily_sleep'\
          \ \nparams={ \n    'start_date': '2021-11-01', \n    'end_date': '2021-12-01'\
          \ \n}\nheaders = { \n  'Authorization': 'Bearer <token>' \n}\nresponse =\
          \ requests.request('GET', url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/usercollection/daily_sleep?start_date=2021-11-01&end_date=2021-12-01',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/usercollection/daily_sleep?start_date=2021-11-01&end_date=2021-12-01\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/sandbox/usercollection/daily_sleep:
    get:
      operationId: Sandbox___Multiple_daily_sleep_Documents_v2_sandbox_usercollection_daily_sleep_get
      parameters:
      - explode: true
        in: query
        name: start_date
        required: false
        schema:
          $ref: '#/components/schemas/Start_Date'
        style: form
      - explode: true
        in: query
        name: end_date
        required: false
        schema:
          $ref: '#/components/schemas/End_Date_1'
        style: form
      - explode: true
        in: query
        name: next_token
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiDocumentResponse_DailySleepModel_'
          description: Successful Response
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Sandbox - Multiple Daily Sleep Documents
      tags:
      - Sandbox Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/sandbox/usercollection/daily_sleep?start_date=2021-11-01&end_date=2021-12-01' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/sandbox/usercollection/daily_sleep'\
          \ \nparams={ \n    'start_date': '2021-11-01', \n    'end_date': '2021-12-01'\
          \ \n}\nheaders = { \n  'Authorization': 'Bearer <token>' \n}\nresponse =\
          \ requests.request('GET', url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/sandbox/usercollection/daily_sleep?start_date=2021-11-01&end_date=2021-12-01',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/sandbox/usercollection/daily_sleep?start_date=2021-11-01&end_date=2021-12-01\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/usercollection/daily_spo2:
    get:
      operationId: Multiple_daily_spo2_Documents_v2_usercollection_daily_spo2_get
      parameters:
      - explode: true
        in: query
        name: start_date
        required: false
        schema:
          $ref: '#/components/schemas/Start_Date'
        style: form
      - explode: true
        in: query
        name: end_date
        required: false
        schema:
          $ref: '#/components/schemas/End_Date_1'
        style: form
      - explode: true
        in: query
        name: next_token
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiDocumentResponse_DailySpO2Model_'
          description: Successful Response
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Multiple Daily Spo2 Documents
      tags:
      - Daily Spo2 Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/usercollection/daily_spo2?start_date=2021-11-01&end_date=2021-12-01' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/usercollection/daily_spo2'\
          \ \nparams={ \n    'start_date': '2021-11-01', \n    'end_date': '2021-12-01'\
          \ \n}\nheaders = { \n  'Authorization': 'Bearer <token>' \n}\nresponse =\
          \ requests.request('GET', url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/usercollection/daily_spo2?start_date=2021-11-01&end_date=2021-12-01',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/usercollection/daily_spo2?start_date=2021-11-01&end_date=2021-12-01\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/sandbox/usercollection/daily_spo2:
    get:
      operationId: Sandbox___Multiple_daily_spo2_Documents_v2_sandbox_usercollection_daily_spo2_get
      parameters:
      - explode: true
        in: query
        name: start_date
        required: false
        schema:
          $ref: '#/components/schemas/Start_Date'
        style: form
      - explode: true
        in: query
        name: end_date
        required: false
        schema:
          $ref: '#/components/schemas/End_Date_1'
        style: form
      - explode: true
        in: query
        name: next_token
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiDocumentResponse_DailySpO2Model_'
          description: Successful Response
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Sandbox - Multiple Daily Spo2 Documents
      tags:
      - Sandbox Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/sandbox/usercollection/daily_spo2?start_date=2021-11-01&end_date=2021-12-01' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/sandbox/usercollection/daily_spo2'\
          \ \nparams={ \n    'start_date': '2021-11-01', \n    'end_date': '2021-12-01'\
          \ \n}\nheaders = { \n  'Authorization': 'Bearer <token>' \n}\nresponse =\
          \ requests.request('GET', url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/sandbox/usercollection/daily_spo2?start_date=2021-11-01&end_date=2021-12-01',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/sandbox/usercollection/daily_spo2?start_date=2021-11-01&end_date=2021-12-01\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/usercollection/daily_readiness:
    get:
      operationId: Multiple_daily_readiness_Documents_v2_usercollection_daily_readiness_get
      parameters:
      - explode: true
        in: query
        name: start_date
        required: false
        schema:
          $ref: '#/components/schemas/Start_Date'
        style: form
      - explode: true
        in: query
        name: end_date
        required: false
        schema:
          $ref: '#/components/schemas/End_Date_1'
        style: form
      - explode: true
        in: query
        name: next_token
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiDocumentResponse_DailyReadinessModel_'
          description: Successful Response
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Multiple Daily Readiness Documents
      tags:
      - Daily Readiness Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/usercollection/daily_readiness?start_date=2021-11-01&end_date=2021-12-01' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/usercollection/daily_readiness'\
          \ \nparams={ \n    'start_date': '2021-11-01', \n    'end_date': '2021-12-01'\
          \ \n}\nheaders = { \n  'Authorization': 'Bearer <token>' \n}\nresponse =\
          \ requests.request('GET', url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/usercollection/daily_readiness?start_date=2021-11-01&end_date=2021-12-01',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/usercollection/daily_readiness?start_date=2021-11-01&end_date=2021-12-01\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/sandbox/usercollection/daily_readiness:
    get:
      operationId: Sandbox___Multiple_daily_readiness_Documents_v2_sandbox_usercollection_daily_readiness_get
      parameters:
      - explode: true
        in: query
        name: start_date
        required: false
        schema:
          $ref: '#/components/schemas/Start_Date'
        style: form
      - explode: true
        in: query
        name: end_date
        required: false
        schema:
          $ref: '#/components/schemas/End_Date_1'
        style: form
      - explode: true
        in: query
        name: next_token
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiDocumentResponse_DailyReadinessModel_'
          description: Successful Response
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Sandbox - Multiple Daily Readiness Documents
      tags:
      - Sandbox Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/sandbox/usercollection/daily_readiness?start_date=2021-11-01&end_date=2021-12-01' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/sandbox/usercollection/daily_readiness'\
          \ \nparams={ \n    'start_date': '2021-11-01', \n    'end_date': '2021-12-01'\
          \ \n}\nheaders = { \n  'Authorization': 'Bearer <token>' \n}\nresponse =\
          \ requests.request('GET', url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/sandbox/usercollection/daily_readiness?start_date=2021-11-01&end_date=2021-12-01',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/sandbox/usercollection/daily_readiness?start_date=2021-11-01&end_date=2021-12-01\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/usercollection/sleep:
    get:
      operationId: Multiple_sleep_Documents_v2_usercollection_sleep_get
      parameters:
      - explode: true
        in: query
        name: start_date
        required: false
        schema:
          $ref: '#/components/schemas/Start_Date'
        style: form
      - explode: true
        in: query
        name: end_date
        required: false
        schema:
          $ref: '#/components/schemas/End_Date_1'
        style: form
      - explode: true
        in: query
        name: next_token
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiDocumentResponse_SleepModel_'
          description: Successful Response
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Multiple Sleep Documents
      tags:
      - Sleep Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/usercollection/sleep?start_date=2021-11-01&end_date=2021-12-01' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/usercollection/sleep'\
          \ \nparams={ \n    'start_date': '2021-11-01', \n    'end_date': '2021-12-01'\
          \ \n}\nheaders = { \n  'Authorization': 'Bearer <token>' \n}\nresponse =\
          \ requests.request('GET', url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/usercollection/sleep?start_date=2021-11-01&end_date=2021-12-01',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/usercollection/sleep?start_date=2021-11-01&end_date=2021-12-01\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/sandbox/usercollection/sleep:
    get:
      operationId: Sandbox___Multiple_sleep_Documents_v2_sandbox_usercollection_sleep_get
      parameters:
      - explode: true
        in: query
        name: start_date
        required: false
        schema:
          $ref: '#/components/schemas/Start_Date'
        style: form
      - explode: true
        in: query
        name: end_date
        required: false
        schema:
          $ref: '#/components/schemas/End_Date_1'
        style: form
      - explode: true
        in: query
        name: next_token
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiDocumentResponse_SleepModel_'
          description: Successful Response
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Sandbox - Multiple Sleep Documents
      tags:
      - Sandbox Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/sandbox/usercollection/sleep?start_date=2021-11-01&end_date=2021-12-01' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/sandbox/usercollection/sleep'\
          \ \nparams={ \n    'start_date': '2021-11-01', \n    'end_date': '2021-12-01'\
          \ \n}\nheaders = { \n  'Authorization': 'Bearer <token>' \n}\nresponse =\
          \ requests.request('GET', url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/sandbox/usercollection/sleep?start_date=2021-11-01&end_date=2021-12-01',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/sandbox/usercollection/sleep?start_date=2021-11-01&end_date=2021-12-01\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/usercollection/sleep_time:
    get:
      operationId: Multiple_sleep_time_Documents_v2_usercollection_sleep_time_get
      parameters:
      - explode: true
        in: query
        name: start_date
        required: false
        schema:
          $ref: '#/components/schemas/Start_Date'
        style: form
      - explode: true
        in: query
        name: end_date
        required: false
        schema:
          $ref: '#/components/schemas/End_Date_1'
        style: form
      - explode: true
        in: query
        name: next_token
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiDocumentResponse_SleepTimeModel_'
          description: Successful Response
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Multiple Sleep Time Documents
      tags:
      - Sleep Time Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/usercollection/sleep_time?start_date=2021-11-01&end_date=2021-12-01' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/usercollection/sleep_time'\
          \ \nparams={ \n    'start_date': '2021-11-01', \n    'end_date': '2021-12-01'\
          \ \n}\nheaders = { \n  'Authorization': 'Bearer <token>' \n}\nresponse =\
          \ requests.request('GET', url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/usercollection/sleep_time?start_date=2021-11-01&end_date=2021-12-01',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/usercollection/sleep_time?start_date=2021-11-01&end_date=2021-12-01\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/sandbox/usercollection/sleep_time:
    get:
      operationId: Sandbox___Multiple_sleep_time_Documents_v2_sandbox_usercollection_sleep_time_get
      parameters:
      - explode: true
        in: query
        name: start_date
        required: false
        schema:
          $ref: '#/components/schemas/Start_Date'
        style: form
      - explode: true
        in: query
        name: end_date
        required: false
        schema:
          $ref: '#/components/schemas/End_Date_1'
        style: form
      - explode: true
        in: query
        name: next_token
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiDocumentResponse_SleepTimeModel_'
          description: Successful Response
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Sandbox - Multiple Sleep Time Documents
      tags:
      - Sandbox Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/sandbox/usercollection/sleep_time?start_date=2021-11-01&end_date=2021-12-01' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/sandbox/usercollection/sleep_time'\
          \ \nparams={ \n    'start_date': '2021-11-01', \n    'end_date': '2021-12-01'\
          \ \n}\nheaders = { \n  'Authorization': 'Bearer <token>' \n}\nresponse =\
          \ requests.request('GET', url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/sandbox/usercollection/sleep_time?start_date=2021-11-01&end_date=2021-12-01',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/sandbox/usercollection/sleep_time?start_date=2021-11-01&end_date=2021-12-01\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/usercollection/rest_mode_period:
    get:
      operationId: Multiple_rest_mode_period_Documents_v2_usercollection_rest_mode_period_get
      parameters:
      - explode: true
        in: query
        name: start_date
        required: false
        schema:
          $ref: '#/components/schemas/Start_Date'
        style: form
      - explode: true
        in: query
        name: end_date
        required: false
        schema:
          $ref: '#/components/schemas/End_Date_1'
        style: form
      - explode: true
        in: query
        name: next_token
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiDocumentResponse_RestModePeriodModel_'
          description: Successful Response
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Multiple Rest Mode Period Documents
      tags:
      - Rest Mode Period Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/usercollection/rest_mode_period?start_date=2021-11-01&end_date=2021-12-01' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/usercollection/rest_mode_period'\
          \ \nparams={ \n    'start_date': '2021-11-01', \n    'end_date': '2021-12-01'\
          \ \n}\nheaders = { \n  'Authorization': 'Bearer <token>' \n}\nresponse =\
          \ requests.request('GET', url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/usercollection/rest_mode_period?start_date=2021-11-01&end_date=2021-12-01',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/usercollection/rest_mode_period?start_date=2021-11-01&end_date=2021-12-01\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/sandbox/usercollection/rest_mode_period:
    get:
      operationId: Sandbox___Multiple_rest_mode_period_Documents_v2_sandbox_usercollection_rest_mode_period_get
      parameters:
      - explode: true
        in: query
        name: start_date
        required: false
        schema:
          $ref: '#/components/schemas/Start_Date'
        style: form
      - explode: true
        in: query
        name: end_date
        required: false
        schema:
          $ref: '#/components/schemas/End_Date_1'
        style: form
      - explode: true
        in: query
        name: next_token
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiDocumentResponse_RestModePeriodModel_'
          description: Successful Response
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Sandbox - Multiple Rest Mode Period Documents
      tags:
      - Sandbox Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/sandbox/usercollection/rest_mode_period?start_date=2021-11-01&end_date=2021-12-01' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/sandbox/usercollection/rest_mode_period'\
          \ \nparams={ \n    'start_date': '2021-11-01', \n    'end_date': '2021-12-01'\
          \ \n}\nheaders = { \n  'Authorization': 'Bearer <token>' \n}\nresponse =\
          \ requests.request('GET', url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/sandbox/usercollection/rest_mode_period?start_date=2021-11-01&end_date=2021-12-01',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/sandbox/usercollection/rest_mode_period?start_date=2021-11-01&end_date=2021-12-01\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/usercollection/ring_configuration:
    get:
      operationId: Multiple_ring_configuration_Documents_v2_usercollection_ring_configuration_get
      parameters:
      - explode: true
        in: query
        name: next_token
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiDocumentResponse_RingConfigurationModel_'
          description: Successful Response
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Multiple Ring Configuration Documents
      tags:
      - Ring Configuration Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/usercollection/ring_configuration?start_date=2021-11-01&end_date=2021-12-01' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/usercollection/ring_configuration'\
          \ \nparams={ \n    'start_date': '2021-11-01', \n    'end_date': '2021-12-01'\
          \ \n}\nheaders = { \n  'Authorization': 'Bearer <token>' \n}\nresponse =\
          \ requests.request('GET', url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/usercollection/ring_configuration?start_date=2021-11-01&end_date=2021-12-01',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/usercollection/ring_configuration?start_date=2021-11-01&end_date=2021-12-01\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/sandbox/usercollection/ring_configuration:
    get:
      operationId: Sandbox___Multiple_ring_configuration_Documents_v2_sandbox_usercollection_ring_configuration_get
      parameters:
      - explode: true
        in: query
        name: next_token
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiDocumentResponse_RingConfigurationModel_'
          description: Successful Response
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Sandbox - Multiple Ring Configuration Documents
      tags:
      - Sandbox Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/sandbox/usercollection/ring_configuration?start_date=2021-11-01&end_date=2021-12-01' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/sandbox/usercollection/ring_configuration'\
          \ \nparams={ \n    'start_date': '2021-11-01', \n    'end_date': '2021-12-01'\
          \ \n}\nheaders = { \n  'Authorization': 'Bearer <token>' \n}\nresponse =\
          \ requests.request('GET', url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/sandbox/usercollection/ring_configuration?start_date=2021-11-01&end_date=2021-12-01',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/sandbox/usercollection/ring_configuration?start_date=2021-11-01&end_date=2021-12-01\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/usercollection/daily_stress:
    get:
      operationId: Multiple_daily_stress_Documents_v2_usercollection_daily_stress_get
      parameters:
      - explode: true
        in: query
        name: start_date
        required: false
        schema:
          $ref: '#/components/schemas/Start_Date'
        style: form
      - explode: true
        in: query
        name: end_date
        required: false
        schema:
          $ref: '#/components/schemas/End_Date_1'
        style: form
      - explode: true
        in: query
        name: next_token
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiDocumentResponse_DailyStressModel_'
          description: Successful Response
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Multiple Daily Stress Documents
      tags:
      - Daily Stress Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/usercollection/daily_stress?start_date=2021-11-01&end_date=2021-12-01' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/usercollection/daily_stress'\
          \ \nparams={ \n    'start_date': '2021-11-01', \n    'end_date': '2021-12-01'\
          \ \n}\nheaders = { \n  'Authorization': 'Bearer <token>' \n}\nresponse =\
          \ requests.request('GET', url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/usercollection/daily_stress?start_date=2021-11-01&end_date=2021-12-01',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/usercollection/daily_stress?start_date=2021-11-01&end_date=2021-12-01\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/sandbox/usercollection/daily_stress:
    get:
      operationId: Sandbox___Multiple_daily_stress_Documents_v2_sandbox_usercollection_daily_stress_get
      parameters:
      - explode: true
        in: query
        name: start_date
        required: false
        schema:
          $ref: '#/components/schemas/Start_Date'
        style: form
      - explode: true
        in: query
        name: end_date
        required: false
        schema:
          $ref: '#/components/schemas/End_Date_1'
        style: form
      - explode: true
        in: query
        name: next_token
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiDocumentResponse_DailyStressModel_'
          description: Successful Response
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Sandbox - Multiple Daily Stress Documents
      tags:
      - Sandbox Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/sandbox/usercollection/daily_stress?start_date=2021-11-01&end_date=2021-12-01' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/sandbox/usercollection/daily_stress'\
          \ \nparams={ \n    'start_date': '2021-11-01', \n    'end_date': '2021-12-01'\
          \ \n}\nheaders = { \n  'Authorization': 'Bearer <token>' \n}\nresponse =\
          \ requests.request('GET', url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/sandbox/usercollection/daily_stress?start_date=2021-11-01&end_date=2021-12-01',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/sandbox/usercollection/daily_stress?start_date=2021-11-01&end_date=2021-12-01\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/usercollection/daily_resilience:
    get:
      operationId: Multiple_daily_resilience_Documents_v2_usercollection_daily_resilience_get
      parameters:
      - explode: true
        in: query
        name: start_date
        required: false
        schema:
          $ref: '#/components/schemas/Start_Date'
        style: form
      - explode: true
        in: query
        name: end_date
        required: false
        schema:
          $ref: '#/components/schemas/End_Date_1'
        style: form
      - explode: true
        in: query
        name: next_token
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiDocumentResponse_DailyResilienceModel_'
          description: Successful Response
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Multiple Daily Resilience Documents
      tags:
      - Daily Resilience Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/usercollection/daily_resilience?start_date=2021-11-01&end_date=2021-12-01' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/usercollection/daily_resilience'\
          \ \nparams={ \n    'start_date': '2021-11-01', \n    'end_date': '2021-12-01'\
          \ \n}\nheaders = { \n  'Authorization': 'Bearer <token>' \n}\nresponse =\
          \ requests.request('GET', url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/usercollection/daily_resilience?start_date=2021-11-01&end_date=2021-12-01',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/usercollection/daily_resilience?start_date=2021-11-01&end_date=2021-12-01\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/sandbox/usercollection/daily_resilience:
    get:
      operationId: Sandbox___Multiple_daily_resilience_Documents_v2_sandbox_usercollection_daily_resilience_get
      parameters:
      - explode: true
        in: query
        name: start_date
        required: false
        schema:
          $ref: '#/components/schemas/Start_Date'
        style: form
      - explode: true
        in: query
        name: end_date
        required: false
        schema:
          $ref: '#/components/schemas/End_Date_1'
        style: form
      - explode: true
        in: query
        name: next_token
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiDocumentResponse_DailyResilienceModel_'
          description: Successful Response
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Sandbox - Multiple Daily Resilience Documents
      tags:
      - Sandbox Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/sandbox/usercollection/daily_resilience?start_date=2021-11-01&end_date=2021-12-01' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/sandbox/usercollection/daily_resilience'\
          \ \nparams={ \n    'start_date': '2021-11-01', \n    'end_date': '2021-12-01'\
          \ \n}\nheaders = { \n  'Authorization': 'Bearer <token>' \n}\nresponse =\
          \ requests.request('GET', url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/sandbox/usercollection/daily_resilience?start_date=2021-11-01&end_date=2021-12-01',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/sandbox/usercollection/daily_resilience?start_date=2021-11-01&end_date=2021-12-01\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/usercollection/daily_cardiovascular_age:
    get:
      operationId: Multiple_daily_cardiovascular_age_Documents_v2_usercollection_daily_cardiovascular_age_get
      parameters:
      - explode: true
        in: query
        name: start_date
        required: false
        schema:
          $ref: '#/components/schemas/Start_Date'
        style: form
      - explode: true
        in: query
        name: end_date
        required: false
        schema:
          $ref: '#/components/schemas/End_Date_1'
        style: form
      - explode: true
        in: query
        name: next_token
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiDocumentResponse_DailyCardiovascularAgeModel_'
          description: Successful Response
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Multiple Daily Cardiovascular Age Documents
      tags:
      - Daily Cardiovascular Age Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/usercollection/daily_cardiovascular_age?start_date=2021-11-01&end_date=2021-12-01' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/usercollection/daily_cardiovascular_age'\
          \ \nparams={ \n    'start_date': '2021-11-01', \n    'end_date': '2021-12-01'\
          \ \n}\nheaders = { \n  'Authorization': 'Bearer <token>' \n}\nresponse =\
          \ requests.request('GET', url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/usercollection/daily_cardiovascular_age?start_date=2021-11-01&end_date=2021-12-01',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/usercollection/daily_cardiovascular_age?start_date=2021-11-01&end_date=2021-12-01\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/sandbox/usercollection/daily_cardiovascular_age:
    get:
      operationId: Sandbox___Multiple_daily_cardiovascular_age_Documents_v2_sandbox_usercollection_daily_cardiovascular_age_get
      parameters:
      - explode: true
        in: query
        name: start_date
        required: false
        schema:
          $ref: '#/components/schemas/Start_Date'
        style: form
      - explode: true
        in: query
        name: end_date
        required: false
        schema:
          $ref: '#/components/schemas/End_Date_1'
        style: form
      - explode: true
        in: query
        name: next_token
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiDocumentResponse_DailyCardiovascularAgeModel_'
          description: Successful Response
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Sandbox - Multiple Daily Cardiovascular Age Documents
      tags:
      - Sandbox Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/sandbox/usercollection/daily_cardiovascular_age?start_date=2021-11-01&end_date=2021-12-01' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/sandbox/usercollection/daily_cardiovascular_age'\
          \ \nparams={ \n    'start_date': '2021-11-01', \n    'end_date': '2021-12-01'\
          \ \n}\nheaders = { \n  'Authorization': 'Bearer <token>' \n}\nresponse =\
          \ requests.request('GET', url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/sandbox/usercollection/daily_cardiovascular_age?start_date=2021-11-01&end_date=2021-12-01',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/sandbox/usercollection/daily_cardiovascular_age?start_date=2021-11-01&end_date=2021-12-01\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/usercollection/vO2_max:
    get:
      operationId: Multiple_vO2_max_Documents_v2_usercollection_vO2_max_get
      parameters:
      - explode: true
        in: query
        name: start_date
        required: false
        schema:
          $ref: '#/components/schemas/Start_Date'
        style: form
      - explode: true
        in: query
        name: end_date
        required: false
        schema:
          $ref: '#/components/schemas/End_Date_1'
        style: form
      - explode: true
        in: query
        name: next_token
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiDocumentResponse_VO2MaxModel_'
          description: Successful Response
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Multiple Vo2 Max Documents
      tags:
      - VO2 Max Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/usercollection/vO2_max?start_date=2021-11-01&end_date=2021-12-01' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/usercollection/vO2_max'\
          \ \nparams={ \n    'start_date': '2021-11-01', \n    'end_date': '2021-12-01'\
          \ \n}\nheaders = { \n  'Authorization': 'Bearer <token>' \n}\nresponse =\
          \ requests.request('GET', url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/usercollection/vO2_max?start_date=2021-11-01&end_date=2021-12-01',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/usercollection/vO2_max?start_date=2021-11-01&end_date=2021-12-01\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/sandbox/usercollection/vO2_max:
    get:
      operationId: Sandbox___Multiple_vO2_max_Documents_v2_sandbox_usercollection_vO2_max_get
      parameters:
      - explode: true
        in: query
        name: start_date
        required: false
        schema:
          $ref: '#/components/schemas/Start_Date'
        style: form
      - explode: true
        in: query
        name: end_date
        required: false
        schema:
          $ref: '#/components/schemas/End_Date_1'
        style: form
      - explode: true
        in: query
        name: next_token
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiDocumentResponse_VO2MaxModel_'
          description: Successful Response
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Sandbox - Multiple Vo2 Max Documents
      tags:
      - Sandbox Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/sandbox/usercollection/vO2_max?start_date=2021-11-01&end_date=2021-12-01' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/sandbox/usercollection/vO2_max'\
          \ \nparams={ \n    'start_date': '2021-11-01', \n    'end_date': '2021-12-01'\
          \ \n}\nheaders = { \n  'Authorization': 'Bearer <token>' \n}\nresponse =\
          \ requests.request('GET', url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/sandbox/usercollection/vO2_max?start_date=2021-11-01&end_date=2021-12-01',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/sandbox/usercollection/vO2_max?start_date=2021-11-01&end_date=2021-12-01\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/usercollection/tag/{document_id}:
    get:
      deprecated: true
      operationId: Single_tag_Document_v2_usercollection_tag__document_id__get
      parameters:
      - explode: false
        in: path
        name: document_id
        required: true
        schema:
          title: Document Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagModel'
          description: Successful Response
        "404":
          description: Not Found
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Single Tag Document
      tags:
      - Tag Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/usercollection/tag/2-5daccc095220cc5493a4e9c2b681ca941e' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/usercollection/tag/2-5daccc095220cc5493a4e9c2b681ca941e\n\
          headers = { \n  'Authorization': 'Bearer <token>' \n}\nresponse = requests.request('GET',\
          \ url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/usercollection/tag/2-5daccc095220cc5493a4e9c2b681ca941e',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/usercollection/tag/2-5daccc095220cc5493a4e9c2b681ca941e\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/sandbox/usercollection/tag/{document_id}:
    get:
      operationId: Sandbox___Single_tag_Document_v2_sandbox_usercollection_tag__document_id__get
      parameters:
      - explode: false
        in: path
        name: document_id
        required: true
        schema:
          title: Document Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagModel'
          description: Successful Response
        "404":
          description: Not Found
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Sandbox - Single Tag Document
      tags:
      - Sandbox Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/sandbox/usercollection/tag/2-5daccc095220cc5493a4e9c2b681ca941e' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/sandbox/usercollection/tag/2-5daccc095220cc5493a4e9c2b681ca941e\n\
          headers = { \n  'Authorization': 'Bearer <token>' \n}\nresponse = requests.request('GET',\
          \ url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/sandbox/usercollection/tag/2-5daccc095220cc5493a4e9c2b681ca941e',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/sandbox/usercollection/tag/2-5daccc095220cc5493a4e9c2b681ca941e\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/usercollection/enhanced_tag/{document_id}:
    get:
      operationId: Single_enhanced_tag_Document_v2_usercollection_enhanced_tag__document_id__get
      parameters:
      - explode: false
        in: path
        name: document_id
        required: true
        schema:
          title: Document Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnhancedTagModel'
          description: Successful Response
        "404":
          description: Not Found
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Single Enhanced Tag Document
      tags:
      - Enhanced Tag Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/usercollection/enhanced_tag/2-5daccc095220cc5493a4e9c2b681ca941e' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/usercollection/enhanced_tag/2-5daccc095220cc5493a4e9c2b681ca941e\n\
          headers = { \n  'Authorization': 'Bearer <token>' \n}\nresponse = requests.request('GET',\
          \ url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/usercollection/enhanced_tag/2-5daccc095220cc5493a4e9c2b681ca941e',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/usercollection/enhanced_tag/2-5daccc095220cc5493a4e9c2b681ca941e\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/sandbox/usercollection/enhanced_tag/{document_id}:
    get:
      operationId: Sandbox___Single_enhanced_tag_Document_v2_sandbox_usercollection_enhanced_tag__document_id__get
      parameters:
      - explode: false
        in: path
        name: document_id
        required: true
        schema:
          title: Document Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnhancedTagModel'
          description: Successful Response
        "404":
          description: Not Found
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Sandbox - Single Enhanced Tag Document
      tags:
      - Sandbox Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/sandbox/usercollection/enhanced_tag/2-5daccc095220cc5493a4e9c2b681ca941e' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/sandbox/usercollection/enhanced_tag/2-5daccc095220cc5493a4e9c2b681ca941e\n\
          headers = { \n  'Authorization': 'Bearer <token>' \n}\nresponse = requests.request('GET',\
          \ url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/sandbox/usercollection/enhanced_tag/2-5daccc095220cc5493a4e9c2b681ca941e',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/sandbox/usercollection/enhanced_tag/2-5daccc095220cc5493a4e9c2b681ca941e\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/usercollection/workout/{document_id}:
    get:
      operationId: Single_workout_Document_v2_usercollection_workout__document_id__get
      parameters:
      - explode: false
        in: path
        name: document_id
        required: true
        schema:
          title: Document Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkoutModel'
          description: Successful Response
        "404":
          description: Not Found
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Single Workout Document
      tags:
      - Workout Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/usercollection/workout/2-5daccc095220cc5493a4e9c2b681ca941e' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/usercollection/workout/2-5daccc095220cc5493a4e9c2b681ca941e\n\
          headers = { \n  'Authorization': 'Bearer <token>' \n}\nresponse = requests.request('GET',\
          \ url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/usercollection/workout/2-5daccc095220cc5493a4e9c2b681ca941e',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/usercollection/workout/2-5daccc095220cc5493a4e9c2b681ca941e\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/sandbox/usercollection/workout/{document_id}:
    get:
      operationId: Sandbox___Single_workout_Document_v2_sandbox_usercollection_workout__document_id__get
      parameters:
      - explode: false
        in: path
        name: document_id
        required: true
        schema:
          title: Document Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkoutModel'
          description: Successful Response
        "404":
          description: Not Found
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Sandbox - Single Workout Document
      tags:
      - Sandbox Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/sandbox/usercollection/workout/2-5daccc095220cc5493a4e9c2b681ca941e' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/sandbox/usercollection/workout/2-5daccc095220cc5493a4e9c2b681ca941e\n\
          headers = { \n  'Authorization': 'Bearer <token>' \n}\nresponse = requests.request('GET',\
          \ url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/sandbox/usercollection/workout/2-5daccc095220cc5493a4e9c2b681ca941e',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/sandbox/usercollection/workout/2-5daccc095220cc5493a4e9c2b681ca941e\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/usercollection/session/{document_id}:
    get:
      operationId: Single_session_Document_v2_usercollection_session__document_id__get
      parameters:
      - explode: false
        in: path
        name: document_id
        required: true
        schema:
          title: Document Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: Successful Response
        "404":
          description: Not Found
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Single Session Document
      tags:
      - Session Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/usercollection/session/2-5daccc095220cc5493a4e9c2b681ca941e' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/usercollection/session/2-5daccc095220cc5493a4e9c2b681ca941e\n\
          headers = { \n  'Authorization': 'Bearer <token>' \n}\nresponse = requests.request('GET',\
          \ url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/usercollection/session/2-5daccc095220cc5493a4e9c2b681ca941e',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/usercollection/session/2-5daccc095220cc5493a4e9c2b681ca941e\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/sandbox/usercollection/session/{document_id}:
    get:
      operationId: Sandbox___Single_session_Document_v2_sandbox_usercollection_session__document_id__get
      parameters:
      - explode: false
        in: path
        name: document_id
        required: true
        schema:
          title: Document Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: Successful Response
        "404":
          description: Not Found
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Sandbox - Single Session Document
      tags:
      - Sandbox Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/sandbox/usercollection/session/2-5daccc095220cc5493a4e9c2b681ca941e' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/sandbox/usercollection/session/2-5daccc095220cc5493a4e9c2b681ca941e\n\
          headers = { \n  'Authorization': 'Bearer <token>' \n}\nresponse = requests.request('GET',\
          \ url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/sandbox/usercollection/session/2-5daccc095220cc5493a4e9c2b681ca941e',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/sandbox/usercollection/session/2-5daccc095220cc5493a4e9c2b681ca941e\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/usercollection/daily_activity/{document_id}:
    get:
      operationId: Single_daily_activity_Document_v2_usercollection_daily_activity__document_id__get
      parameters:
      - explode: false
        in: path
        name: document_id
        required: true
        schema:
          title: Document Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DailyActivityModel'
          description: Successful Response
        "404":
          description: Not Found
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Single Daily Activity Document
      tags:
      - Daily Activity Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/usercollection/daily_activity/2-5daccc095220cc5493a4e9c2b681ca941e' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/usercollection/daily_activity/2-5daccc095220cc5493a4e9c2b681ca941e\n\
          headers = { \n  'Authorization': 'Bearer <token>' \n}\nresponse = requests.request('GET',\
          \ url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/usercollection/daily_activity/2-5daccc095220cc5493a4e9c2b681ca941e',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/usercollection/daily_activity/2-5daccc095220cc5493a4e9c2b681ca941e\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/sandbox/usercollection/daily_activity/{document_id}:
    get:
      operationId: Sandbox___Single_daily_activity_Document_v2_sandbox_usercollection_daily_activity__document_id__get
      parameters:
      - explode: false
        in: path
        name: document_id
        required: true
        schema:
          title: Document Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DailyActivityModel'
          description: Successful Response
        "404":
          description: Not Found
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Sandbox - Single Daily Activity Document
      tags:
      - Sandbox Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/sandbox/usercollection/daily_activity/2-5daccc095220cc5493a4e9c2b681ca941e' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/sandbox/usercollection/daily_activity/2-5daccc095220cc5493a4e9c2b681ca941e\n\
          headers = { \n  'Authorization': 'Bearer <token>' \n}\nresponse = requests.request('GET',\
          \ url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/sandbox/usercollection/daily_activity/2-5daccc095220cc5493a4e9c2b681ca941e',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/sandbox/usercollection/daily_activity/2-5daccc095220cc5493a4e9c2b681ca941e\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/usercollection/daily_sleep/{document_id}:
    get:
      operationId: Single_daily_sleep_Document_v2_usercollection_daily_sleep__document_id__get
      parameters:
      - explode: false
        in: path
        name: document_id
        required: true
        schema:
          title: Document Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DailySleepModel'
          description: Successful Response
        "404":
          description: Not Found
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Single Daily Sleep Document
      tags:
      - Daily Sleep Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/usercollection/daily_sleep/2-5daccc095220cc5493a4e9c2b681ca941e' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/usercollection/daily_sleep/2-5daccc095220cc5493a4e9c2b681ca941e\n\
          headers = { \n  'Authorization': 'Bearer <token>' \n}\nresponse = requests.request('GET',\
          \ url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/usercollection/daily_sleep/2-5daccc095220cc5493a4e9c2b681ca941e',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/usercollection/daily_sleep/2-5daccc095220cc5493a4e9c2b681ca941e\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/sandbox/usercollection/daily_sleep/{document_id}:
    get:
      operationId: Sandbox___Single_daily_sleep_Document_v2_sandbox_usercollection_daily_sleep__document_id__get
      parameters:
      - explode: false
        in: path
        name: document_id
        required: true
        schema:
          title: Document Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DailySleepModel'
          description: Successful Response
        "404":
          description: Not Found
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Sandbox - Single Daily Sleep Document
      tags:
      - Sandbox Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/sandbox/usercollection/daily_sleep/2-5daccc095220cc5493a4e9c2b681ca941e' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/sandbox/usercollection/daily_sleep/2-5daccc095220cc5493a4e9c2b681ca941e\n\
          headers = { \n  'Authorization': 'Bearer <token>' \n}\nresponse = requests.request('GET',\
          \ url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/sandbox/usercollection/daily_sleep/2-5daccc095220cc5493a4e9c2b681ca941e',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/sandbox/usercollection/daily_sleep/2-5daccc095220cc5493a4e9c2b681ca941e\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/usercollection/daily_spo2/{document_id}:
    get:
      operationId: Single_daily_spo2_Document_v2_usercollection_daily_spo2__document_id__get
      parameters:
      - explode: false
        in: path
        name: document_id
        required: true
        schema:
          title: Document Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DailySpO2Model'
          description: Successful Response
        "404":
          description: Not Found
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Single Daily Spo2 Document
      tags:
      - Daily Spo2 Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/usercollection/daily_spo2/2-5daccc095220cc5493a4e9c2b681ca941e' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/usercollection/daily_spo2/2-5daccc095220cc5493a4e9c2b681ca941e\n\
          headers = { \n  'Authorization': 'Bearer <token>' \n}\nresponse = requests.request('GET',\
          \ url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/usercollection/daily_spo2/2-5daccc095220cc5493a4e9c2b681ca941e',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/usercollection/daily_spo2/2-5daccc095220cc5493a4e9c2b681ca941e\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/sandbox/usercollection/daily_spo2/{document_id}:
    get:
      operationId: Sandbox___Single_daily_spo2_Document_v2_sandbox_usercollection_daily_spo2__document_id__get
      parameters:
      - explode: false
        in: path
        name: document_id
        required: true
        schema:
          title: Document Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DailySpO2Model'
          description: Successful Response
        "404":
          description: Not Found
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Sandbox - Single Daily Spo2 Document
      tags:
      - Sandbox Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/sandbox/usercollection/daily_spo2/2-5daccc095220cc5493a4e9c2b681ca941e' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/sandbox/usercollection/daily_spo2/2-5daccc095220cc5493a4e9c2b681ca941e\n\
          headers = { \n  'Authorization': 'Bearer <token>' \n}\nresponse = requests.request('GET',\
          \ url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/sandbox/usercollection/daily_spo2/2-5daccc095220cc5493a4e9c2b681ca941e',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/sandbox/usercollection/daily_spo2/2-5daccc095220cc5493a4e9c2b681ca941e\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/usercollection/daily_readiness/{document_id}:
    get:
      operationId: Single_daily_readiness_Document_v2_usercollection_daily_readiness__document_id__get
      parameters:
      - explode: false
        in: path
        name: document_id
        required: true
        schema:
          title: Document Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DailyReadinessModel'
          description: Successful Response
        "404":
          description: Not Found
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Single Daily Readiness Document
      tags:
      - Daily Readiness Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/usercollection/daily_readiness/2-5daccc095220cc5493a4e9c2b681ca941e' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/usercollection/daily_readiness/2-5daccc095220cc5493a4e9c2b681ca941e\n\
          headers = { \n  'Authorization': 'Bearer <token>' \n}\nresponse = requests.request('GET',\
          \ url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/usercollection/daily_readiness/2-5daccc095220cc5493a4e9c2b681ca941e',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/usercollection/daily_readiness/2-5daccc095220cc5493a4e9c2b681ca941e\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/sandbox/usercollection/daily_readiness/{document_id}:
    get:
      operationId: Sandbox___Single_daily_readiness_Document_v2_sandbox_usercollection_daily_readiness__document_id__get
      parameters:
      - explode: false
        in: path
        name: document_id
        required: true
        schema:
          title: Document Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DailyReadinessModel'
          description: Successful Response
        "404":
          description: Not Found
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Sandbox - Single Daily Readiness Document
      tags:
      - Sandbox Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/sandbox/usercollection/daily_readiness/2-5daccc095220cc5493a4e9c2b681ca941e' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/sandbox/usercollection/daily_readiness/2-5daccc095220cc5493a4e9c2b681ca941e\n\
          headers = { \n  'Authorization': 'Bearer <token>' \n}\nresponse = requests.request('GET',\
          \ url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/sandbox/usercollection/daily_readiness/2-5daccc095220cc5493a4e9c2b681ca941e',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/sandbox/usercollection/daily_readiness/2-5daccc095220cc5493a4e9c2b681ca941e\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/usercollection/sleep/{document_id}:
    get:
      operationId: Single_sleep_Document_v2_usercollection_sleep__document_id__get
      parameters:
      - explode: false
        in: path
        name: document_id
        required: true
        schema:
          title: Document Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SleepModel'
          description: Successful Response
        "404":
          description: Not Found
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Single Sleep Document
      tags:
      - Sleep Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/usercollection/sleep/2-5daccc095220cc5493a4e9c2b681ca941e' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/usercollection/sleep/2-5daccc095220cc5493a4e9c2b681ca941e\n\
          headers = { \n  'Authorization': 'Bearer <token>' \n}\nresponse = requests.request('GET',\
          \ url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/usercollection/sleep/2-5daccc095220cc5493a4e9c2b681ca941e',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/usercollection/sleep/2-5daccc095220cc5493a4e9c2b681ca941e\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/sandbox/usercollection/sleep/{document_id}:
    get:
      operationId: Sandbox___Single_sleep_Document_v2_sandbox_usercollection_sleep__document_id__get
      parameters:
      - explode: false
        in: path
        name: document_id
        required: true
        schema:
          title: Document Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SleepModel'
          description: Successful Response
        "404":
          description: Not Found
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Sandbox - Single Sleep Document
      tags:
      - Sandbox Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/sandbox/usercollection/sleep/2-5daccc095220cc5493a4e9c2b681ca941e' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/sandbox/usercollection/sleep/2-5daccc095220cc5493a4e9c2b681ca941e\n\
          headers = { \n  'Authorization': 'Bearer <token>' \n}\nresponse = requests.request('GET',\
          \ url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/sandbox/usercollection/sleep/2-5daccc095220cc5493a4e9c2b681ca941e',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/sandbox/usercollection/sleep/2-5daccc095220cc5493a4e9c2b681ca941e\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/usercollection/sleep_time/{document_id}:
    get:
      operationId: Single_sleep_time_Document_v2_usercollection_sleep_time__document_id__get
      parameters:
      - explode: false
        in: path
        name: document_id
        required: true
        schema:
          title: Document Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SleepTimeModel'
          description: Successful Response
        "404":
          description: Not Found
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Single Sleep Time Document
      tags:
      - Sleep Time Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/usercollection/sleep_time/2-5daccc095220cc5493a4e9c2b681ca941e' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/usercollection/sleep_time/2-5daccc095220cc5493a4e9c2b681ca941e\n\
          headers = { \n  'Authorization': 'Bearer <token>' \n}\nresponse = requests.request('GET',\
          \ url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/usercollection/sleep_time/2-5daccc095220cc5493a4e9c2b681ca941e',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/usercollection/sleep_time/2-5daccc095220cc5493a4e9c2b681ca941e\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/sandbox/usercollection/sleep_time/{document_id}:
    get:
      operationId: Sandbox___Single_sleep_time_Document_v2_sandbox_usercollection_sleep_time__document_id__get
      parameters:
      - explode: false
        in: path
        name: document_id
        required: true
        schema:
          title: Document Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SleepTimeModel'
          description: Successful Response
        "404":
          description: Not Found
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Sandbox - Single Sleep Time Document
      tags:
      - Sandbox Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/sandbox/usercollection/sleep_time/2-5daccc095220cc5493a4e9c2b681ca941e' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/sandbox/usercollection/sleep_time/2-5daccc095220cc5493a4e9c2b681ca941e\n\
          headers = { \n  'Authorization': 'Bearer <token>' \n}\nresponse = requests.request('GET',\
          \ url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/sandbox/usercollection/sleep_time/2-5daccc095220cc5493a4e9c2b681ca941e',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/sandbox/usercollection/sleep_time/2-5daccc095220cc5493a4e9c2b681ca941e\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/usercollection/rest_mode_period/{document_id}:
    get:
      operationId: Single_rest_mode_period_Document_v2_usercollection_rest_mode_period__document_id__get
      parameters:
      - explode: false
        in: path
        name: document_id
        required: true
        schema:
          title: Document Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestModePeriodModel'
          description: Successful Response
        "404":
          description: Not Found
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Single Rest Mode Period Document
      tags:
      - Rest Mode Period Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/usercollection/rest_mode_period/2-5daccc095220cc5493a4e9c2b681ca941e' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/usercollection/rest_mode_period/2-5daccc095220cc5493a4e9c2b681ca941e\n\
          headers = { \n  'Authorization': 'Bearer <token>' \n}\nresponse = requests.request('GET',\
          \ url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/usercollection/rest_mode_period/2-5daccc095220cc5493a4e9c2b681ca941e',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/usercollection/rest_mode_period/2-5daccc095220cc5493a4e9c2b681ca941e\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/sandbox/usercollection/rest_mode_period/{document_id}:
    get:
      operationId: Sandbox___Single_rest_mode_period_Document_v2_sandbox_usercollection_rest_mode_period__document_id__get
      parameters:
      - explode: false
        in: path
        name: document_id
        required: true
        schema:
          title: Document Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestModePeriodModel'
          description: Successful Response
        "404":
          description: Not Found
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Sandbox - Single Rest Mode Period Document
      tags:
      - Sandbox Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/sandbox/usercollection/rest_mode_period/2-5daccc095220cc5493a4e9c2b681ca941e' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/sandbox/usercollection/rest_mode_period/2-5daccc095220cc5493a4e9c2b681ca941e\n\
          headers = { \n  'Authorization': 'Bearer <token>' \n}\nresponse = requests.request('GET',\
          \ url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/sandbox/usercollection/rest_mode_period/2-5daccc095220cc5493a4e9c2b681ca941e',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/sandbox/usercollection/rest_mode_period/2-5daccc095220cc5493a4e9c2b681ca941e\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/usercollection/ring_configuration/{document_id}:
    get:
      operationId: Single_ring_configuration_Document_v2_usercollection_ring_configuration__document_id__get
      parameters:
      - explode: false
        in: path
        name: document_id
        required: true
        schema:
          title: Document Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RingConfigurationModel'
          description: Successful Response
        "404":
          description: Not Found
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Single Ring Configuration Document
      tags:
      - Ring Configuration Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/usercollection/ring_configuration/2-5daccc095220cc5493a4e9c2b681ca941e' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/usercollection/ring_configuration/2-5daccc095220cc5493a4e9c2b681ca941e\n\
          headers = { \n  'Authorization': 'Bearer <token>' \n}\nresponse = requests.request('GET',\
          \ url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/usercollection/ring_configuration/2-5daccc095220cc5493a4e9c2b681ca941e',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/usercollection/ring_configuration/2-5daccc095220cc5493a4e9c2b681ca941e\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/sandbox/usercollection/ring_configuration/{document_id}:
    get:
      operationId: Sandbox___Single_ring_configuration_Document_v2_sandbox_usercollection_ring_configuration__document_id__get
      parameters:
      - explode: false
        in: path
        name: document_id
        required: true
        schema:
          title: Document Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RingConfigurationModel'
          description: Successful Response
        "404":
          description: Not Found
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Sandbox - Single Ring Configuration Document
      tags:
      - Sandbox Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/sandbox/usercollection/ring_configuration/2-5daccc095220cc5493a4e9c2b681ca941e' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/sandbox/usercollection/ring_configuration/2-5daccc095220cc5493a4e9c2b681ca941e\n\
          headers = { \n  'Authorization': 'Bearer <token>' \n}\nresponse = requests.request('GET',\
          \ url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/sandbox/usercollection/ring_configuration/2-5daccc095220cc5493a4e9c2b681ca941e',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/sandbox/usercollection/ring_configuration/2-5daccc095220cc5493a4e9c2b681ca941e\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/usercollection/daily_stress/{document_id}:
    get:
      operationId: Single_daily_stress_Document_v2_usercollection_daily_stress__document_id__get
      parameters:
      - explode: false
        in: path
        name: document_id
        required: true
        schema:
          title: Document Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DailyStressModel'
          description: Successful Response
        "404":
          description: Not Found
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Single Daily Stress Document
      tags:
      - Daily Stress Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/usercollection/daily_stress/2-5daccc095220cc5493a4e9c2b681ca941e' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/usercollection/daily_stress/2-5daccc095220cc5493a4e9c2b681ca941e\n\
          headers = { \n  'Authorization': 'Bearer <token>' \n}\nresponse = requests.request('GET',\
          \ url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/usercollection/daily_stress/2-5daccc095220cc5493a4e9c2b681ca941e',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/usercollection/daily_stress/2-5daccc095220cc5493a4e9c2b681ca941e\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/sandbox/usercollection/daily_stress/{document_id}:
    get:
      operationId: Sandbox___Single_daily_stress_Document_v2_sandbox_usercollection_daily_stress__document_id__get
      parameters:
      - explode: false
        in: path
        name: document_id
        required: true
        schema:
          title: Document Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DailyStressModel'
          description: Successful Response
        "404":
          description: Not Found
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Sandbox - Single Daily Stress Document
      tags:
      - Sandbox Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/sandbox/usercollection/daily_stress/2-5daccc095220cc5493a4e9c2b681ca941e' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/sandbox/usercollection/daily_stress/2-5daccc095220cc5493a4e9c2b681ca941e\n\
          headers = { \n  'Authorization': 'Bearer <token>' \n}\nresponse = requests.request('GET',\
          \ url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/sandbox/usercollection/daily_stress/2-5daccc095220cc5493a4e9c2b681ca941e',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/sandbox/usercollection/daily_stress/2-5daccc095220cc5493a4e9c2b681ca941e\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/usercollection/daily_resilience/{document_id}:
    get:
      operationId: Single_daily_resilience_Document_v2_usercollection_daily_resilience__document_id__get
      parameters:
      - explode: false
        in: path
        name: document_id
        required: true
        schema:
          title: Document Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DailyResilienceModel'
          description: Successful Response
        "404":
          description: Not Found
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Single Daily Resilience Document
      tags:
      - Daily Resilience Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/usercollection/daily_resilience/2-5daccc095220cc5493a4e9c2b681ca941e' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/usercollection/daily_resilience/2-5daccc095220cc5493a4e9c2b681ca941e\n\
          headers = { \n  'Authorization': 'Bearer <token>' \n}\nresponse = requests.request('GET',\
          \ url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/usercollection/daily_resilience/2-5daccc095220cc5493a4e9c2b681ca941e',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/usercollection/daily_resilience/2-5daccc095220cc5493a4e9c2b681ca941e\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/sandbox/usercollection/daily_resilience/{document_id}:
    get:
      operationId: Sandbox___Single_daily_resilience_Document_v2_sandbox_usercollection_daily_resilience__document_id__get
      parameters:
      - explode: false
        in: path
        name: document_id
        required: true
        schema:
          title: Document Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DailyResilienceModel'
          description: Successful Response
        "404":
          description: Not Found
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Sandbox - Single Daily Resilience Document
      tags:
      - Sandbox Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/sandbox/usercollection/daily_resilience/2-5daccc095220cc5493a4e9c2b681ca941e' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/sandbox/usercollection/daily_resilience/2-5daccc095220cc5493a4e9c2b681ca941e\n\
          headers = { \n  'Authorization': 'Bearer <token>' \n}\nresponse = requests.request('GET',\
          \ url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/sandbox/usercollection/daily_resilience/2-5daccc095220cc5493a4e9c2b681ca941e',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/sandbox/usercollection/daily_resilience/2-5daccc095220cc5493a4e9c2b681ca941e\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/usercollection/daily_cardiovascular_age/{document_id}:
    get:
      operationId: Single_daily_cardiovascular_age_Document_v2_usercollection_daily_cardiovascular_age__document_id__get
      parameters:
      - explode: false
        in: path
        name: document_id
        required: true
        schema:
          title: Document Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DailyCardiovascularAgeModel'
          description: Successful Response
        "404":
          description: Not Found
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Single Daily Cardiovascular Age Document
      tags:
      - Daily Cardiovascular Age Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/usercollection/daily_cardiovascular_age/2-5daccc095220cc5493a4e9c2b681ca941e' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/usercollection/daily_cardiovascular_age/2-5daccc095220cc5493a4e9c2b681ca941e\n\
          headers = { \n  'Authorization': 'Bearer <token>' \n}\nresponse = requests.request('GET',\
          \ url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/usercollection/daily_cardiovascular_age/2-5daccc095220cc5493a4e9c2b681ca941e',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/usercollection/daily_cardiovascular_age/2-5daccc095220cc5493a4e9c2b681ca941e\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/sandbox/usercollection/daily_cardiovascular_age/{document_id}:
    get:
      operationId: Sandbox___Single_daily_cardiovascular_age_Document_v2_sandbox_usercollection_daily_cardiovascular_age__document_id__get
      parameters:
      - explode: false
        in: path
        name: document_id
        required: true
        schema:
          title: Document Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DailyCardiovascularAgeModel'
          description: Successful Response
        "404":
          description: Not Found
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Sandbox - Single Daily Cardiovascular Age Document
      tags:
      - Sandbox Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/sandbox/usercollection/daily_cardiovascular_age/2-5daccc095220cc5493a4e9c2b681ca941e' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/sandbox/usercollection/daily_cardiovascular_age/2-5daccc095220cc5493a4e9c2b681ca941e\n\
          headers = { \n  'Authorization': 'Bearer <token>' \n}\nresponse = requests.request('GET',\
          \ url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/sandbox/usercollection/daily_cardiovascular_age/2-5daccc095220cc5493a4e9c2b681ca941e',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/sandbox/usercollection/daily_cardiovascular_age/2-5daccc095220cc5493a4e9c2b681ca941e\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/usercollection/vO2_max/{document_id}:
    get:
      operationId: Single_vO2_max_Document_v2_usercollection_vO2_max__document_id__get
      parameters:
      - explode: false
        in: path
        name: document_id
        required: true
        schema:
          title: Document Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VO2MaxModel'
          description: Successful Response
        "404":
          description: Not Found
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Single Vo2 Max Document
      tags:
      - VO2 Max Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/usercollection/vO2_max/2-5daccc095220cc5493a4e9c2b681ca941e' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/usercollection/vO2_max/2-5daccc095220cc5493a4e9c2b681ca941e\n\
          headers = { \n  'Authorization': 'Bearer <token>' \n}\nresponse = requests.request('GET',\
          \ url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/usercollection/vO2_max/2-5daccc095220cc5493a4e9c2b681ca941e',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/usercollection/vO2_max/2-5daccc095220cc5493a4e9c2b681ca941e\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/sandbox/usercollection/vO2_max/{document_id}:
    get:
      operationId: Sandbox___Single_vO2_max_Document_v2_sandbox_usercollection_vO2_max__document_id__get
      parameters:
      - explode: false
        in: path
        name: document_id
        required: true
        schema:
          title: Document Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VO2MaxModel'
          description: Successful Response
        "404":
          description: Not Found
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Sandbox - Single Vo2 Max Document
      tags:
      - Sandbox Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request GET 'https://api.ouraring.com/v2/sandbox/usercollection/vO2_max/2-5daccc095220cc5493a4e9c2b681ca941e' \
          --header 'Authorization: Bearer <token>'
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/sandbox/usercollection/vO2_max/2-5daccc095220cc5493a4e9c2b681ca941e\n\
          headers = { \n  'Authorization': 'Bearer <token>' \n}\nresponse = requests.request('GET',\
          \ url, headers=headers, params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/sandbox/usercollection/vO2_max/2-5daccc095220cc5493a4e9c2b681ca941e',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/sandbox/usercollection/vO2_max/2-5daccc095220cc5493a4e9c2b681ca941e\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/webhook/subscription:
    get:
      operationId: list_webhook_subscriptions_v2_webhook_subscription_get
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/WebhookSubscriptionModel'
                type: array
          description: Successful Response
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: List Webhook Subscriptions
      tags:
      - Webhook Subscription Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: "curl --location --request GET 'https://api.ouraring.com/v2/webhook/subscription'\
          \ --header 'x-client-id: client-id' --header 'x-client-secret: client-secret'"
    post:
      operationId: create_webhook_subscription_v2_webhook_subscription_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWebhookSubscriptionRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookSubscriptionModel'
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Create Webhook Subscription
      tags:
      - Webhook Subscription Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request POST 'https://api.ouraring.com/v2/webhook/subscription' --header 'x-client-id: client-id' --header 'x-client-secret: client-secret' --header 'Content-Type: application/json' --data-raw '{
              "callback_url": "https://my-api/oura/tag/delete",
              "verification_token": "123",
              "event_type": "delete",
              "data_type": "tag"
          }'
  /v2/webhook/subscription/{id}:
    delete:
      operationId: delete_webhook_subscription_v2_webhook_subscription__id__delete
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          title: Id
          type: string
        style: simple
      responses:
        "204":
          description: Successful Response
        "403":
          description: Webhook with specified id does not exist.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Delete Webhook Subscription
      tags:
      - Webhook Subscription Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: "curl --location --request DELETE 'https://api.ouraring.com/v2/webhook/subscription/5d3fe17b-f880-4d93-b9b6-afbfb76c1e78'\
          \ --header 'x-client-id: client-id' --header 'x-client-secret: client-secret'"
    get:
      operationId: get_webhook_subscription_v2_webhook_subscription__id__get
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          title: Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookSubscriptionModel'
          description: Successful Response
        "403":
          description: Webhook with specified id does not exist.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Get Webhook Subscription
      tags:
      - Webhook Subscription Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: "curl --location --request GET 'https://api.ouraring.com/v2/webhook/subscription/5d3fe17b-f880-4d93-b9b6-afbfb76c1e78'\
          \ --header 'x-client-id: client-id' --header 'x-client-secret: client-secret'"
    put:
      operationId: update_webhook_subscription_v2_webhook_subscription__id__put
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          title: Id
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWebhookSubscriptionRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookSubscriptionModel'
          description: Successful Response
        "403":
          description: Webhook with specified id does not exist.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Update Webhook Subscription
      tags:
      - Webhook Subscription Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl --location --request PUT 'https://api.ouraring.com/v2/webhook/subscription/5d3fe17b-f880-4d93-b9b6-afbfb76c1e78' --header 'x-client-id: client-id' --header 'x-client-secret: client-secret' --header 'Content-Type: application/json' --data-raw '{
              "callback_url": "https://my-api/oura/tag/delete",
              "verification_token": "123",
              "event_type": "delete",
              "data_type": "tag"
          }'
  /v2/webhook/subscription/renew/{id}:
    put:
      operationId: renew_webhook_subscription_v2_webhook_subscription_renew__id__put
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          title: Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookSubscriptionModel'
          description: Successful Response
        "403":
          description: Webhook with specified id does not exist.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Renew Webhook Subscription
      tags:
      - Webhook Subscription Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: "curl --location --request PUT 'https://api.ouraring.com/v2/webhook/subscription/renew/5d3fe17b-f880-4d93-b9b6-afbfb76c1e78'\
          \ --header 'x-client-id: client-id' --header 'x-client-secret: client-secret'\
          \ --header 'Content-Type: application/json'"
  /v2/usercollection/heartrate:
    get:
      operationId: Multiple_Heart_Rate_Documents_v2_usercollection_heartrate_get
      parameters:
      - explode: true
        in: query
        name: start_datetime
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
        style: form
      - explode: true
        in: query
        name: end_datetime
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
        style: form
      - explode: true
        in: query
        name: next_token
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeSeriesResponse_HeartRateModel_'
          description: Successful Response
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Multiple Heart Rate Documents
      tags:
      - Heart Rate Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: "# The '+' symbol in the timezone must be escaped to `%2B` if included.\
          \ \ncurl --location --request GET 'https://api.ouraring.com/v2/usercollection/heartrate?start_datetime=2021-11-01T00:00:00-08:00&end_datetime=2021-12-01T00:00:00-08:00'\
          \ \\ \n--header 'Authorization: Bearer <token>'"
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/usercollection/heartrate'\
          \ \nparams={ \n    'start_datetime': '2021-11-01T00:00:00-08:00', \n   \
          \ 'end_datetime': '2021-12-01T00:00:00-08:00' \n} \nheaders = { \n  'Authorization':\
          \ 'Bearer <token>' \n}\nresponse = requests.request('GET', url, headers=headers,\
          \ params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/usercollection/heartrate?start_datetime=2021-11-01T00:00:00-08:00&end_datetime=2021-12-01T00:00:00-08:00',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/usercollection/heartrate?start_datetime=2021-11-01T00:00:00-08:00&end_datetime=2021-12-01T00:00:00-08:00\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
  /v2/sandbox/usercollection/heartrate:
    get:
      operationId: Sandbox___Multiple_heartrate_Documents_v2_sandbox_usercollection_heartrate_get
      parameters:
      - explode: true
        in: query
        name: start_datetime
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
        style: form
      - explode: true
        in: query
        name: end_datetime
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
        style: form
      - explode: true
        in: query
        name: next_token
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeSeriesResponse_HeartRateModel_'
          description: Successful Response
        "400":
          description: Client Exception
        "401":
          description: "Unauthorized access exception. Usually means the access token\
            \ is expired, malformed or revoked."
        "403":
          description: Access forbidden. Usually means the user's subscription to
            Oura has expired and their data is not available via the API.
        "429":
          description: Request Rate Limit Exceeded.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - BearerAuth: []
      - OAuth2: []
      summary: Sandbox - Multiple Heartrate Documents
      tags:
      - Sandbox Routes
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: "# The '+' symbol in the timezone must be escaped to `%2B` if included.\
          \ \ncurl --location --request GET 'https://api.ouraring.com/v2/sandbox/usercollection/heartrate?start_datetime=2021-11-01T00:00:00-08:00&end_datetime=2021-12-01T00:00:00-08:00'\
          \ \\ \n--header 'Authorization: Bearer <token>'"
      - lang: Python
        source: "import requests \nurl = 'https://api.ouraring.com/v2/sandbox/usercollection/heartrate'\
          \ \nparams={ \n    'start_datetime': '2021-11-01T00:00:00-08:00', \n   \
          \ 'end_datetime': '2021-12-01T00:00:00-08:00' \n} \nheaders = { \n  'Authorization':\
          \ 'Bearer <token>' \n}\nresponse = requests.request('GET', url, headers=headers,\
          \ params=params) \nprint(response.text)"
        label: Python
      - lang: JavaScript
        source: "var myHeaders = new Headers(); \nmyHeaders.append('Authorization',\
          \ 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers:\
          \ myHeaders, \nfetch('https://api.ouraring.com/v2/sandbox/usercollection/heartrate?start_datetime=2021-11-01T00:00:00-08:00&end_datetime=2021-12-01T00:00:00-08:00',\
          \ requestOptions) \n  .then(response => response.text()) \n  .then(result\
          \ => console.log(result)) \n  .catch(error => console.log('error', error));"
        label: JavaScript
      - lang: Java
        source: "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build();\
          \ \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/sandbox/usercollection/heartrate?start_datetime=2021-11-01T00:00:00-08:00&end_datetime=2021-12-01T00:00:00-08:00\"\
          ) \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer\
          \ <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();"
        label: Java
components:
  schemas:
    ActivityContributors:
      description: Object defining activity score contributors.
      example:
        meet_daily_targets: 5
        stay_active: 7
        recovery_time: 2
        training_frequency: 9
        training_volume: 3
        move_every_hour: 5
      properties:
        meet_daily_targets:
          nullable: true
          type: integer
        move_every_hour:
          nullable: true
          type: integer
        recovery_time:
          nullable: true
          type: integer
        stay_active:
          nullable: true
          type: integer
        training_frequency:
          nullable: true
          type: integer
        training_volume:
          nullable: true
          type: integer
      title: ActivityContributors
    CreateWebhookSubscriptionRequest:
      example:
        callback_url: callback_url
        event_type: create
        data_type: tag
        verification_token: verification_token
      properties:
        callback_url:
          title: Callback Url
          type: string
        verification_token:
          title: Verification Token
          type: string
        event_type:
          $ref: '#/components/schemas/WebhookOperation'
        data_type:
          $ref: '#/components/schemas/ExtApiV2DataType'
      required:
      - callback_url
      - data_type
      - event_type
      - verification_token
      title: CreateWebhookSubscriptionRequest
    DailyActivityModel:
      example:
        active_calories: 6
        sedentary_met_minutes: 9
        high_activity_met_minutes: 4
        inactivity_alerts: 1
        resting_time: 5
        medium_activity_met_minutes: 6
        score: 0
        medium_activity_time: 7
        id: id
        low_activity_met_minutes: 1
        sedentary_time: 9
        met:
          interval: 0.8008281904610115
          items:
          - 6.027456183070403
          - 6.027456183070403
          timestamp: ""
        day: 2000-01-23
        equivalent_walking_distance: 2
        timestamp: ""
        low_activity_time: 1
        class_5_min: class_5_min
        total_calories: 6
        target_calories: 8
        target_meters: 9
        meters_to_target: 1
        steps: 6
        high_activity_time: 7
        non_wear_time: 4
        average_met_minutes: 1.4658129805029452
        contributors:
          meet_daily_targets: 5
          stay_active: 7
          recovery_time: 2
          training_frequency: 9
          training_volume: 3
          move_every_hour: 5
      properties:
        id:
          title: Id
          type: string
        class_5_min:
          nullable: true
          type: string
        score:
          nullable: true
          type: integer
        active_calories:
          description: Active calories expended (in kilocalories)
          title: Active Calories
          type: integer
        average_met_minutes:
          description: Average metabolic equivalent (MET) in minutes
          title: Average Met Minutes
          type: number
        contributors:
          $ref: '#/components/schemas/ActivityContributors'
        equivalent_walking_distance:
          description: Equivalent walking distance (in meters) of energy expenditure
          title: Equivalent Walking Distance
          type: integer
        high_activity_met_minutes:
          description: High activity metabolic equivalent (MET) in minutes
          title: High Activity Met Minutes
          type: integer
        high_activity_time:
          description: High activity metabolic equivalent (MET) in seconds
          title: High Activity Time
          type: integer
        inactivity_alerts:
          description: Number of inactivity alerts received
          title: Inactivity Alerts
          type: integer
        low_activity_met_minutes:
          description: Low activity metabolic equivalent (MET) in minutes
          title: Low Activity Met Minutes
          type: integer
        low_activity_time:
          description: Low activity metabolic equivalent (MET) in seconds
          title: Low Activity Time
          type: integer
        medium_activity_met_minutes:
          description: Medium activity metabolic equivalent (MET) in minutes
          title: Medium Activity Met Minutes
          type: integer
        medium_activity_time:
          description: Medium activity metabolic equivalent (MET) in seconds
          title: Medium Activity Time
          type: integer
        met:
          $ref: '#/components/schemas/SampleModel'
        meters_to_target:
          description: Remaining meters to target (from ```target_meters```
          title: Meters To Target
          type: integer
        non_wear_time:
          description: The time (in seconds) in which the ring was not worn
          title: Non Wear Time
          type: integer
        resting_time:
          description: Resting time (in seconds)
          title: Resting Time
          type: integer
        sedentary_met_minutes:
          description: Sedentary metabolic equivalent (MET) in minutes
          title: Sedentary Met Minutes
          type: integer
        sedentary_time:
          description: Sedentary metabolic equivalent (MET) in seconds
          title: Sedentary Time
          type: integer
        steps:
          description: Total number of steps taken
          title: Steps
          type: integer
        target_calories:
          description: Daily activity target (in kilocalories)
          title: Target Calories
          type: integer
        target_meters:
          description: Daily activity target (in meters)
          title: Target Meters
          type: integer
        total_calories:
          description: Total calories expended (in kilocalories)
          title: Total Calories
          type: integer
        day:
          description: The ```YYYY-MM-DD``` formatted local date indicating when the
            daily activity occurred
          format: date
          title: Day
          type: string
        timestamp:
          allOf:
          - $ref: '#/components/schemas/LocalDateTime'
          description: ISO 8601 formatted local timestamp indicating the start datetime
            of when the daily activity occurred
      required:
      - active_calories
      - average_met_minutes
      - class_5_min
      - contributors
      - day
      - equivalent_walking_distance
      - high_activity_met_minutes
      - high_activity_time
      - id
      - inactivity_alerts
      - low_activity_met_minutes
      - low_activity_time
      - medium_activity_met_minutes
      - medium_activity_time
      - met
      - meters_to_target
      - non_wear_time
      - resting_time
      - score
      - sedentary_met_minutes
      - sedentary_time
      - steps
      - target_calories
      - target_meters
      - timestamp
      - total_calories
      title: DailyActivityModel
    DailyCardiovascularAgeModel:
      example:
        vascular_age: 0
        day: 2000-01-23
      properties:
        day:
          format: date
          title: Day
          type: string
        vascular_age:
          nullable: true
          type: integer
      required:
      - day
      - vascular_age
      title: DailyCardiovascularAgeModel
    DailyReadinessModel:
      example:
        score: 0
        temperature_deviation: 6.027456183070403
        temperature_trend_deviation: 1.4658129805029452
        id: id
        contributors: ""
        day: 2000-01-23
        timestamp: ""
      properties:
        id:
          title: Id
          type: string
        contributors:
          allOf:
          - $ref: '#/components/schemas/ReadinessContributors'
          description: Contributors of the daily readiness score.
        day:
          description: Day that the daily readiness belongs to.
          format: date
          title: Day
          type: string
        score:
          nullable: true
          type: integer
        temperature_deviation:
          nullable: true
          type: number
        temperature_trend_deviation:
          nullable: true
          type: number
        timestamp:
          allOf:
          - $ref: '#/components/schemas/LocalDateTime'
          description: Timestamp of the daily readiness.
      required:
      - contributors
      - day
      - id
      - score
      - temperature_deviation
      - temperature_trend_deviation
      - timestamp
      title: DailyReadinessModel
    DailyResilienceModel:
      example:
        level: ""
        id: id
        contributors: ""
        day: 2000-01-23
      properties:
        id:
          title: Id
          type: string
        day:
          description: Day when the resilience record was recorded.
          format: date
          title: Day
          type: string
        contributors:
          allOf:
          - $ref: '#/components/schemas/ResilienceContributors'
          description: Contributors to the resilience score.
        level:
          allOf:
          - $ref: '#/components/schemas/LongTermResilienceLevel'
          description: Resilience level.
      required:
      - contributors
      - day
      - id
      - level
      title: DailyResilienceModel
    DailySleepModel:
      description: Object defining daily sleep.
      example:
        score: 0
        id: id
        contributors: ""
        day: 2000-01-23
        timestamp: ""
      properties:
        id:
          title: Id
          type: string
        contributors:
          allOf:
          - $ref: '#/components/schemas/SleepContributors'
          description: Contributors for the daily sleep score.
        day:
          description: Day that the daily sleep belongs to.
          format: date
          title: Day
          type: string
        score:
          nullable: true
          type: integer
        timestamp:
          allOf:
          - $ref: '#/components/schemas/LocalDateTime'
          description: Timestamp of the daily sleep.
      required:
      - contributors
      - day
      - id
      - score
      - timestamp
      title: DailySleepModel
    DailySpO2AggregatedValuesModel:
      example:
        average: 0.8008281904610115
      properties:
        average:
          description: Average oxygen saturation (SpO2) throughout the night.
          title: Average
          type: number
      required:
      - average
      title: DailySpO2AggregatedValuesModel
    DailySpO2Model:
      example:
        id: id
        day: 2000-01-23
        spo2_percentage:
          average: 0.8008281904610115
      properties:
        id:
          title: Id
          type: string
        day:
          format: date
          title: Day
          type: string
        spo2_percentage:
          $ref: '#/components/schemas/DailySpO2AggregatedValuesModel'
      required:
      - day
      - id
      - spo2_percentage
      title: DailySpO2Model
    DailyStressModel:
      description: Object defining daily stress.
      example:
        stress_high: 0
        recovery_high: 6
        id: id
        day_summary: restored
        day: 2000-01-23
      properties:
        id:
          title: Id
          type: string
        day:
          description: Day that the daily stress belongs to.
          format: date
          title: Day
          type: string
        stress_high:
          nullable: true
          type: integer
        recovery_high:
          nullable: true
          type: integer
        day_summary:
          $ref: '#/components/schemas/DailyStressSummary'
      required:
      - day
      - id
      - recovery_high
      - stress_high
      title: DailyStressModel
    DailyStressSummary:
      description: Possible daily stress summary types.
      enum:
      - restored
      - normal
      - stressful
      title: DailyStressSummary
      type: string
    EnhancedTagModel:
      description: |-
        An EnhancedTagModel maps an ASSATag. An ASSATag in ExtAPIV2 is called a EnhancedTag
        An EnhancedTagModel will be populated by data from an ASSATag
        The fields in the EnhancedTagModel map to fields in an ASSATag
      example:
        end_day: 2000-01-23
        start_time: ""
        custom_name: custom_name
        start_day: 2000-01-23
        end_time: end_time
        comment: comment
        id: id
        tag_type_code: tag_type_code
      properties:
        id:
          title: Id
          type: string
        tag_type_code:
          nullable: true
          type: string
        start_time:
          allOf:
          - $ref: '#/components/schemas/LocalDateTime'
          description: Timestamp of the tag (if no duration) or the start time of
            the tag (with duration).
        end_time:
          title: LocalDateTime
          type: string
        start_day:
          description: Day of the tag (if no duration) or the start day of the tag
            (with duration).
          format: date
          title: Start Day
          type: string
        end_day:
          format: date
          nullable: true
          type: string
        comment:
          nullable: true
          type: string
        custom_name:
          nullable: true
          type: string
      required:
      - id
      - start_day
      - start_time
      title: EnhancedTagModel
    ExtApiV2DataType:
      enum:
      - tag
      - enhanced_tag
      - workout
      - session
      - sleep
      - daily_sleep
      - daily_readiness
      - daily_activity
      - daily_spo2
      - sleep_time
      - rest_mode_period
      - ring_configuration
      - daily_stress
      title: ExtApiV2DataType
      type: string
    HTTPValidationError:
      example:
        detail:
        - msg: msg
          loc:
          - ValidationError_loc_inner
          - ValidationError_loc_inner
          type: type
        - msg: msg
          loc:
          - ValidationError_loc_inner
          - ValidationError_loc_inner
          type: type
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          type: array
      title: HTTPValidationError
    HeartRateModel:
      example:
        source: awake
        bpm: 0
        timestamp: timestamp
      properties:
        bpm:
          title: Bpm
          type: integer
        source:
          $ref: '#/components/schemas/HeartRateSource'
        timestamp:
          title: LocalDateTime
          type: string
      required:
      - bpm
      - source
      - timestamp
      title: HeartRateModel
    HeartRateSource:
      enum:
      - awake
      - rest
      - sleep
      - session
      - live
      - workout
      title: HeartRateSource
      type: string
    LocalDateTime:
      title: LocalDateTime
      type: string
    LocalDateTimeWithMilliseconds:
      title: LocalDateTimeWithMilliseconds
      type: string
    LocalizedDateTime:
      description: ISO 8601 date-time that requires timezone and milliseconds
      title: LocalizedDateTime
      type: string
    LongTermResilienceLevel:
      description: Possible long term resilience level values.
      enum:
      - limited
      - adequate
      - solid
      - strong
      - exceptional
      title: LongTermResilienceLevel
      type: string
    MomentMood:
      description: Possible Moment moods.
      enum:
      - bad
      - worse
      - same
      - good
      - great
      title: MomentMood
      type: string
    MomentType:
      description: Possible Moment types.
      enum:
      - breathing
      - meditation
      - nap
      - relaxation
      - rest
      - body_status
      title: MomentType
      type: string
    MultiDocumentResponse_DailyActivityModel_:
      example:
        data:
        - active_calories: 6
          sedentary_met_minutes: 9
          high_activity_met_minutes: 4
          inactivity_alerts: 1
          resting_time: 5
          medium_activity_met_minutes: 6
          score: 0
          medium_activity_time: 7
          id: id
          low_activity_met_minutes: 1
          sedentary_time: 9
          met:
            interval: 0.8008281904610115
            items:
            - 6.027456183070403
            - 6.027456183070403
            timestamp: ""
          day: 2000-01-23
          equivalent_walking_distance: 2
          timestamp: ""
          low_activity_time: 1
          class_5_min: class_5_min
          total_calories: 6
          target_calories: 8
          target_meters: 9
          meters_to_target: 1
          steps: 6
          high_activity_time: 7
          non_wear_time: 4
          average_met_minutes: 1.4658129805029452
          contributors:
            meet_daily_targets: 5
            stay_active: 7
            recovery_time: 2
            training_frequency: 9
            training_volume: 3
            move_every_hour: 5
        - active_calories: 6
          sedentary_met_minutes: 9
          high_activity_met_minutes: 4
          inactivity_alerts: 1
          resting_time: 5
          medium_activity_met_minutes: 6
          score: 0
          medium_activity_time: 7
          id: id
          low_activity_met_minutes: 1
          sedentary_time: 9
          met:
            interval: 0.8008281904610115
            items:
            - 6.027456183070403
            - 6.027456183070403
            timestamp: ""
          day: 2000-01-23
          equivalent_walking_distance: 2
          timestamp: ""
          low_activity_time: 1
          class_5_min: class_5_min
          total_calories: 6
          target_calories: 8
          target_meters: 9
          meters_to_target: 1
          steps: 6
          high_activity_time: 7
          non_wear_time: 4
          average_met_minutes: 1.4658129805029452
          contributors:
            meet_daily_targets: 5
            stay_active: 7
            recovery_time: 2
            training_frequency: 9
            training_volume: 3
            move_every_hour: 5
        next_token: next_token
      properties:
        data:
          items:
            $ref: '#/components/schemas/DailyActivityModel'
          type: array
        next_token:
          nullable: true
          type: string
      required:
      - data
      - next_token
      title: "MultiDocumentResponse[DailyActivityModel]"
    MultiDocumentResponse_DailyCardiovascularAgeModel_:
      example:
        data:
        - vascular_age: 0
          day: 2000-01-23
        - vascular_age: 0
          day: 2000-01-23
        next_token: next_token
      properties:
        data:
          items:
            $ref: '#/components/schemas/DailyCardiovascularAgeModel'
          type: array
        next_token:
          nullable: true
          type: string
      required:
      - data
      - next_token
      title: "MultiDocumentResponse[DailyCardiovascularAgeModel]"
    MultiDocumentResponse_DailyReadinessModel_:
      example:
        data:
        - score: 0
          temperature_deviation: 6.027456183070403
          temperature_trend_deviation: 1.4658129805029452
          id: id
          contributors: ""
          day: 2000-01-23
          timestamp: ""
        - score: 0
          temperature_deviation: 6.027456183070403
          temperature_trend_deviation: 1.4658129805029452
          id: id
          contributors: ""
          day: 2000-01-23
          timestamp: ""
        next_token: next_token
      properties:
        data:
          items:
            $ref: '#/components/schemas/DailyReadinessModel'
          type: array
        next_token:
          nullable: true
          type: string
      required:
      - data
      - next_token
      title: "MultiDocumentResponse[DailyReadinessModel]"
    MultiDocumentResponse_DailyResilienceModel_:
      example:
        data:
        - level: ""
          id: id
          contributors: ""
          day: 2000-01-23
        - level: ""
          id: id
          contributors: ""
          day: 2000-01-23
        next_token: next_token
      properties:
        data:
          items:
            $ref: '#/components/schemas/DailyResilienceModel'
          type: array
        next_token:
          nullable: true
          type: string
      required:
      - data
      - next_token
      title: "MultiDocumentResponse[DailyResilienceModel]"
    MultiDocumentResponse_DailySleepModel_:
      example:
        data:
        - score: 0
          id: id
          contributors: ""
          day: 2000-01-23
          timestamp: ""
        - score: 0
          id: id
          contributors: ""
          day: 2000-01-23
          timestamp: ""
        next_token: next_token
      properties:
        data:
          items:
            $ref: '#/components/schemas/DailySleepModel'
          type: array
        next_token:
          nullable: true
          type: string
      required:
      - data
      - next_token
      title: "MultiDocumentResponse[DailySleepModel]"
    MultiDocumentResponse_DailySpO2Model_:
      example:
        data:
        - id: id
          day: 2000-01-23
          spo2_percentage:
            average: 0.8008281904610115
        - id: id
          day: 2000-01-23
          spo2_percentage:
            average: 0.8008281904610115
        next_token: next_token
      properties:
        data:
          items:
            $ref: '#/components/schemas/DailySpO2Model'
          type: array
        next_token:
          nullable: true
          type: string
      required:
      - data
      - next_token
      title: "MultiDocumentResponse[DailySpO2Model]"
    MultiDocumentResponse_DailyStressModel_:
      example:
        data:
        - stress_high: 0
          recovery_high: 6
          id: id
          day_summary: restored
          day: 2000-01-23
        - stress_high: 0
          recovery_high: 6
          id: id
          day_summary: restored
          day: 2000-01-23
        next_token: next_token
      properties:
        data:
          items:
            $ref: '#/components/schemas/DailyStressModel'
          type: array
        next_token:
          nullable: true
          type: string
      required:
      - data
      - next_token
      title: "MultiDocumentResponse[DailyStressModel]"
    MultiDocumentResponse_EnhancedTagModel_:
      example:
        data:
        - end_day: 2000-01-23
          start_time: ""
          custom_name: custom_name
          start_day: 2000-01-23
          end_time: end_time
          comment: comment
          id: id
          tag_type_code: tag_type_code
        - end_day: 2000-01-23
          start_time: ""
          custom_name: custom_name
          start_day: 2000-01-23
          end_time: end_time
          comment: comment
          id: id
          tag_type_code: tag_type_code
        next_token: next_token
      properties:
        data:
          items:
            $ref: '#/components/schemas/EnhancedTagModel'
          type: array
        next_token:
          nullable: true
          type: string
      required:
      - data
      - next_token
      title: "MultiDocumentResponse[EnhancedTagModel]"
    MultiDocumentResponse_RestModePeriodModel_:
      example:
        data:
        - end_day: 2000-01-23
          start_time: start_time
          start_day: 2000-01-23
          end_time: end_time
          id: id
          episodes:
          - tags:
            - tags
            - tags
            timestamp: ""
          - tags:
            - tags
            - tags
            timestamp: ""
        - end_day: 2000-01-23
          start_time: start_time
          start_day: 2000-01-23
          end_time: end_time
          id: id
          episodes:
          - tags:
            - tags
            - tags
            timestamp: ""
          - tags:
            - tags
            - tags
            timestamp: ""
        next_token: next_token
      properties:
        data:
          items:
            $ref: '#/components/schemas/RestModePeriodModel'
          type: array
        next_token:
          nullable: true
          type: string
      required:
      - data
      - next_token
      title: "MultiDocumentResponse[RestModePeriodModel]"
    MultiDocumentResponse_RingConfigurationModel_:
      example:
        data:
        - set_up_at: set_up_at
          color: brushed_silver
          size: 0
          hardware_type: gen1
          design: balance
          id: id
          firmware_version: firmware_version
        - set_up_at: set_up_at
          color: brushed_silver
          size: 0
          hardware_type: gen1
          design: balance
          id: id
          firmware_version: firmware_version
        next_token: next_token
      properties:
        data:
          items:
            $ref: '#/components/schemas/RingConfigurationModel'
          type: array
        next_token:
          nullable: true
          type: string
      required:
      - data
      - next_token
      title: "MultiDocumentResponse[RingConfigurationModel]"
    MultiDocumentResponse_SessionModel_:
      example:
        data:
        - mood: bad
          start_datetime: ""
          end_datetime: ""
          heart_rate:
            interval: 0.8008281904610115
            items:
            - 6.027456183070403
            - 6.027456183070403
            timestamp: ""
          id: id
          type: breathing
          day: 2000-01-23
          heart_rate_variability:
            interval: 0.8008281904610115
            items:
            - 6.027456183070403
            - 6.027456183070403
            timestamp: ""
          motion_count:
            interval: 0.8008281904610115
            items:
            - 6.027456183070403
            - 6.027456183070403
            timestamp: ""
        - mood: bad
          start_datetime: ""
          end_datetime: ""
          heart_rate:
            interval: 0.8008281904610115
            items:
            - 6.027456183070403
            - 6.027456183070403
            timestamp: ""
          id: id
          type: breathing
          day: 2000-01-23
          heart_rate_variability:
            interval: 0.8008281904610115
            items:
            - 6.027456183070403
            - 6.027456183070403
            timestamp: ""
          motion_count:
            interval: 0.8008281904610115
            items:
            - 6.027456183070403
            - 6.027456183070403
            timestamp: ""
        next_token: next_token
      properties:
        data:
          items:
            $ref: '#/components/schemas/SessionModel'
          type: array
        next_token:
          nullable: true
          type: string
      required:
      - data
      - next_token
      title: "MultiDocumentResponse[SessionModel]"
    MultiDocumentResponse_SleepModel_:
      example:
        data:
        - average_heart_rate: 6.027456183070403
          sleep_score_delta: 9
          readiness:
            score: 4
            temperature_deviation: 5.025004791520295
            temperature_trend_deviation: 9.965781217890562
            contributors:
              resting_heart_rate: 7
              previous_day_activity: 1
              recovery_index: 6
              body_temperature: 7
              hrv_balance: 1
              sleep_balance: 1
              activity_balance: 4
              previous_night: 1
          rem_sleep_duration: 6
          latency: 7
          time_in_bed: 6
          average_hrv: 1
          restless_periods: 8
          type: deleted
          deep_sleep_duration: 5
          lowest_heart_rate: 3
          id: id
          movement_30_sec: movement_30_sec
          day: 2000-01-23
          bedtime_end: ""
          light_sleep_duration: 9
          sleep_algorithm_version: v1
          efficiency: 2
          period: 2
          heart_rate:
            interval: 0.8008281904610115
            items:
            - 6.027456183070403
            - 6.027456183070403
            timestamp: ""
          low_battery_alert: true
          hrv:
            interval: 0.8008281904610115
            items:
            - 6.027456183070403
            - 6.027456183070403
            timestamp: ""
          total_sleep_duration: 3
          average_breath: 0.8008281904610115
          sleep_phase_5_min: sleep_phase_5_min
          bedtime_start: ""
          readiness_score_delta: 9
          awake_time: 5
        - average_heart_rate: 6.027456183070403
          sleep_score_delta: 9
          readiness:
            score: 4
            temperature_deviation: 5.025004791520295
            temperature_trend_deviation: 9.965781217890562
            contributors:
              resting_heart_rate: 7
              previous_day_activity: 1
              recovery_index: 6
              body_temperature: 7
              hrv_balance: 1
              sleep_balance: 1
              activity_balance: 4
              previous_night: 1
          rem_sleep_duration: 6
          latency: 7
          time_in_bed: 6
          average_hrv: 1
          restless_periods: 8
          type: deleted
          deep_sleep_duration: 5
          lowest_heart_rate: 3
          id: id
          movement_30_sec: movement_30_sec
          day: 2000-01-23
          bedtime_end: ""
          light_sleep_duration: 9
          sleep_algorithm_version: v1
          efficiency: 2
          period: 2
          heart_rate:
            interval: 0.8008281904610115
            items:
            - 6.027456183070403
            - 6.027456183070403
            timestamp: ""
          low_battery_alert: true
          hrv:
            interval: 0.8008281904610115
            items:
            - 6.027456183070403
            - 6.027456183070403
            timestamp: ""
          total_sleep_duration: 3
          average_breath: 0.8008281904610115
          sleep_phase_5_min: sleep_phase_5_min
          bedtime_start: ""
          readiness_score_delta: 9
          awake_time: 5
        next_token: next_token
      properties:
        data:
          items:
            $ref: '#/components/schemas/SleepModel'
          type: array
        next_token:
          nullable: true
          type: string
      required:
      - data
      - next_token
      title: "MultiDocumentResponse[SleepModel]"
    MultiDocumentResponse_SleepTimeModel_:
      example:
        data:
        - recommendation: improve_efficiency
          id: id
          optimal_bedtime:
            end_offset: 6
            day_tz: 0
            start_offset: 1
          day: 2000-01-23
          status: not_enough_nights
        - recommendation: improve_efficiency
          id: id
          optimal_bedtime:
            end_offset: 6
            day_tz: 0
            start_offset: 1
          day: 2000-01-23
          status: not_enough_nights
        next_token: next_token
      properties:
        data:
          items:
            $ref: '#/components/schemas/SleepTimeModel'
          type: array
        next_token:
          nullable: true
          type: string
      required:
      - data
      - next_token
      title: "MultiDocumentResponse[SleepTimeModel]"
    MultiDocumentResponse_TagModel_:
      example:
        data:
        - id: id
          text: text
          day: 2000-01-23
          timestamp: 2000-01-23T04:56:07.000+00:00
          tags:
          - tags
          - tags
        - id: id
          text: text
          day: 2000-01-23
          timestamp: 2000-01-23T04:56:07.000+00:00
          tags:
          - tags
          - tags
        next_token: next_token
      properties:
        data:
          items:
            $ref: '#/components/schemas/TagModel'
          type: array
        next_token:
          nullable: true
          type: string
      required:
      - data
      - next_token
      title: "MultiDocumentResponse[TagModel]"
    MultiDocumentResponse_VO2MaxModel_:
      example:
        data:
        - vo2_max: 0.8008281904610115
          id: id
          day: 2000-01-23
          timestamp: ""
        - vo2_max: 0.8008281904610115
          id: id
          day: 2000-01-23
          timestamp: ""
        next_token: next_token
      properties:
        data:
          items:
            $ref: '#/components/schemas/VO2MaxModel'
          type: array
        next_token:
          nullable: true
          type: string
      required:
      - data
      - next_token
      title: "MultiDocumentResponse[VO2MaxModel]"
    MultiDocumentResponse_WorkoutModel_:
      example:
        data:
        - intensity: easy
          activity: activity
          distance: 6.027456183070403
          end_datetime: ""
          start_datetime: ""
          id: id
          calories: 0.8008281904610115
          label: label
          source: ""
          day: 2000-01-23
        - intensity: easy
          activity: activity
          distance: 6.027456183070403
          end_datetime: ""
          start_datetime: ""
          id: id
          calories: 0.8008281904610115
          label: label
          source: ""
          day: 2000-01-23
        next_token: next_token
      properties:
        data:
          items:
            $ref: '#/components/schemas/WorkoutModel'
          type: array
        next_token:
          nullable: true
          type: string
      required:
      - data
      - next_token
      title: "MultiDocumentResponse[WorkoutModel]"
    PersonalInfoResponse:
      example:
        biological_sex: biological_sex
        weight: 6.027456183070403
        id: id
        age: 0
        email: email
        height: 1.4658129805029452
      properties:
        id:
          title: Id
          type: string
        age:
          nullable: true
          type: integer
        weight:
          nullable: true
          type: number
        height:
          nullable: true
          type: number
        biological_sex:
          nullable: true
          type: string
        email:
          nullable: true
          type: string
      required:
      - id
      title: PersonalInfoResponse
    ReadinessContributors:
      description: Object defining readiness score contributors.
      example:
        resting_heart_rate: 7
        previous_day_activity: 1
        recovery_index: 6
        body_temperature: 7
        hrv_balance: 1
        sleep_balance: 1
        activity_balance: 4
        previous_night: 1
      properties:
        activity_balance:
          nullable: true
          type: integer
        body_temperature:
          nullable: true
          type: integer
        hrv_balance:
          nullable: true
          type: integer
        previous_day_activity:
          nullable: true
          type: integer
        previous_night:
          nullable: true
          type: integer
        recovery_index:
          nullable: true
          type: integer
        resting_heart_rate:
          nullable: true
          type: integer
        sleep_balance:
          nullable: true
          type: integer
      required:
      - activity_balance
      - body_temperature
      - hrv_balance
      - previous_day_activity
      - previous_night
      - recovery_index
      - resting_heart_rate
      - sleep_balance
      title: ReadinessContributors
    ReadinessSummary:
      example:
        score: 4
        temperature_deviation: 5.025004791520295
        temperature_trend_deviation: 9.965781217890562
        contributors:
          resting_heart_rate: 7
          previous_day_activity: 1
          recovery_index: 6
          body_temperature: 7
          hrv_balance: 1
          sleep_balance: 1
          activity_balance: 4
          previous_night: 1
      properties:
        contributors:
          $ref: '#/components/schemas/ReadinessContributors'
        score:
          nullable: true
          type: integer
        temperature_deviation:
          nullable: true
          type: number
        temperature_trend_deviation:
          nullable: true
          type: number
      required:
      - contributors
      title: ReadinessSummary
    ResilienceContributors:
      properties:
        sleep_recovery:
          description: "Sleep recovery contributor to the resilience score. Range:\
            \ [0, 100]"
          title: Sleep Recovery
          type: number
        daytime_recovery:
          description: "Daytime recovery contributor to the resilience score. Range:\
            \ [0, 100]"
          title: Daytime Recovery
          type: number
        stress:
          description: "Stress contributor to the resilience score. Range: [0, 100]"
          title: Stress
          type: number
      required:
      - daytime_recovery
      - sleep_recovery
      - stress
      title: ResilienceContributors
    RestModeEpisode:
      description: Object defining a Rest Mode episode.
      example:
        tags:
        - tags
        - tags
        timestamp: ""
      properties:
        tags:
          description: Tags selected for the episode.
          items:
            type: string
          type: array
        timestamp:
          allOf:
          - $ref: '#/components/schemas/LocalizedDateTime'
          description: Timestamp indicating when the episode occurred.
          title: ""
      required:
      - tags
      - timestamp
      title: RestModeEpisode
    RestModePeriodModel:
      description: Object contains information about rest mode episode.
      example:
        end_day: 2000-01-23
        start_time: start_time
        start_day: 2000-01-23
        end_time: end_time
        id: id
        episodes:
        - tags:
          - tags
          - tags
          timestamp: ""
        - tags:
          - tags
          - tags
          timestamp: ""
      properties:
        id:
          title: Id
          type: string
        end_day:
          format: date
          nullable: true
          type: string
        end_time:
          title: LocalDateTime
          type: string
        episodes:
          description: "Collection of episodes during rest mode, consisting of tags."
          items:
            $ref: '#/components/schemas/RestModeEpisode'
          type: array
        start_day:
          description: Start date of rest mode.
          format: date
          title: Start Day
          type: string
        start_time:
          title: LocalDateTime
          type: string
      required:
      - episodes
      - id
      - start_day
      - start_time
      title: RestModePeriodModel
    RingColor:
      enum:
      - brushed_silver
      - glossy_black
      - glossy_gold
      - glossy_white
      - gucci
      - matt_gold
      - rose
      - silver
      - stealth_black
      - titanium
      - titanium_and_gold
      title: RingColor
      type: string
    RingConfigurationModel:
      example:
        set_up_at: set_up_at
        color: brushed_silver
        size: 0
        hardware_type: gen1
        design: balance
        id: id
        firmware_version: firmware_version
      properties:
        id:
          title: Id
          type: string
        color:
          $ref: '#/components/schemas/RingColor'
        design:
          $ref: '#/components/schemas/RingDesign'
        firmware_version:
          nullable: true
          type: string
        hardware_type:
          $ref: '#/components/schemas/RingHardwareType'
        set_up_at:
          title: LocalDateTime
          type: string
        size:
          nullable: true
          type: integer
      required:
      - id
      title: RingConfigurationModel
    RingDesign:
      enum:
      - balance
      - balance_diamond
      - heritage
      - horizon
      title: RingDesign
      type: string
    RingHardwareType:
      enum:
      - gen1
      - gen2
      - gen2m
      - gen3
      title: RingHardwareType
      type: string
    SampleModel:
      example:
        interval: 0.8008281904610115
        items:
        - 6.027456183070403
        - 6.027456183070403
        timestamp: ""
      properties:
        interval:
          description: Interval in seconds between the sampled items.
          title: Interval
          type: number
        items:
          description: Recorded sample items.
          items:
            nullable: true
            type: number
          type: array
        timestamp:
          allOf:
          - $ref: '#/components/schemas/LocalDateTimeWithMilliseconds'
          description: Timestamp when the sample recording started.
      required:
      - interval
      - items
      - timestamp
      title: SampleModel
    SessionModel:
      example:
        mood: bad
        start_datetime: ""
        end_datetime: ""
        heart_rate:
          interval: 0.8008281904610115
          items:
          - 6.027456183070403
          - 6.027456183070403
          timestamp: ""
        id: id
        type: breathing
        day: 2000-01-23
        heart_rate_variability:
          interval: 0.8008281904610115
          items:
          - 6.027456183070403
          - 6.027456183070403
          timestamp: ""
        motion_count:
          interval: 0.8008281904610115
          items:
          - 6.027456183070403
          - 6.027456183070403
          timestamp: ""
      properties:
        id:
          title: Id
          type: string
        day:
          description: The date when the session occurred.
          format: date
          title: Day
          type: string
        start_datetime:
          allOf:
          - $ref: '#/components/schemas/LocalDateTime'
          description: Timestamp indicating when the Moment ended.
        end_datetime:
          allOf:
          - $ref: '#/components/schemas/LocalDateTime'
          description: Timestamp indicating when the Moment ended.
        type:
          $ref: '#/components/schemas/MomentType'
        heart_rate:
          $ref: '#/components/schemas/SampleModel'
        heart_rate_variability:
          $ref: '#/components/schemas/SampleModel'
        mood:
          $ref: '#/components/schemas/MomentMood'
        motion_count:
          $ref: '#/components/schemas/SampleModel'
      required:
      - day
      - end_datetime
      - id
      - start_datetime
      - type
      title: SessionModel
    SleepAlgorithmVersion:
      enum:
      - v1
      - v2
      title: SleepAlgorithmVersion
      type: string
    SleepContributors:
      description: Object defining sleep score contributors.
      properties:
        deep_sleep:
          nullable: true
          type: integer
        efficiency:
          nullable: true
          type: integer
        latency:
          nullable: true
          type: integer
        rem_sleep:
          nullable: true
          type: integer
        restfulness:
          nullable: true
          type: integer
        timing:
          nullable: true
          type: integer
        total_sleep:
          nullable: true
          type: integer
      title: SleepContributors
    SleepModel:
      example:
        average_heart_rate: 6.027456183070403
        sleep_score_delta: 9
        readiness:
          score: 4
          temperature_deviation: 5.025004791520295
          temperature_trend_deviation: 9.965781217890562
          contributors:
            resting_heart_rate: 7
            previous_day_activity: 1
            recovery_index: 6
            body_temperature: 7
            hrv_balance: 1
            sleep_balance: 1
            activity_balance: 4
            previous_night: 1
        rem_sleep_duration: 6
        latency: 7
        time_in_bed: 6
        average_hrv: 1
        restless_periods: 8
        type: deleted
        deep_sleep_duration: 5
        lowest_heart_rate: 3
        id: id
        movement_30_sec: movement_30_sec
        day: 2000-01-23
        bedtime_end: ""
        light_sleep_duration: 9
        sleep_algorithm_version: v1
        efficiency: 2
        period: 2
        heart_rate:
          interval: 0.8008281904610115
          items:
          - 6.027456183070403
          - 6.027456183070403
          timestamp: ""
        low_battery_alert: true
        hrv:
          interval: 0.8008281904610115
          items:
          - 6.027456183070403
          - 6.027456183070403
          timestamp: ""
        total_sleep_duration: 3
        average_breath: 0.8008281904610115
        sleep_phase_5_min: sleep_phase_5_min
        bedtime_start: ""
        readiness_score_delta: 9
        awake_time: 5
      properties:
        id:
          title: Id
          type: string
        average_breath:
          nullable: true
          type: number
        average_heart_rate:
          nullable: true
          type: number
        average_hrv:
          nullable: true
          type: integer
        awake_time:
          nullable: true
          type: integer
        bedtime_end:
          allOf:
          - $ref: '#/components/schemas/LocalDateTime'
          description: Bedtime end of the sleep.
        bedtime_start:
          allOf:
          - $ref: '#/components/schemas/LocalDateTime'
          description: Bedtime start of the sleep.
        day:
          description: Day that the sleep belongs to.
          format: date
          title: Day
          type: string
        deep_sleep_duration:
          nullable: true
          type: integer
        efficiency:
          nullable: true
          type: integer
        heart_rate:
          $ref: '#/components/schemas/SampleModel'
        hrv:
          $ref: '#/components/schemas/SampleModel'
        latency:
          nullable: true
          type: integer
        light_sleep_duration:
          nullable: true
          type: integer
        low_battery_alert:
          description: Flag indicating if a low battery alert occurred.
          title: Low Battery Alert
          type: boolean
        lowest_heart_rate:
          nullable: true
          type: integer
        movement_30_sec:
          nullable: true
          type: string
        period:
          description: ECore sleep period identifier.
          title: Period
          type: integer
        readiness:
          $ref: '#/components/schemas/ReadinessSummary'
        readiness_score_delta:
          nullable: true
          type: integer
        rem_sleep_duration:
          nullable: true
          type: integer
        restless_periods:
          nullable: true
          type: integer
        sleep_phase_5_min:
          nullable: true
          type: string
        sleep_score_delta:
          nullable: true
          type: integer
        sleep_algorithm_version:
          $ref: '#/components/schemas/SleepAlgorithmVersion'
        time_in_bed:
          description: Duration spent in bed in seconds.
          title: Time In Bed
          type: integer
        total_sleep_duration:
          nullable: true
          type: integer
        type:
          $ref: '#/components/schemas/SleepType'
      required:
      - average_breath
      - average_heart_rate
      - average_hrv
      - awake_time
      - bedtime_end
      - bedtime_start
      - day
      - deep_sleep_duration
      - efficiency
      - heart_rate
      - hrv
      - id
      - latency
      - light_sleep_duration
      - low_battery_alert
      - lowest_heart_rate
      - movement_30_sec
      - period
      - readiness
      - readiness_score_delta
      - rem_sleep_duration
      - restless_periods
      - sleep_algorithm_version
      - sleep_phase_5_min
      - sleep_score_delta
      - time_in_bed
      - total_sleep_duration
      - type
      title: SleepModel
    SleepTimeModel:
      description: Object contains suggested bedtime for the user.
      example:
        recommendation: improve_efficiency
        id: id
        optimal_bedtime:
          end_offset: 6
          day_tz: 0
          start_offset: 1
        day: 2000-01-23
        status: not_enough_nights
      properties:
        id:
          title: Id
          type: string
        day:
          description: Corresponding day for the sleep time.
          format: date
          title: Day
          type: string
        optimal_bedtime:
          $ref: '#/components/schemas/SleepTimeWindow'
        recommendation:
          $ref: '#/components/schemas/SleepTimeRecommendation'
        status:
          $ref: '#/components/schemas/SleepTimeStatus'
      required:
      - day
      - id
      title: SleepTimeModel
    SleepTimeRecommendation:
      description: Possible SleepTime recommendation.
      enum:
      - improve_efficiency
      - earlier_bedtime
      - later_bedtime
      - earlier_wake_up_time
      - later_wake_up_time
      - follow_optimal_bedtime
      title: SleepTimeRecommendation
      type: string
    SleepTimeStatus:
      description: Possible SleepTime status.
      enum:
      - not_enough_nights
      - not_enough_recent_nights
      - bad_sleep_quality
      - only_recommended_found
      - optimal_found
      title: SleepTimeStatus
      type: string
    SleepTimeWindow:
      description: Object defining sleep time window
      example:
        end_offset: 6
        day_tz: 0
        start_offset: 1
      properties:
        day_tz:
          description: Timezone offset in second from GMT of the day
          title: ""
          type: integer
        end_offset:
          description: End offset from midnight in second
          title: ""
          type: integer
        start_offset:
          description: Start offset from midnight in second
          title: ""
          type: integer
      required:
      - day_tz
      - end_offset
      - start_offset
      title: SleepTimeWindow
    SleepType:
      description: |-
        Possible sleep period types.
        'deleted' = deleted sleep by user.
        'sleep' = user confirmed sleep / nap, min 15 minutes, max 3 hours, contributes to daily scores
        'late_nap' = user confirmed sleep / nap, min 15 minutes, ended after sleep day change (6 pm), contributes to next days daily scores
        'long_sleep' = sleep that is long enough (>3h) to automatically contribute to daily scores
        'rest' = Falsely detected sleep / nap, rejected in confirm prompt by user
      enum:
      - deleted
      - sleep
      - long_sleep
      - late_nap
      - rest
      title: SleepType
      type: string
    TagModel:
      description: |-
        A TagModel maps to an ASSANote. An ASSANote in ExtAPIV2 is called a Tag
        A TagModel will be populated by data from an ASSANote
        The fields in the TagModel map to fields in an ASSANote
      example:
        id: id
        text: text
        day: 2000-01-23
        timestamp: 2000-01-23T04:56:07.000+00:00
        tags:
        - tags
        - tags
      properties:
        id:
          title: Id
          type: string
        day:
          description: Day that the note belongs to.
          format: date
          title: Day
          type: string
        text:
          nullable: true
          type: string
        timestamp:
          description: Timestamp of the note.
          format: date-time
          title: Timestamp
          type: string
        tags:
          description: Selected tags for the tag.
          items:
            type: string
          type: array
      required:
      - day
      - id
      - tags
      - text
      - timestamp
      title: TagModel
    TimeSeriesResponse_HeartRateModel_:
      example:
        data:
        - source: awake
          bpm: 0
          timestamp: timestamp
        - source: awake
          bpm: 0
          timestamp: timestamp
        next_token: next_token
      properties:
        data:
          items:
            $ref: '#/components/schemas/HeartRateModel'
          type: array
        next_token:
          nullable: true
          type: string
      required:
      - data
      title: "TimeSeriesResponse[HeartRateModel]"
    UpdateWebhookSubscriptionRequest:
      example:
        callback_url: callback_url
        event_type: create
        data_type: tag
        verification_token: verification_token
      properties:
        verification_token:
          title: Verification Token
          type: string
        callback_url:
          nullable: true
          type: string
        event_type:
          $ref: '#/components/schemas/WebhookOperation'
        data_type:
          $ref: '#/components/schemas/ExtApiV2DataType'
      required:
      - verification_token
      title: UpdateWebhookSubscriptionRequest
    VO2MaxModel:
      example:
        vo2_max: 0.8008281904610115
        id: id
        day: 2000-01-23
        timestamp: ""
      properties:
        id:
          title: Id
          type: string
        day:
          description: Day that the estimate belongs to.
          format: date
          title: Day
          type: string
        timestamp:
          allOf:
          - $ref: '#/components/schemas/LocalDateTime'
          description: Timestamp indicating when the estimate was created.
        vo2_max:
          nullable: true
          type: number
      required:
      - day
      - id
      - timestamp
      - vo2_max
      title: VO2MaxModel
    ValidationError:
      example:
        msg: msg
        loc:
        - ValidationError_loc_inner
        - ValidationError_loc_inner
        type: type
      properties:
        loc:
          items:
            $ref: '#/components/schemas/ValidationError_loc_inner'
          type: array
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
      required:
      - loc
      - msg
      - type
      title: ValidationError
    WebhookOperation:
      enum:
      - create
      - update
      - delete
      title: WebhookOperation
      type: string
    WebhookSubscriptionModel:
      example:
        callback_url: callback_url
        event_type: create
        expiration_time: 2000-01-23T04:56:07.000+00:00
        data_type: tag
        id: id
      properties:
        id:
          format: uuid4
          title: Id
          type: string
        callback_url:
          title: Callback Url
          type: string
        event_type:
          $ref: '#/components/schemas/WebhookOperation'
        data_type:
          $ref: '#/components/schemas/ExtApiV2DataType'
        expiration_time:
          format: date-time
          title: Expiration Time
          type: string
      required:
      - callback_url
      - data_type
      - event_type
      - expiration_time
      - id
      title: WebhookSubscriptionModel
    WorkoutIntensity:
      description: Possible workout intensities.
      enum:
      - easy
      - moderate
      - hard
      title: WorkoutIntensity
      type: string
    WorkoutModel:
      example:
        intensity: easy
        activity: activity
        distance: 6.027456183070403
        end_datetime: ""
        start_datetime: ""
        id: id
        calories: 0.8008281904610115
        label: label
        source: ""
        day: 2000-01-23
      properties:
        id:
          title: Id
          type: string
        activity:
          description: Type of the workout activity.
          title: Activity
          type: string
        calories:
          nullable: true
          type: number
        day:
          description: Day when the workout occurred.
          format: date
          title: Day
          type: string
        distance:
          nullable: true
          type: number
        end_datetime:
          allOf:
          - $ref: '#/components/schemas/LocalDateTime'
          description: Timestamp indicating when the workout ended.
        intensity:
          $ref: '#/components/schemas/WorkoutIntensity'
        label:
          nullable: true
          type: string
        source:
          allOf:
          - $ref: '#/components/schemas/WorkoutSource'
          description: Possible workout sources.
        start_datetime:
          allOf:
          - $ref: '#/components/schemas/LocalDateTime'
          description: Timestamp indicating when the workout started.
      required:
      - activity
      - calories
      - day
      - distance
      - end_datetime
      - id
      - intensity
      - label
      - source
      - start_datetime
      title: WorkoutModel
    WorkoutSource:
      enum:
      - autodetected
      - confirmed
      - manual
      - workout_heart_rate
      title: WorkoutSource
      type: string
    Start_Date:
      anyOf:
      - format: date-time
        type: string
      - format: date
        type: string
      nullable: true
      title: Start Date
    End_Date:
      anyOf:
      - format: date-time
        nullable: true
        type: string
      - format: date
        type: string
      nullable: true
      title: End Date
    End_Date_1:
      anyOf:
      - format: date-time
        type: string
      - format: date
        type: string
      nullable: true
      title: End Date
    ValidationError_loc_inner:
      anyOf:
      - type: string
      - type: integer
  securitySchemes:
    BearerAuth:
      scheme: bearer
      type: http
    OAuth2:
      flows:
        authorizationCode:
          authorizationUrl: https://cloud.ouraring.com/oauth/authorize
          scopes:
            email: Email address of the user
            personal: "Personal information (gender, age, height, weight)"
            daily: "Daily summaries of sleep, activity and readiness"
            heartrate: Time series heart rate for Gen 3 users
            workout: Summaries for auto-detected and user entered workouts
            tag User: entered tags
            session: Guided and unguided sessions in the Oura app
            spo2Daily: SpO2 Average recorded during sleep
          tokenUrl: https://api.ouraring.com/oauth/token
      type: oauth2
