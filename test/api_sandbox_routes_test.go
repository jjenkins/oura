/*
Oura API Documentation

Testing SandboxRoutesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package oura

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_oura_SandboxRoutesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SandboxRoutesAPIService SandboxMultipleDailyActivityDocumentsV2SandboxUsercollectionDailyActivityGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SandboxRoutesAPI.SandboxMultipleDailyActivityDocumentsV2SandboxUsercollectionDailyActivityGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SandboxRoutesAPIService SandboxMultipleDailyCardiovascularAgeDocumentsV2SandboxUsercollectionDailyCardiovascularAgeGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SandboxRoutesAPI.SandboxMultipleDailyCardiovascularAgeDocumentsV2SandboxUsercollectionDailyCardiovascularAgeGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SandboxRoutesAPIService SandboxMultipleDailyReadinessDocumentsV2SandboxUsercollectionDailyReadinessGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SandboxRoutesAPI.SandboxMultipleDailyReadinessDocumentsV2SandboxUsercollectionDailyReadinessGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SandboxRoutesAPIService SandboxMultipleDailyResilienceDocumentsV2SandboxUsercollectionDailyResilienceGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SandboxRoutesAPI.SandboxMultipleDailyResilienceDocumentsV2SandboxUsercollectionDailyResilienceGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SandboxRoutesAPIService SandboxMultipleDailySleepDocumentsV2SandboxUsercollectionDailySleepGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SandboxRoutesAPI.SandboxMultipleDailySleepDocumentsV2SandboxUsercollectionDailySleepGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SandboxRoutesAPIService SandboxMultipleDailySpo2DocumentsV2SandboxUsercollectionDailySpo2Get", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SandboxRoutesAPI.SandboxMultipleDailySpo2DocumentsV2SandboxUsercollectionDailySpo2Get(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SandboxRoutesAPIService SandboxMultipleDailyStressDocumentsV2SandboxUsercollectionDailyStressGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SandboxRoutesAPI.SandboxMultipleDailyStressDocumentsV2SandboxUsercollectionDailyStressGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SandboxRoutesAPIService SandboxMultipleEnhancedTagDocumentsV2SandboxUsercollectionEnhancedTagGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SandboxRoutesAPI.SandboxMultipleEnhancedTagDocumentsV2SandboxUsercollectionEnhancedTagGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SandboxRoutesAPIService SandboxMultipleHeartrateDocumentsV2SandboxUsercollectionHeartrateGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SandboxRoutesAPI.SandboxMultipleHeartrateDocumentsV2SandboxUsercollectionHeartrateGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SandboxRoutesAPIService SandboxMultipleRestModePeriodDocumentsV2SandboxUsercollectionRestModePeriodGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SandboxRoutesAPI.SandboxMultipleRestModePeriodDocumentsV2SandboxUsercollectionRestModePeriodGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SandboxRoutesAPIService SandboxMultipleRingConfigurationDocumentsV2SandboxUsercollectionRingConfigurationGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SandboxRoutesAPI.SandboxMultipleRingConfigurationDocumentsV2SandboxUsercollectionRingConfigurationGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SandboxRoutesAPIService SandboxMultipleSessionDocumentsV2SandboxUsercollectionSessionGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SandboxRoutesAPI.SandboxMultipleSessionDocumentsV2SandboxUsercollectionSessionGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SandboxRoutesAPIService SandboxMultipleSleepDocumentsV2SandboxUsercollectionSleepGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SandboxRoutesAPI.SandboxMultipleSleepDocumentsV2SandboxUsercollectionSleepGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SandboxRoutesAPIService SandboxMultipleSleepTimeDocumentsV2SandboxUsercollectionSleepTimeGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SandboxRoutesAPI.SandboxMultipleSleepTimeDocumentsV2SandboxUsercollectionSleepTimeGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SandboxRoutesAPIService SandboxMultipleTagDocumentsV2SandboxUsercollectionTagGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SandboxRoutesAPI.SandboxMultipleTagDocumentsV2SandboxUsercollectionTagGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SandboxRoutesAPIService SandboxMultipleVO2MaxDocumentsV2SandboxUsercollectionVO2MaxGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SandboxRoutesAPI.SandboxMultipleVO2MaxDocumentsV2SandboxUsercollectionVO2MaxGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SandboxRoutesAPIService SandboxMultipleWorkoutDocumentsV2SandboxUsercollectionWorkoutGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SandboxRoutesAPI.SandboxMultipleWorkoutDocumentsV2SandboxUsercollectionWorkoutGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SandboxRoutesAPIService SandboxSingleDailyActivityDocumentV2SandboxUsercollectionDailyActivityDocumentIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var documentId string

		resp, httpRes, err := apiClient.SandboxRoutesAPI.SandboxSingleDailyActivityDocumentV2SandboxUsercollectionDailyActivityDocumentIdGet(context.Background(), documentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SandboxRoutesAPIService SandboxSingleDailyCardiovascularAgeDocumentV2SandboxUsercollectionDailyCardiovascularAgeDocumentIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var documentId string

		resp, httpRes, err := apiClient.SandboxRoutesAPI.SandboxSingleDailyCardiovascularAgeDocumentV2SandboxUsercollectionDailyCardiovascularAgeDocumentIdGet(context.Background(), documentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SandboxRoutesAPIService SandboxSingleDailyReadinessDocumentV2SandboxUsercollectionDailyReadinessDocumentIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var documentId string

		resp, httpRes, err := apiClient.SandboxRoutesAPI.SandboxSingleDailyReadinessDocumentV2SandboxUsercollectionDailyReadinessDocumentIdGet(context.Background(), documentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SandboxRoutesAPIService SandboxSingleDailyResilienceDocumentV2SandboxUsercollectionDailyResilienceDocumentIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var documentId string

		resp, httpRes, err := apiClient.SandboxRoutesAPI.SandboxSingleDailyResilienceDocumentV2SandboxUsercollectionDailyResilienceDocumentIdGet(context.Background(), documentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SandboxRoutesAPIService SandboxSingleDailySleepDocumentV2SandboxUsercollectionDailySleepDocumentIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var documentId string

		resp, httpRes, err := apiClient.SandboxRoutesAPI.SandboxSingleDailySleepDocumentV2SandboxUsercollectionDailySleepDocumentIdGet(context.Background(), documentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SandboxRoutesAPIService SandboxSingleDailySpo2DocumentV2SandboxUsercollectionDailySpo2DocumentIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var documentId string

		resp, httpRes, err := apiClient.SandboxRoutesAPI.SandboxSingleDailySpo2DocumentV2SandboxUsercollectionDailySpo2DocumentIdGet(context.Background(), documentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SandboxRoutesAPIService SandboxSingleDailyStressDocumentV2SandboxUsercollectionDailyStressDocumentIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var documentId string

		resp, httpRes, err := apiClient.SandboxRoutesAPI.SandboxSingleDailyStressDocumentV2SandboxUsercollectionDailyStressDocumentIdGet(context.Background(), documentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SandboxRoutesAPIService SandboxSingleEnhancedTagDocumentV2SandboxUsercollectionEnhancedTagDocumentIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var documentId string

		resp, httpRes, err := apiClient.SandboxRoutesAPI.SandboxSingleEnhancedTagDocumentV2SandboxUsercollectionEnhancedTagDocumentIdGet(context.Background(), documentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SandboxRoutesAPIService SandboxSingleRestModePeriodDocumentV2SandboxUsercollectionRestModePeriodDocumentIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var documentId string

		resp, httpRes, err := apiClient.SandboxRoutesAPI.SandboxSingleRestModePeriodDocumentV2SandboxUsercollectionRestModePeriodDocumentIdGet(context.Background(), documentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SandboxRoutesAPIService SandboxSingleRingConfigurationDocumentV2SandboxUsercollectionRingConfigurationDocumentIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var documentId string

		resp, httpRes, err := apiClient.SandboxRoutesAPI.SandboxSingleRingConfigurationDocumentV2SandboxUsercollectionRingConfigurationDocumentIdGet(context.Background(), documentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SandboxRoutesAPIService SandboxSingleSessionDocumentV2SandboxUsercollectionSessionDocumentIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var documentId string

		resp, httpRes, err := apiClient.SandboxRoutesAPI.SandboxSingleSessionDocumentV2SandboxUsercollectionSessionDocumentIdGet(context.Background(), documentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SandboxRoutesAPIService SandboxSingleSleepDocumentV2SandboxUsercollectionSleepDocumentIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var documentId string

		resp, httpRes, err := apiClient.SandboxRoutesAPI.SandboxSingleSleepDocumentV2SandboxUsercollectionSleepDocumentIdGet(context.Background(), documentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SandboxRoutesAPIService SandboxSingleSleepTimeDocumentV2SandboxUsercollectionSleepTimeDocumentIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var documentId string

		resp, httpRes, err := apiClient.SandboxRoutesAPI.SandboxSingleSleepTimeDocumentV2SandboxUsercollectionSleepTimeDocumentIdGet(context.Background(), documentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SandboxRoutesAPIService SandboxSingleTagDocumentV2SandboxUsercollectionTagDocumentIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var documentId string

		resp, httpRes, err := apiClient.SandboxRoutesAPI.SandboxSingleTagDocumentV2SandboxUsercollectionTagDocumentIdGet(context.Background(), documentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SandboxRoutesAPIService SandboxSingleVO2MaxDocumentV2SandboxUsercollectionVO2MaxDocumentIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var documentId string

		resp, httpRes, err := apiClient.SandboxRoutesAPI.SandboxSingleVO2MaxDocumentV2SandboxUsercollectionVO2MaxDocumentIdGet(context.Background(), documentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SandboxRoutesAPIService SandboxSingleWorkoutDocumentV2SandboxUsercollectionWorkoutDocumentIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var documentId string

		resp, httpRes, err := apiClient.SandboxRoutesAPI.SandboxSingleWorkoutDocumentV2SandboxUsercollectionWorkoutDocumentIdGet(context.Background(), documentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
