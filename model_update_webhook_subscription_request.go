/*
Oura API Documentation

# Overview   The Oura API allows Oura users and partner applications to improve their user experience with Oura data.  This document describes the Oura API Version 2 (V2), which supports access to the latest Oura Ring data types.  For access to other data types—which have not yet migrated to V2—refer to the [Oura API Version 1 (V1)](https://cloud.ouraring.com/docs/) documentation.  # Data Access  Individual Oura users can access their own data through the API by using a [Personal Access Token](https://cloud.ouraring.com/personal-access-tokens).  If you want to retrieve data for multiple users, a registered [API Application](https://cloud.ouraring.com/oauth/applications) is required.  API Applications are limited to **10** users before requiring approval from Oura. There is no limit once an application is approved.  Additionally, Oura users **must provide consent** to share each data type an API Application has access to.  All data access requests through the Oura API require [Authentication](https://cloud.ouraring.com/docs/authentication).  Additionally, we recommend that Oura users keep their mobile app updated to support API access for the latest data types.  # Authentication  The Oura API provides two methods for Authentication: (1) the OAuth2 protocol and (2) Personal Access Tokens. For more information on the OAuth2 flow, see our [Authentication instructions](https://cloud.ouraring.com/docs/authentication).  Access tokens must be included in the request header as follows: ```http GET /v2/usercollection/personal_info HTTP/1.1 Host: api.ouraring.com Authorization: Bearer <token> ```  # Oura HTTP Response Codes  | Response Code                        | Description | | ------------------------------------ | - | | 200 OK                               | Successful Response         | | 400 Query Parameter Validation Error | The request contains query parameters that are invalid or incorrectly formatted. | | 429 Request Rate Limit Exceeded        | The API is rate limited to 5000 requests in a 5 minute period. You will receive a 429 error code if you exceed this limit. [Contact us](mailto:api-support@ouraring.com) if you expect your usage to exceed this limit.| 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oura

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateWebhookSubscriptionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateWebhookSubscriptionRequest{}

// UpdateWebhookSubscriptionRequest struct for UpdateWebhookSubscriptionRequest
type UpdateWebhookSubscriptionRequest struct {
	VerificationToken string `json:"verification_token"`
	CallbackUrl NullableString `json:"callback_url,omitempty"`
	EventType NullableWebhookOperation `json:"event_type,omitempty"`
	DataType NullableExtApiV2DataType `json:"data_type,omitempty"`
}

type _UpdateWebhookSubscriptionRequest UpdateWebhookSubscriptionRequest

// NewUpdateWebhookSubscriptionRequest instantiates a new UpdateWebhookSubscriptionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateWebhookSubscriptionRequest(verificationToken string) *UpdateWebhookSubscriptionRequest {
	this := UpdateWebhookSubscriptionRequest{}
	this.VerificationToken = verificationToken
	return &this
}

// NewUpdateWebhookSubscriptionRequestWithDefaults instantiates a new UpdateWebhookSubscriptionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateWebhookSubscriptionRequestWithDefaults() *UpdateWebhookSubscriptionRequest {
	this := UpdateWebhookSubscriptionRequest{}
	return &this
}

// GetVerificationToken returns the VerificationToken field value
func (o *UpdateWebhookSubscriptionRequest) GetVerificationToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VerificationToken
}

// GetVerificationTokenOk returns a tuple with the VerificationToken field value
// and a boolean to check if the value has been set.
func (o *UpdateWebhookSubscriptionRequest) GetVerificationTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VerificationToken, true
}

// SetVerificationToken sets field value
func (o *UpdateWebhookSubscriptionRequest) SetVerificationToken(v string) {
	o.VerificationToken = v
}

// GetCallbackUrl returns the CallbackUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateWebhookSubscriptionRequest) GetCallbackUrl() string {
	if o == nil || IsNil(o.CallbackUrl.Get()) {
		var ret string
		return ret
	}
	return *o.CallbackUrl.Get()
}

// GetCallbackUrlOk returns a tuple with the CallbackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateWebhookSubscriptionRequest) GetCallbackUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CallbackUrl.Get(), o.CallbackUrl.IsSet()
}

// HasCallbackUrl returns a boolean if a field has been set.
func (o *UpdateWebhookSubscriptionRequest) HasCallbackUrl() bool {
	if o != nil && o.CallbackUrl.IsSet() {
		return true
	}

	return false
}

// SetCallbackUrl gets a reference to the given NullableString and assigns it to the CallbackUrl field.
func (o *UpdateWebhookSubscriptionRequest) SetCallbackUrl(v string) {
	o.CallbackUrl.Set(&v)
}
// SetCallbackUrlNil sets the value for CallbackUrl to be an explicit nil
func (o *UpdateWebhookSubscriptionRequest) SetCallbackUrlNil() {
	o.CallbackUrl.Set(nil)
}

// UnsetCallbackUrl ensures that no value is present for CallbackUrl, not even an explicit nil
func (o *UpdateWebhookSubscriptionRequest) UnsetCallbackUrl() {
	o.CallbackUrl.Unset()
}

// GetEventType returns the EventType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateWebhookSubscriptionRequest) GetEventType() WebhookOperation {
	if o == nil || IsNil(o.EventType.Get()) {
		var ret WebhookOperation
		return ret
	}
	return *o.EventType.Get()
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateWebhookSubscriptionRequest) GetEventTypeOk() (*WebhookOperation, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventType.Get(), o.EventType.IsSet()
}

// HasEventType returns a boolean if a field has been set.
func (o *UpdateWebhookSubscriptionRequest) HasEventType() bool {
	if o != nil && o.EventType.IsSet() {
		return true
	}

	return false
}

// SetEventType gets a reference to the given NullableWebhookOperation and assigns it to the EventType field.
func (o *UpdateWebhookSubscriptionRequest) SetEventType(v WebhookOperation) {
	o.EventType.Set(&v)
}
// SetEventTypeNil sets the value for EventType to be an explicit nil
func (o *UpdateWebhookSubscriptionRequest) SetEventTypeNil() {
	o.EventType.Set(nil)
}

// UnsetEventType ensures that no value is present for EventType, not even an explicit nil
func (o *UpdateWebhookSubscriptionRequest) UnsetEventType() {
	o.EventType.Unset()
}

// GetDataType returns the DataType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateWebhookSubscriptionRequest) GetDataType() ExtApiV2DataType {
	if o == nil || IsNil(o.DataType.Get()) {
		var ret ExtApiV2DataType
		return ret
	}
	return *o.DataType.Get()
}

// GetDataTypeOk returns a tuple with the DataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateWebhookSubscriptionRequest) GetDataTypeOk() (*ExtApiV2DataType, bool) {
	if o == nil {
		return nil, false
	}
	return o.DataType.Get(), o.DataType.IsSet()
}

// HasDataType returns a boolean if a field has been set.
func (o *UpdateWebhookSubscriptionRequest) HasDataType() bool {
	if o != nil && o.DataType.IsSet() {
		return true
	}

	return false
}

// SetDataType gets a reference to the given NullableExtApiV2DataType and assigns it to the DataType field.
func (o *UpdateWebhookSubscriptionRequest) SetDataType(v ExtApiV2DataType) {
	o.DataType.Set(&v)
}
// SetDataTypeNil sets the value for DataType to be an explicit nil
func (o *UpdateWebhookSubscriptionRequest) SetDataTypeNil() {
	o.DataType.Set(nil)
}

// UnsetDataType ensures that no value is present for DataType, not even an explicit nil
func (o *UpdateWebhookSubscriptionRequest) UnsetDataType() {
	o.DataType.Unset()
}

func (o UpdateWebhookSubscriptionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateWebhookSubscriptionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["verification_token"] = o.VerificationToken
	if o.CallbackUrl.IsSet() {
		toSerialize["callback_url"] = o.CallbackUrl.Get()
	}
	if o.EventType.IsSet() {
		toSerialize["event_type"] = o.EventType.Get()
	}
	if o.DataType.IsSet() {
		toSerialize["data_type"] = o.DataType.Get()
	}
	return toSerialize, nil
}

func (o *UpdateWebhookSubscriptionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"verification_token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateWebhookSubscriptionRequest := _UpdateWebhookSubscriptionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateWebhookSubscriptionRequest)

	if err != nil {
		return err
	}

	*o = UpdateWebhookSubscriptionRequest(varUpdateWebhookSubscriptionRequest)

	return err
}

type NullableUpdateWebhookSubscriptionRequest struct {
	value *UpdateWebhookSubscriptionRequest
	isSet bool
}

func (v NullableUpdateWebhookSubscriptionRequest) Get() *UpdateWebhookSubscriptionRequest {
	return v.value
}

func (v *NullableUpdateWebhookSubscriptionRequest) Set(val *UpdateWebhookSubscriptionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateWebhookSubscriptionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateWebhookSubscriptionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateWebhookSubscriptionRequest(val *UpdateWebhookSubscriptionRequest) *NullableUpdateWebhookSubscriptionRequest {
	return &NullableUpdateWebhookSubscriptionRequest{value: val, isSet: true}
}

func (v NullableUpdateWebhookSubscriptionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateWebhookSubscriptionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


