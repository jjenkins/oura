/*
Oura API Documentation

# Overview   The Oura API allows Oura users and partner applications to improve their user experience with Oura data.  This document describes the Oura API Version 2 (V2), which supports access to the latest Oura Ring data types.  For access to other data types—which have not yet migrated to V2—refer to the [Oura API Version 1 (V1)](https://cloud.ouraring.com/docs/) documentation.  # Data Access  Individual Oura users can access their own data through the API by using a [Personal Access Token](https://cloud.ouraring.com/personal-access-tokens).  If you want to retrieve data for multiple users, a registered [API Application](https://cloud.ouraring.com/oauth/applications) is required.  API Applications are limited to **10** users before requiring approval from Oura. There is no limit once an application is approved.  Additionally, Oura users **must provide consent** to share each data type an API Application has access to.  All data access requests through the Oura API require [Authentication](https://cloud.ouraring.com/docs/authentication).  Additionally, we recommend that Oura users keep their mobile app updated to support API access for the latest data types.  # Authentication  The Oura API provides two methods for Authentication: (1) the OAuth2 protocol and (2) Personal Access Tokens. For more information on the OAuth2 flow, see our [Authentication instructions](https://cloud.ouraring.com/docs/authentication).  Access tokens must be included in the request header as follows: ```http GET /v2/usercollection/personal_info HTTP/1.1 Host: api.ouraring.com Authorization: Bearer <token> ```  # Oura HTTP Response Codes  | Response Code                        | Description | | ------------------------------------ | - | | 200 OK                               | Successful Response         | | 400 Query Parameter Validation Error | The request contains query parameters that are invalid or incorrectly formatted. | | 429 Request Rate Limit Exceeded        | The API is rate limited to 5000 requests in a 5 minute period. You will receive a 429 error code if you exceed this limit. [Contact us](mailto:api-support@ouraring.com) if you expect your usage to exceed this limit.| 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oura

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DailyActivityModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DailyActivityModel{}

// DailyActivityModel struct for DailyActivityModel
type DailyActivityModel struct {
	Id string `json:"id"`
	Class5Min NullableString `json:"class_5_min"`
	Score NullableInt32 `json:"score"`
	// Active calories expended (in kilocalories)
	ActiveCalories int32 `json:"active_calories"`
	// Average metabolic equivalent (MET) in minutes
	AverageMetMinutes float32 `json:"average_met_minutes"`
	Contributors ActivityContributors `json:"contributors"`
	// Equivalent walking distance (in meters) of energy expenditure
	EquivalentWalkingDistance int32 `json:"equivalent_walking_distance"`
	// High activity metabolic equivalent (MET) in minutes
	HighActivityMetMinutes int32 `json:"high_activity_met_minutes"`
	// High activity metabolic equivalent (MET) in seconds
	HighActivityTime int32 `json:"high_activity_time"`
	// Number of inactivity alerts received
	InactivityAlerts int32 `json:"inactivity_alerts"`
	// Low activity metabolic equivalent (MET) in minutes
	LowActivityMetMinutes int32 `json:"low_activity_met_minutes"`
	// Low activity metabolic equivalent (MET) in seconds
	LowActivityTime int32 `json:"low_activity_time"`
	// Medium activity metabolic equivalent (MET) in minutes
	MediumActivityMetMinutes int32 `json:"medium_activity_met_minutes"`
	// Medium activity metabolic equivalent (MET) in seconds
	MediumActivityTime int32 `json:"medium_activity_time"`
	Met SampleModel `json:"met"`
	// Remaining meters to target (from ```target_meters```
	MetersToTarget int32 `json:"meters_to_target"`
	// The time (in seconds) in which the ring was not worn
	NonWearTime int32 `json:"non_wear_time"`
	// Resting time (in seconds)
	RestingTime int32 `json:"resting_time"`
	// Sedentary metabolic equivalent (MET) in minutes
	SedentaryMetMinutes int32 `json:"sedentary_met_minutes"`
	// Sedentary metabolic equivalent (MET) in seconds
	SedentaryTime int32 `json:"sedentary_time"`
	// Total number of steps taken
	Steps int32 `json:"steps"`
	// Daily activity target (in kilocalories)
	TargetCalories int32 `json:"target_calories"`
	// Daily activity target (in meters)
	TargetMeters int32 `json:"target_meters"`
	// Total calories expended (in kilocalories)
	TotalCalories int32 `json:"total_calories"`
	// The ```YYYY-MM-DD``` formatted local date indicating when the daily activity occurred
	Day string `json:"day"`
	// ISO 8601 formatted local timestamp indicating the start datetime of when the daily activity occurred
	Timestamp string `json:"timestamp"`
}

type _DailyActivityModel DailyActivityModel

// NewDailyActivityModel instantiates a new DailyActivityModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDailyActivityModel(id string, class5Min NullableString, score NullableInt32, activeCalories int32, averageMetMinutes float32, contributors ActivityContributors, equivalentWalkingDistance int32, highActivityMetMinutes int32, highActivityTime int32, inactivityAlerts int32, lowActivityMetMinutes int32, lowActivityTime int32, mediumActivityMetMinutes int32, mediumActivityTime int32, met SampleModel, metersToTarget int32, nonWearTime int32, restingTime int32, sedentaryMetMinutes int32, sedentaryTime int32, steps int32, targetCalories int32, targetMeters int32, totalCalories int32, day string, timestamp string) *DailyActivityModel {
	this := DailyActivityModel{}
	this.Id = id
	this.Class5Min = class5Min
	this.Score = score
	this.ActiveCalories = activeCalories
	this.AverageMetMinutes = averageMetMinutes
	this.Contributors = contributors
	this.EquivalentWalkingDistance = equivalentWalkingDistance
	this.HighActivityMetMinutes = highActivityMetMinutes
	this.HighActivityTime = highActivityTime
	this.InactivityAlerts = inactivityAlerts
	this.LowActivityMetMinutes = lowActivityMetMinutes
	this.LowActivityTime = lowActivityTime
	this.MediumActivityMetMinutes = mediumActivityMetMinutes
	this.MediumActivityTime = mediumActivityTime
	this.Met = met
	this.MetersToTarget = metersToTarget
	this.NonWearTime = nonWearTime
	this.RestingTime = restingTime
	this.SedentaryMetMinutes = sedentaryMetMinutes
	this.SedentaryTime = sedentaryTime
	this.Steps = steps
	this.TargetCalories = targetCalories
	this.TargetMeters = targetMeters
	this.TotalCalories = totalCalories
	this.Day = day
	this.Timestamp = timestamp
	return &this
}

// NewDailyActivityModelWithDefaults instantiates a new DailyActivityModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDailyActivityModelWithDefaults() *DailyActivityModel {
	this := DailyActivityModel{}
	return &this
}

// GetId returns the Id field value
func (o *DailyActivityModel) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DailyActivityModel) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DailyActivityModel) SetId(v string) {
	o.Id = v
}

// GetClass5Min returns the Class5Min field value
// If the value is explicit nil, the zero value for string will be returned
func (o *DailyActivityModel) GetClass5Min() string {
	if o == nil || o.Class5Min.Get() == nil {
		var ret string
		return ret
	}

	return *o.Class5Min.Get()
}

// GetClass5MinOk returns a tuple with the Class5Min field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DailyActivityModel) GetClass5MinOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Class5Min.Get(), o.Class5Min.IsSet()
}

// SetClass5Min sets field value
func (o *DailyActivityModel) SetClass5Min(v string) {
	o.Class5Min.Set(&v)
}

// GetScore returns the Score field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *DailyActivityModel) GetScore() int32 {
	if o == nil || o.Score.Get() == nil {
		var ret int32
		return ret
	}

	return *o.Score.Get()
}

// GetScoreOk returns a tuple with the Score field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DailyActivityModel) GetScoreOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Score.Get(), o.Score.IsSet()
}

// SetScore sets field value
func (o *DailyActivityModel) SetScore(v int32) {
	o.Score.Set(&v)
}

// GetActiveCalories returns the ActiveCalories field value
func (o *DailyActivityModel) GetActiveCalories() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ActiveCalories
}

// GetActiveCaloriesOk returns a tuple with the ActiveCalories field value
// and a boolean to check if the value has been set.
func (o *DailyActivityModel) GetActiveCaloriesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActiveCalories, true
}

// SetActiveCalories sets field value
func (o *DailyActivityModel) SetActiveCalories(v int32) {
	o.ActiveCalories = v
}

// GetAverageMetMinutes returns the AverageMetMinutes field value
func (o *DailyActivityModel) GetAverageMetMinutes() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.AverageMetMinutes
}

// GetAverageMetMinutesOk returns a tuple with the AverageMetMinutes field value
// and a boolean to check if the value has been set.
func (o *DailyActivityModel) GetAverageMetMinutesOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AverageMetMinutes, true
}

// SetAverageMetMinutes sets field value
func (o *DailyActivityModel) SetAverageMetMinutes(v float32) {
	o.AverageMetMinutes = v
}

// GetContributors returns the Contributors field value
func (o *DailyActivityModel) GetContributors() ActivityContributors {
	if o == nil {
		var ret ActivityContributors
		return ret
	}

	return o.Contributors
}

// GetContributorsOk returns a tuple with the Contributors field value
// and a boolean to check if the value has been set.
func (o *DailyActivityModel) GetContributorsOk() (*ActivityContributors, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Contributors, true
}

// SetContributors sets field value
func (o *DailyActivityModel) SetContributors(v ActivityContributors) {
	o.Contributors = v
}

// GetEquivalentWalkingDistance returns the EquivalentWalkingDistance field value
func (o *DailyActivityModel) GetEquivalentWalkingDistance() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EquivalentWalkingDistance
}

// GetEquivalentWalkingDistanceOk returns a tuple with the EquivalentWalkingDistance field value
// and a boolean to check if the value has been set.
func (o *DailyActivityModel) GetEquivalentWalkingDistanceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EquivalentWalkingDistance, true
}

// SetEquivalentWalkingDistance sets field value
func (o *DailyActivityModel) SetEquivalentWalkingDistance(v int32) {
	o.EquivalentWalkingDistance = v
}

// GetHighActivityMetMinutes returns the HighActivityMetMinutes field value
func (o *DailyActivityModel) GetHighActivityMetMinutes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.HighActivityMetMinutes
}

// GetHighActivityMetMinutesOk returns a tuple with the HighActivityMetMinutes field value
// and a boolean to check if the value has been set.
func (o *DailyActivityModel) GetHighActivityMetMinutesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HighActivityMetMinutes, true
}

// SetHighActivityMetMinutes sets field value
func (o *DailyActivityModel) SetHighActivityMetMinutes(v int32) {
	o.HighActivityMetMinutes = v
}

// GetHighActivityTime returns the HighActivityTime field value
func (o *DailyActivityModel) GetHighActivityTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.HighActivityTime
}

// GetHighActivityTimeOk returns a tuple with the HighActivityTime field value
// and a boolean to check if the value has been set.
func (o *DailyActivityModel) GetHighActivityTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HighActivityTime, true
}

// SetHighActivityTime sets field value
func (o *DailyActivityModel) SetHighActivityTime(v int32) {
	o.HighActivityTime = v
}

// GetInactivityAlerts returns the InactivityAlerts field value
func (o *DailyActivityModel) GetInactivityAlerts() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.InactivityAlerts
}

// GetInactivityAlertsOk returns a tuple with the InactivityAlerts field value
// and a boolean to check if the value has been set.
func (o *DailyActivityModel) GetInactivityAlertsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InactivityAlerts, true
}

// SetInactivityAlerts sets field value
func (o *DailyActivityModel) SetInactivityAlerts(v int32) {
	o.InactivityAlerts = v
}

// GetLowActivityMetMinutes returns the LowActivityMetMinutes field value
func (o *DailyActivityModel) GetLowActivityMetMinutes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LowActivityMetMinutes
}

// GetLowActivityMetMinutesOk returns a tuple with the LowActivityMetMinutes field value
// and a boolean to check if the value has been set.
func (o *DailyActivityModel) GetLowActivityMetMinutesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LowActivityMetMinutes, true
}

// SetLowActivityMetMinutes sets field value
func (o *DailyActivityModel) SetLowActivityMetMinutes(v int32) {
	o.LowActivityMetMinutes = v
}

// GetLowActivityTime returns the LowActivityTime field value
func (o *DailyActivityModel) GetLowActivityTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LowActivityTime
}

// GetLowActivityTimeOk returns a tuple with the LowActivityTime field value
// and a boolean to check if the value has been set.
func (o *DailyActivityModel) GetLowActivityTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LowActivityTime, true
}

// SetLowActivityTime sets field value
func (o *DailyActivityModel) SetLowActivityTime(v int32) {
	o.LowActivityTime = v
}

// GetMediumActivityMetMinutes returns the MediumActivityMetMinutes field value
func (o *DailyActivityModel) GetMediumActivityMetMinutes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MediumActivityMetMinutes
}

// GetMediumActivityMetMinutesOk returns a tuple with the MediumActivityMetMinutes field value
// and a boolean to check if the value has been set.
func (o *DailyActivityModel) GetMediumActivityMetMinutesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MediumActivityMetMinutes, true
}

// SetMediumActivityMetMinutes sets field value
func (o *DailyActivityModel) SetMediumActivityMetMinutes(v int32) {
	o.MediumActivityMetMinutes = v
}

// GetMediumActivityTime returns the MediumActivityTime field value
func (o *DailyActivityModel) GetMediumActivityTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MediumActivityTime
}

// GetMediumActivityTimeOk returns a tuple with the MediumActivityTime field value
// and a boolean to check if the value has been set.
func (o *DailyActivityModel) GetMediumActivityTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MediumActivityTime, true
}

// SetMediumActivityTime sets field value
func (o *DailyActivityModel) SetMediumActivityTime(v int32) {
	o.MediumActivityTime = v
}

// GetMet returns the Met field value
func (o *DailyActivityModel) GetMet() SampleModel {
	if o == nil {
		var ret SampleModel
		return ret
	}

	return o.Met
}

// GetMetOk returns a tuple with the Met field value
// and a boolean to check if the value has been set.
func (o *DailyActivityModel) GetMetOk() (*SampleModel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Met, true
}

// SetMet sets field value
func (o *DailyActivityModel) SetMet(v SampleModel) {
	o.Met = v
}

// GetMetersToTarget returns the MetersToTarget field value
func (o *DailyActivityModel) GetMetersToTarget() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MetersToTarget
}

// GetMetersToTargetOk returns a tuple with the MetersToTarget field value
// and a boolean to check if the value has been set.
func (o *DailyActivityModel) GetMetersToTargetOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetersToTarget, true
}

// SetMetersToTarget sets field value
func (o *DailyActivityModel) SetMetersToTarget(v int32) {
	o.MetersToTarget = v
}

// GetNonWearTime returns the NonWearTime field value
func (o *DailyActivityModel) GetNonWearTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NonWearTime
}

// GetNonWearTimeOk returns a tuple with the NonWearTime field value
// and a boolean to check if the value has been set.
func (o *DailyActivityModel) GetNonWearTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NonWearTime, true
}

// SetNonWearTime sets field value
func (o *DailyActivityModel) SetNonWearTime(v int32) {
	o.NonWearTime = v
}

// GetRestingTime returns the RestingTime field value
func (o *DailyActivityModel) GetRestingTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RestingTime
}

// GetRestingTimeOk returns a tuple with the RestingTime field value
// and a boolean to check if the value has been set.
func (o *DailyActivityModel) GetRestingTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RestingTime, true
}

// SetRestingTime sets field value
func (o *DailyActivityModel) SetRestingTime(v int32) {
	o.RestingTime = v
}

// GetSedentaryMetMinutes returns the SedentaryMetMinutes field value
func (o *DailyActivityModel) GetSedentaryMetMinutes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SedentaryMetMinutes
}

// GetSedentaryMetMinutesOk returns a tuple with the SedentaryMetMinutes field value
// and a boolean to check if the value has been set.
func (o *DailyActivityModel) GetSedentaryMetMinutesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SedentaryMetMinutes, true
}

// SetSedentaryMetMinutes sets field value
func (o *DailyActivityModel) SetSedentaryMetMinutes(v int32) {
	o.SedentaryMetMinutes = v
}

// GetSedentaryTime returns the SedentaryTime field value
func (o *DailyActivityModel) GetSedentaryTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SedentaryTime
}

// GetSedentaryTimeOk returns a tuple with the SedentaryTime field value
// and a boolean to check if the value has been set.
func (o *DailyActivityModel) GetSedentaryTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SedentaryTime, true
}

// SetSedentaryTime sets field value
func (o *DailyActivityModel) SetSedentaryTime(v int32) {
	o.SedentaryTime = v
}

// GetSteps returns the Steps field value
func (o *DailyActivityModel) GetSteps() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Steps
}

// GetStepsOk returns a tuple with the Steps field value
// and a boolean to check if the value has been set.
func (o *DailyActivityModel) GetStepsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Steps, true
}

// SetSteps sets field value
func (o *DailyActivityModel) SetSteps(v int32) {
	o.Steps = v
}

// GetTargetCalories returns the TargetCalories field value
func (o *DailyActivityModel) GetTargetCalories() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TargetCalories
}

// GetTargetCaloriesOk returns a tuple with the TargetCalories field value
// and a boolean to check if the value has been set.
func (o *DailyActivityModel) GetTargetCaloriesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetCalories, true
}

// SetTargetCalories sets field value
func (o *DailyActivityModel) SetTargetCalories(v int32) {
	o.TargetCalories = v
}

// GetTargetMeters returns the TargetMeters field value
func (o *DailyActivityModel) GetTargetMeters() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TargetMeters
}

// GetTargetMetersOk returns a tuple with the TargetMeters field value
// and a boolean to check if the value has been set.
func (o *DailyActivityModel) GetTargetMetersOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetMeters, true
}

// SetTargetMeters sets field value
func (o *DailyActivityModel) SetTargetMeters(v int32) {
	o.TargetMeters = v
}

// GetTotalCalories returns the TotalCalories field value
func (o *DailyActivityModel) GetTotalCalories() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalCalories
}

// GetTotalCaloriesOk returns a tuple with the TotalCalories field value
// and a boolean to check if the value has been set.
func (o *DailyActivityModel) GetTotalCaloriesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCalories, true
}

// SetTotalCalories sets field value
func (o *DailyActivityModel) SetTotalCalories(v int32) {
	o.TotalCalories = v
}

// GetDay returns the Day field value
func (o *DailyActivityModel) GetDay() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Day
}

// GetDayOk returns a tuple with the Day field value
// and a boolean to check if the value has been set.
func (o *DailyActivityModel) GetDayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Day, true
}

// SetDay sets field value
func (o *DailyActivityModel) SetDay(v string) {
	o.Day = v
}

// GetTimestamp returns the Timestamp field value
func (o *DailyActivityModel) GetTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *DailyActivityModel) GetTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *DailyActivityModel) SetTimestamp(v string) {
	o.Timestamp = v
}

func (o DailyActivityModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DailyActivityModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["class_5_min"] = o.Class5Min.Get()
	toSerialize["score"] = o.Score.Get()
	toSerialize["active_calories"] = o.ActiveCalories
	toSerialize["average_met_minutes"] = o.AverageMetMinutes
	toSerialize["contributors"] = o.Contributors
	toSerialize["equivalent_walking_distance"] = o.EquivalentWalkingDistance
	toSerialize["high_activity_met_minutes"] = o.HighActivityMetMinutes
	toSerialize["high_activity_time"] = o.HighActivityTime
	toSerialize["inactivity_alerts"] = o.InactivityAlerts
	toSerialize["low_activity_met_minutes"] = o.LowActivityMetMinutes
	toSerialize["low_activity_time"] = o.LowActivityTime
	toSerialize["medium_activity_met_minutes"] = o.MediumActivityMetMinutes
	toSerialize["medium_activity_time"] = o.MediumActivityTime
	toSerialize["met"] = o.Met
	toSerialize["meters_to_target"] = o.MetersToTarget
	toSerialize["non_wear_time"] = o.NonWearTime
	toSerialize["resting_time"] = o.RestingTime
	toSerialize["sedentary_met_minutes"] = o.SedentaryMetMinutes
	toSerialize["sedentary_time"] = o.SedentaryTime
	toSerialize["steps"] = o.Steps
	toSerialize["target_calories"] = o.TargetCalories
	toSerialize["target_meters"] = o.TargetMeters
	toSerialize["total_calories"] = o.TotalCalories
	toSerialize["day"] = o.Day
	toSerialize["timestamp"] = o.Timestamp
	return toSerialize, nil
}

func (o *DailyActivityModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"class_5_min",
		"score",
		"active_calories",
		"average_met_minutes",
		"contributors",
		"equivalent_walking_distance",
		"high_activity_met_minutes",
		"high_activity_time",
		"inactivity_alerts",
		"low_activity_met_minutes",
		"low_activity_time",
		"medium_activity_met_minutes",
		"medium_activity_time",
		"met",
		"meters_to_target",
		"non_wear_time",
		"resting_time",
		"sedentary_met_minutes",
		"sedentary_time",
		"steps",
		"target_calories",
		"target_meters",
		"total_calories",
		"day",
		"timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDailyActivityModel := _DailyActivityModel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDailyActivityModel)

	if err != nil {
		return err
	}

	*o = DailyActivityModel(varDailyActivityModel)

	return err
}

type NullableDailyActivityModel struct {
	value *DailyActivityModel
	isSet bool
}

func (v NullableDailyActivityModel) Get() *DailyActivityModel {
	return v.value
}

func (v *NullableDailyActivityModel) Set(val *DailyActivityModel) {
	v.value = val
	v.isSet = true
}

func (v NullableDailyActivityModel) IsSet() bool {
	return v.isSet
}

func (v *NullableDailyActivityModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDailyActivityModel(val *DailyActivityModel) *NullableDailyActivityModel {
	return &NullableDailyActivityModel{value: val, isSet: true}
}

func (v NullableDailyActivityModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDailyActivityModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


